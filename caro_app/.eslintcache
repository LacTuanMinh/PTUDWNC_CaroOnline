[{"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\index.js":"1","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\App.js":"2","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\games.js":"3","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Profile\\profile.js":"4","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\PlayedGame\\playedGame.js":"5","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Navbar\\navbar.js":"6","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignUp\\signup.js":"7","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Footer\\footer.js":"8","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Home\\home.js":"9","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\InvitationDiallog\\index.js":"10","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ResetDetination\\index.js":"11","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ActiveDestination\\index.js":"12","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\game.js":"13","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignIn\\signin.js":"14","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gamelist.js":"15","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\gameServices.js":"16","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\board.js":"17","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\utils\\helper.js":"18","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\PlayedGamesDialog\\index.js":"19","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SnackBar\\snackbar.js":"20","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Primary.js":"21","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ImageUploadDialog\\index.js":"22","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\square.js":"23","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ChangePasswordDialog\\index.js":"24","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gameitem.js":"25","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Secondary.js":"26","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Player\\player.js":"27","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ResetPasswordDialog\\index.js":"28","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Ranking\\index.js":"29","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Timer\\timer.js":"30"},{"size":423,"mtime":1610120102836,"results":"31","hashOfConfig":"32"},{"size":2868,"mtime":1610120102816,"results":"33","hashOfConfig":"32"},{"size":7074,"mtime":1610120102824,"results":"34","hashOfConfig":"32"},{"size":13875,"mtime":1610120102828,"results":"35","hashOfConfig":"32"},{"size":8643,"mtime":1610350584502,"results":"36","hashOfConfig":"32"},{"size":4607,"mtime":1610120102826,"results":"37","hashOfConfig":"32"},{"size":5908,"mtime":1610120102830,"results":"38","hashOfConfig":"32"},{"size":1279,"mtime":1610120102820,"results":"39","hashOfConfig":"32"},{"size":5284,"mtime":1610120102825,"results":"40","hashOfConfig":"32"},{"size":2510,"mtime":1610120102818,"results":"41","hashOfConfig":"32"},{"size":5926,"mtime":1610120102829,"results":"42","hashOfConfig":"32"},{"size":1433,"mtime":1610120102817,"results":"43","hashOfConfig":"32"},{"size":27941,"mtime":1610350954347,"results":"44","hashOfConfig":"32"},{"size":10880,"mtime":1610303573642,"results":"45","hashOfConfig":"32"},{"size":345,"mtime":1610120102824,"results":"46","hashOfConfig":"32"},{"size":7348,"mtime":1610120164298,"results":"47","hashOfConfig":"32"},{"size":889,"mtime":1610120102821,"results":"48","hashOfConfig":"32"},{"size":1264,"mtime":1610120102837,"results":"49","hashOfConfig":"32"},{"size":4365,"mtime":1610350506625,"results":"50","hashOfConfig":"32"},{"size":1551,"mtime":1610303573648,"results":"51","hashOfConfig":"32"},{"size":4710,"mtime":1610120102826,"results":"52","hashOfConfig":"32"},{"size":1958,"mtime":1610120102818,"results":"53","hashOfConfig":"32"},{"size":322,"mtime":1610120102823,"results":"54","hashOfConfig":"32"},{"size":6651,"mtime":1610120102818,"results":"55","hashOfConfig":"32"},{"size":4224,"mtime":1610335914537,"results":"56","hashOfConfig":"32"},{"size":5747,"mtime":1610120102827,"results":"57","hashOfConfig":"32"},{"size":1309,"mtime":1610120102828,"results":"58","hashOfConfig":"32"},{"size":3799,"mtime":1610120102819,"results":"59","hashOfConfig":"32"},{"size":2911,"mtime":1610120102828,"results":"60","hashOfConfig":"32"},{"size":1032,"mtime":1610303573673,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"6ilod4",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"64"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"64"},"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\index.js",[],["136","137"],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\App.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\games.js",["138","139","140"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { authen, isBlankString } from '../../utils/helper'\r\nimport GameList from './gamelist';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(4, 0, 2),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '25%',\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  fab: {\r\n    width: '35%',\r\n    height: '35%',\r\n    fontSize: '50px',\r\n  }\r\n}));\r\n\r\nfunction Games({ socket }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const userID = localStorage.getItem('userID');\r\n  const jwtToken = window.localStorage.getItem('jwtToken');\r\n  const [open, setOpen] = useState(false);\r\n  const [games, setGames] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(null);\r\n  const [isBlockedRule, setIsBlockedRule] = useState(false);\r\n  const [timeThinkingEachTurn, setTimeThinkingEachTurn] = useState(60);\r\n\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const status = await authen();\r\n      if (status === 401) {\r\n        history.push('/signin')\r\n      }\r\n    }\r\n    Authen();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function getAllGames() {\r\n      const res = await fetch(`${API_URL}/games`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${jwtToken}`\r\n        }\r\n      });\r\n      const result = await res.json();\r\n      // console.log(result);\r\n      setGames(result.games);\r\n    }\r\n    getAllGames();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    socket.on(`newGameFail${userID}`, (data) => {\r\n      alert(data.msg);// game name is empty\r\n    });\r\n\r\n    socket.on(\"server_NewGame\", data => {\r\n      setGames(games => {\r\n        const gamesCopy = games.slice();\r\n        return [data.game].concat(gamesCopy);\r\n      });\r\n      if (data.game.Player1ID === userID) {\r\n        history.push(`/games/${data.game.ID}`);\r\n      }\r\n    })\r\n  }, []);\r\n\r\n  const addGameButtonClicked = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleCreate = async () => {\r\n    const data = {\r\n      name,\r\n      password,\r\n      isBlockedRule,\r\n      timeThinkingEachTurn,\r\n      userID\r\n    }\r\n    // console.log(data);\r\n    if (isBlankString(data.name)) {\r\n      alert('Game name can not be empty');\r\n      return;\r\n    }\r\n    socket.emit('client_NewGame', data);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <main>\r\n        {/* Hero unit */}\r\n        <div className={classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n              Games layout\r\n            </Typography>\r\n          </Container>\r\n        </div>\r\n        <Container className={classes.cardGrid} maxWidth=\"lg\">\r\n          {/* End hero unit */}\r\n          <Grid container spacing={4}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card className={classes.card}>\r\n                <CardMedia className={classes.cardMedia}>\r\n                  <Fab className={classes.fab} color=\"primary\" aria-label=\"Add\"\r\n                    onClick={addGameButtonClicked}>\r\n                    +\r\n                  </Fab>\r\n                </CardMedia>\r\n                <CardContent className={classes.cardContent}>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Create a new game\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <GameList\r\n              games={games}\r\n              socket={socket}\r\n            />\r\n          </Grid>\r\n          <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Game Information</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                Please enter the information for the game\r\n              </DialogContentText>\r\n              <TextField id=\"name\" label=\"Name\" autoFocus margin=\"dense\" required\r\n                fullWidth onChange={e => setName(e.target.value)}\r\n              />\r\n              <TextField id=\"password\" label=\"Password\" margin=\"dense\"\r\n                fullWidth onChange={e => setPassword(e.target.value)}\r\n              />\r\n              <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\r\n                <Typography>\r\n                  Is Blocked Rule\r\n                </Typography>\r\n                <Checkbox onChange={e => setIsBlockedRule(e.target.checked)} />\r\n              </div>\r\n\r\n              <div>\r\n                <Typography style={{ display: \"inline-flex\", alignItems: \"center\" }}>\r\n                  Time to think each turn (seconds)\r\n                </Typography>\r\n                <Select labelId=\"demo-customized-select-label\" id=\"time\" value={timeThinkingEachTurn}\r\n                  style={{ marginLeft: \"10px\" }} onChange={e => setTimeThinkingEachTurn(e.target.value)}\r\n                >\r\n                  <MenuItem value={10}>10</MenuItem>\r\n                  <MenuItem value={30}>30</MenuItem>\r\n                  <MenuItem value={60}>60</MenuItem>\r\n                  <MenuItem value={90}>90</MenuItem>\r\n                </Select>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={handleCreate} color=\"secondary\">\r\n                Create\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Container>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Games;","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Profile\\profile.js",["141","142","143"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ChangePasswordDialog from '../Dialogs/ChangePasswordDialog';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport ImageUploadDialog from '../Dialogs/ImageUploadDialog';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport SimpleSnackbar from '../SnackBar/snackbar';\r\nimport defaultAvatar from '../../images/defaultAvatar.jpg';\r\nimport PlayedGamesDialog from '../Dialogs/PlayedGamesDialog/index';\r\nimport config from '../../constants/config.json';\r\nimport { isBlankString, isEmailPattern, convertISOToDMY } from '../../utils/helper';\r\nimport MedalIcon from '../../images/medal.png';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '25%',\r\n  },\r\n  cardHeader: {\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"black\"//theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '75%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  container: {\r\n    display: 'inline-block',\r\n    width: '100%'\r\n  },\r\n  floatRight: {\r\n    float: \"right\",\r\n    width: '60%'\r\n  },\r\n  floatLeft: {\r\n    float: \"left\",\r\n    width: '40%'\r\n  },\r\n  paperLikeShadow: {\r\n    boxShadow: '0 4px 8px 5px rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n  },\r\n  hidden: {\r\n    display: 'none'\r\n  }\r\n}));\r\n\r\nexport default function Profile() {\r\n  const classes = useStyles();\r\n  const userID = localStorage.getItem('userID');\r\n  const token = localStorage.getItem('jwtToken');\r\n  const history = useHistory();\r\n  const [name, setName] = useState(\"\");\r\n  const [validName, setValidName] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [validEmail, setValidEmail] = useState(true);\r\n  const [dateOfBirth, setDateOfBirth] = useState((new Date()).toISOString());\r\n  const [validDOB, setValidDOB] = useState(true);\r\n  const [avatar, setAvatar] = useState(\"\");\r\n  const [activatedDate, setActivatedDate] = useState((new Date()).toISOString());\r\n  const [info, setInfo] = useState({});\r\n  const [contents, setContents] = useState([]);\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function ComponentWillMount() {\r\n      const res = await fetch(`${API_URL}/users/profile/${userID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        const result = await res.json();\r\n        console.log(result.userInfo);\r\n        setInfo(result.userInfo);\r\n        setName(result.userInfo.Name);\r\n        setEmail(result.userInfo.Email);\r\n        setAvatar(result.userInfo.Avatar);\r\n        setActivatedDate(result.userInfo.ActivatedDate);\r\n        setDateOfBirth(result.userInfo.DateOfBirth);\r\n      } else {\r\n        history.push('/signin');\r\n        return;\r\n      }\r\n    }\r\n    ComponentWillMount();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function retrieveAvatar() {\r\n      const res = await fetch(`${API_URL}/users/avatar/${userID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          ContentType: 'image/jpeg',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        const result = await res.blob();\r\n        setAvatar(URL.createObjectURL(result));\r\n      }\r\n    }\r\n    retrieveAvatar();\r\n  }, [setAvatar]);\r\n\r\n  const handleNameChange = (name) => {\r\n    setName(name);\r\n    if (isBlankString(name)) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 1), { id: 1, msg: \"Name field can't be empty!!!\" }]);\r\n      setValidName(false);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 1));\r\n      setValidName(true);\r\n    }\r\n  }\r\n\r\n  const handleEmailChange = (email) => {\r\n    setEmail(email);\r\n    if (isBlankString(email)) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 2), { id: 2, msg: \"Email field can't be empty!!!\" }]);\r\n      setValidEmail(false);\r\n    }\r\n    else if (!isEmailPattern(email)) {// === false\r\n      setContents(contents => [...contents.filter(content => content.id !== 2), { id: 2, msg: \"Email field doesn't match the email format!!!\" }]);\r\n      setValidEmail(false);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 2));\r\n      setValidEmail(true);\r\n    }\r\n  }\r\n\r\n  const handleDateChange = (date) => {\r\n    setDateOfBirth(date.toISOString());\r\n    const now = new Date().toISOString()\r\n    if (dateOfBirth < now) {\r\n      setContents(contents.filter(content => content.id !== 3));\r\n      setValidDOB(true);\r\n    }\r\n    else {\r\n      setContents(contents => [...contents.filter(content => content.id !== 3), { id: 3, msg: \"Invalid date!!!\" }]);\r\n      setValidDOB(false);\r\n    }\r\n  }\r\n\r\n  const handleSaveChange = async () => {\r\n    if (validDOB && validEmail && validName) {\r\n      const data = {\r\n        Name: name,\r\n        Email: email,\r\n        DateOfBirth: dateOfBirth\r\n      }\r\n      const res = await fetch(`${API_URL}/users/profile/updateinfo/${userID}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      // const result = await res.json();\r\n\r\n      if (res.status === 200) {\r\n\r\n        const infoCopy = JSON.parse(JSON.stringify(info));\r\n\r\n        infoCopy.Name = data.Name;\r\n        infoCopy.Email = data.Email;\r\n        infoCopy.DateOfBirth = data.DateOfBirth;\r\n        setInfo(infoCopy);\r\n        setShowSnackBar(true);\r\n      } else {\r\n        // alert(\"Some error when updating!\")\r\n      }\r\n    } else {\r\n      setShowSnackBar(true);\r\n    }\r\n  }\r\n\r\n  const handleResetInfo = () => {\r\n    setName(info.Name);\r\n    setEmail(info.Email);\r\n    setDateOfBirth(info.DateOfBirth);\r\n    setValidEmail(true);\r\n    setValidName(true);\r\n    setValidDOB(true);\r\n    setContents([]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n      <Container component=\"main\" maxWidth=\"lg\">\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={12} md={6}>\r\n            <div className={classes.paper} style={{ padding: '20px' }}>\r\n              <img height={200} width={200} style={{ borderRadius: '8px' }} className={classes.paperLikeShadow}\r\n                src={avatar ? avatar : defaultAvatar} alt=\"User avatar\"\r\n              />\r\n              <ImageUploadDialog setAvatar={setAvatar} setShowSnackBar={setShowSnackBar} />\r\n              <Card className={classes.paperLikeShadow} style={{ width: '70%' }}>\r\n                <CardHeader\r\n                  title={\r\n                    <Badge color=\"secondary\">\r\n                      <div style={{ display: 'table' }}>\r\n                        <img src={MedalIcon} height=\"40\" width=\"40\" style={{\r\n                          display: 'table-cell',\r\n                          verticalAlign: 'middle',\r\n                          marginRight: '10px'\r\n                        }} />\r\n                        <span style={{ display: 'table-cell', verticalAlign: 'middle', marginLeft: '10px' }}> {info.medal}</span>\r\n                      </div>\r\n                    </Badge>}\r\n                  className={classes.cardHeader}\r\n                />\r\n                <CardContent>\r\n                  {/* <Typography> */}\r\n                  <table style={{ margin: '10px', width: '100%', fontSize: \"20px\" }}>\r\n                    <tbody>\r\n                      <tr key={1}>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold', width: '50%' }}>Elo mark:</td>\r\n                        <td style={{ textAlign: 'center', width: '50%' }}>{info.Elo}</td>\r\n                      </tr>\r\n                      <tr key={2}>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold' }}>Total play(s):</td>\r\n                        <td style={{ textAlign: 'center' }}>{info.PlayCount}</td>\r\n                      </tr>\r\n                      <tr key={3}>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold' }}>Winned play(s):</td>\r\n                        <td style={{ textAlign: 'center' }}>{info.WinCount}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <PlayedGamesDialog />\r\n                </CardActions>\r\n              </Card>\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <div className={classes.paper}>\r\n              <Typography component=\"h2\" variant=\"h5\">\r\n                YOUR PROFILE\r\n                <IconButton onClick={handleResetInfo} title=\"Reset information\" color=\"primary\" aria-label=\"add an alarm\" style={{ fontSize: 'large' }} >\r\n                  <ReplayIcon />\r\n                </IconButton>\r\n              </Typography>\r\n              <div className={classes.form} >\r\n\r\n                <div className={classes.container}>\r\n                  <Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> Name:</b> </Typography>\r\n                  {validName ?\r\n                    <></>\r\n                    :\r\n                    <Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n                  }\r\n                </div>\r\n                <TextField variant=\"outlined\" margin=\"normal\" required fullWidth autoFocus\r\n                  placeholder=\"Username\" value={name}\r\n                  onChange={(event) => { handleNameChange(event.target.value); }}\r\n                />\r\n\r\n                <div className={classes.container}>\r\n                  <Typography className={classes.floatLeft} align=\"left\" component=\"h2\"> <b>Email:</b>  </Typography>\r\n                  {validEmail ?\r\n                    <></>\r\n                    :\r\n                    <Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n                  }\r\n                </div>\r\n                <TextField variant=\"outlined\" margin=\"normal\" required fullWidth\r\n                  id=\"email\" name=\"email\" placeholder=\"Email\" value={email}\r\n                  onChange={(event) => { handleEmailChange(event.target.value); }}\r\n                />\r\n\r\n                <div className={classes.container}>\r\n                  <Typography align=\"left\" component=\"h2\" className={classes.floatLeft}>\r\n                    <b>Date of Birth:</b>\r\n                  </Typography>\r\n                  {validDOB ?\r\n                    <></>\r\n                    :\r\n                    <Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n                  }\r\n                </div>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils} >\r\n                  <KeyboardDatePicker\r\n                    // disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"dd/MM/yyyy\"\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-inline\"\r\n                    fullWidth value={dateOfBirth}\r\n                    onChange={handleDateChange}\r\n                    KeyboardButtonProps={{\r\n                      'aria-label': 'change date',\r\n                    }}\r\n                    placeholder=\"Date of Birth\"\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n\r\n                <div className={classes.container}>\r\n                  <Typography align=\"left\" component=\"h2\" className={classes.floatLeft}>\r\n                    <b>Activated date:</b>\r\n                  </Typography>\r\n                  <TextField variant=\"outlined\" margin=\"normal\" required fullWidth\r\n                    placeholder=\"Activated date\" value={convertISOToDMY(activatedDate)} disabled\r\n                  />\r\n                </div>\r\n                <Button type=\"submit\" fullWidth variant=\"outlined\" color=\"primary\" onClick={handleSaveChange}\r\n                  className={classes.submit} startIcon={<SaveIcon />}\r\n                >\r\n                  Save Change\r\n                </Button>\r\n                <Typography align=\"left\" component=\"h2\" style={{ marginTop: 10, marginBottom: 12, fontWeight: 'bold' }}> Passowrd: </Typography>\r\n                <ChangePasswordDialog />\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\PlayedGame\\playedGame.js",["144","145","146","147","148","149"],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Navbar\\navbar.js",["150"],"import React, { useEffect } from 'react';\r\nimport { NavLink, useHistory, Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport logo from '../../images/caro.ico';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  navLink: {\r\n    textDecoration: 'none',\r\n    paddingLeft: '5px'\r\n  },\r\n  button: {\r\n    color: 'white',\r\n    background: 'purple'\r\n  },\r\n  logo: {\r\n    width: '25px',\r\n    height: '25px',\r\n    marginRight: '10px'\r\n  }\r\n}));\r\n\r\nexport default function Navbar({ socket, isLoggedIn, setIsLoggedIn }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const userID = localStorage.getItem('userID');\r\n  const token = localStorage.getItem('jwtToken');\r\n\r\n  useEffect(() => {\r\n    function storageChange(event) {\r\n      if (event.key === 'jwtToken') {\r\n        if (event.newValue === null) {\r\n          setIsLoggedIn(false);\r\n          socket.emit('client_LoggedOut', { userID });\r\n          history.push('/signin');\r\n          return;\r\n\r\n        } else {\r\n          setIsLoggedIn(true);\r\n          history.push('/');\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('storage', storageChange);\r\n    return () => {\r\n      window.removeEventListener('storage', storageChange);\r\n    }\r\n  }, []);\r\n\r\n  const logoutButtonClicked = async () => {\r\n    const data = {\r\n      userID\r\n    }\r\n    const res = await fetch(`${API_URL}/users/signout`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    if (res.status === 400) {\r\n      const result = await res.json();\r\n      alert(result.mesg);\r\n\r\n    }\r\n    else { // other status: 200, 401, ...\r\n      setIsLoggedIn(false);\r\n      localStorage.removeItem('jwtToken');\r\n      localStorage.clear();\r\n      history.push('/');\r\n\r\n      if (res.status === 200) // only status 200\r\n      {\r\n        socket.emit('client_LoggedOut', { userID: data.userID });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"static\" color=\"primary\">\r\n        <Toolbar>\r\n          <NavLink to=\"/\" style={{ display: 'inline-block', textDecoration: 'none', color: \"white\" }}>\r\n            <img className={classes.logo} src={logo} alt=\"This is my website logo\"></img>\r\n          </NavLink>\r\n\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap style={{ flex: 1 }}>\r\n            <NavLink to=\"/\" style={{ display: 'inline-block', textDecoration: 'none', color: \"white\" }}>\r\n              Caro Tournament\r\n            </NavLink>\r\n          </Typography>\r\n\r\n          <div>\r\n            <Link to='/' className={classes.navLink}>\r\n              <Button variant=\"contained\" color=\"secondary\">\r\n                Home\r\n              </Button>\r\n            </Link>\r\n            <NavLink to='/games' className={classes.navLink}>\r\n              <Button variant=\"contained\" color=\"secondary\">\r\n                Games\r\n              </Button>\r\n            </NavLink>\r\n\r\n            {isLoggedIn ?\r\n              <React.Fragment>\r\n                <NavLink to='/profile' className={classes.navLink}>\r\n                  <Button variant=\"contained\" color=\"secondary\">\r\n                    Profile\r\n                </Button>\r\n                </NavLink>\r\n                <NavLink to='/' className={classes.navLink}>\r\n                  <Button variant=\"contained\" color=\"secondary\" onClick={logoutButtonClicked}>\r\n                    Sign Out\r\n                </Button>\r\n                </NavLink>\r\n              </React.Fragment> :\r\n              <React.Fragment>\r\n                <NavLink to='/signIn' className={classes.navLink}>\r\n                  <Button variant=\"contained\" color=\"secondary\">\r\n                    Sign In\r\n                </Button>\r\n                </NavLink>\r\n                <NavLink to='/signUp' className={classes.navLink}>\r\n                  <Button variant=\"contained\" color=\"secondary\">\r\n                    Sign Up\r\n                </Button>\r\n                </NavLink>\r\n              </React.Fragment>}\r\n\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignUp\\signup.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Footer\\footer.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Home\\home.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\InvitationDiallog\\index.js",["151"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function InvitationDialog({ socket }) {\r\n  const userID = localStorage.getItem('userID');\r\n  const history = useHistory();\r\n  const [open, setOpen] = useState(false);\r\n  const [hostName, setHostName] = useState(\"\");\r\n  const [gameID, setGameID] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    socket.on(`invite_${userID}`, data => {\r\n      setHostName(data.hostName);\r\n      setGameID(data.gameID);\r\n      setOpen(true);\r\n    });\r\n  }, [userID]);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setHostName(\"\");\r\n    setGameID(\"\")\r\n  };\r\n\r\n  const handleJoinGame = () => {\r\n    setOpen(false);\r\n    history.push('/games/' + gameID);\r\n    socket.emit(\"join_game\", { gameID: gameID, userID });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Slide in alert dialog\r\n      </Button> */}\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\"><Typography variant=\"h4\">{`Invitation`}</Typography></DialogTitle>\r\n        <DialogContent >\r\n          <DialogContentText id=\"alert-dialog-slide-description\" style={{ fontSize: '18px' }}>\r\n            <b>{hostName}</b> wants you to join the room\r\n            <br />\r\n            {gameID}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleJoinGame} color=\"secondary\">\r\n            Agree\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Disagree\r\n          </Button>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ResetDetination\\index.js",["152","153","154","155"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport SimpleSnackbar, { InformationSnackbar } from '../SnackBar/snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { isBlankString } from '../../utils/helper';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nfunction ResetDestination({ isLoggedIn }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const reqID = useParams().id;\r\n\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [contents, setContents] = useState([]);\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const res = await fetch(`${API_URL}/checkResetRequest`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ ID: reqID }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      if (res.status !== 200) {\r\n        history.push('/');\r\n      }\r\n    };\r\n\r\n    if (isLoggedIn) {\r\n      history.push('/');\r\n      return;\r\n    }\r\n    Authen();\r\n  }, []);\r\n\r\n  const handlePasswordChange = (password) => {\r\n    setPassword(password);\r\n    if (isBlankString(password) || password.length < 6) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 1), { id: 1, msg: \"Password must be longer than 6 chars and not blank.\" }]);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 1));\r\n    }\r\n  }\r\n\r\n  const handleConfirmPasswordChange = (password) => {\r\n    setConfirmPassword(password);\r\n    if (isBlankString(password) || password.length < 6) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 1), { id: 1, msg: \"Password must be longer than 6 chars and not blank.\" }]);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 1));\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (password !== confirmPassword) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 2), { id: 2, msg: \"Confirm password does not match.\" }]);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 2));\r\n    }\r\n\r\n    if (contents.length > 0) {\r\n      setShowSnackBar(true);\r\n      return;\r\n    }\r\n    const data = {\r\n      ID: reqID,\r\n      password,\r\n      confirmPassword\r\n    }\r\n\r\n    const res = await fetch(`${API_URL}/resetpassword`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    if (res.status === 200) {\r\n      setContents([]);\r\n      setShowSnackBar(true);\r\n    } else if (res.status === 500) {\r\n      setContents([{ id: -1, msg: result.msg }]);\r\n      setShowSnackBar(true);\r\n    } else if (res.status === 400) {\r\n      history.push('/');\r\n    }\r\n  }\r\n\r\n  const signInClicked = () => {\r\n    history.push('/signIn');\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n\r\n      <CssBaseline />\r\n      <div className={classes.paper} style={{ marginBottom: '60px' }}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\" style={{ color: 'red' }}>\r\n          Reset your password\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <TextField label=\"Password\" variant=\"outlined\"\r\n            margin=\"normal\" required fullWidth autoFocus type=\"password\"\r\n            onChange={e => handlePasswordChange(e.target.value)}\r\n          />\r\n          <TextField id=\"password\" name=\"password\" label=\"Confirm Password\" type=\"password\"\r\n            variant=\"outlined\" margin=\"normal\" required fullWidth\r\n            onChange={e => handleConfirmPasswordChange(e.target.value)}\r\n          />\r\n          <Button className={classes.submit} type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n            Confirm\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link onClick={signInClicked} variant=\"body2\" style={{ cursor: 'pointer ' }}>\r\n                Go to sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      {/* <Box mt={8}>\r\n        <Copyright />\r\n      </Box> */}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ResetDestination;","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ActiveDestination\\index.js",["156"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nexport default function ActiveDestination({ socket, isLoggedIn, setIsLoggedIn }) {\r\n\tconst ID = useParams().id;\r\n\tconst history = useHistory();\r\n\tconst [status, setStatus] = useState(\"Activating your account. Please wait a moment ...\")\r\n\tuseEffect(() => {\r\n\t\tasync function active() {\r\n\r\n\t\t\tif (isLoggedIn) {\r\n\t\t\t\thistory.push(\"/\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst res = await fetch(`${API_URL}/active`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: JSON.stringify({ ID }),\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst result = await res.json()\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\talert(result.msg);\r\n\t\t\t\twindow.localStorage.setItem('jwtToken', result.token);\r\n\t\t\t\twindow.localStorage.setItem('userID', result.id);\r\n\t\t\t\twindow.localStorage.setItem('name', result.name);\r\n\r\n\t\t\t\tsocket.emit(`client_LoggedIn`, { userID: result.id });\r\n\t\t\t\tsetIsLoggedIn(true);\r\n\t\t\t\thistory.push(\"/\");\r\n\r\n\t\t\t} else if (res.status === 400) { // already activated or not exist\r\n\t\t\t\t// alert(result.msg);\r\n\t\t\t\tsetStatus(result.msg);\r\n\t\t\t}\r\n\t\t}\r\n\t\tactive();\r\n\t}, [ID])\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Typography>{status}</Typography>\r\n\t\t</>);\r\n}","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\game.js",["157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174"],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignIn\\signin.js",["175","176","177","178"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport ResetPasswordDialog from '../Dialogs/ResetPasswordDialog';\r\nimport SimpleSnackbar from '../SnackBar/snackbar';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport GoogleIcon from '../../images/google.png';\r\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\r\nimport GoogleLogin from 'react-google-login';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { authen, isBlankString } from '../../utils/helper';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  shadow: {\r\n    boxShadow: '4px 4px 8px 4px rgba(0, 0, 0, 0.2), 4px 6px 20px 4px rgba(0, 0, 0, 0.19)',\r\n  },\r\n  socialLoginButton: {\r\n    display: 'table',\r\n    width: '300px',\r\n    height: '50px',\r\n    fontWeight: 'bolder',\r\n    textAlign: 'center',\r\n    borderRadius: '5px',\r\n    margin: '20px',\r\n    cursor: 'pointer'\r\n  },\r\n  facebook: {\r\n    border: '1px solid  #3b5998',\r\n    backgroundColor: ' #3b5998',\r\n    color: 'white',\r\n  },\r\n  google: {\r\n    border: '1px solid  #f1f3f4',\r\n    backgroundColor: ' #f1f3f4',\r\n    color: 'black',\r\n  }\r\n}));\r\n\r\nfunction SignIn({ socket, isLoggedIn, setIsLoggedIn }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [validUserName, setValidUserName] = useState(false);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [validPassword, setValidPassword] = useState(false);\r\n  const [contents, setContents] = useState([]);\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const status = await authen();\r\n      if (status === 200) {\r\n        history.push('/');\r\n      }\r\n    }\r\n    Authen();\r\n  }, [history]);\r\n\r\n  const handleUsernameChange = (username) => {\r\n    setUsername(username);\r\n    if (isBlankString(username)) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 1), { id: 1, msg: \"Username can't be empty.\" }]);\r\n      setValidUserName(false);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 1));\r\n      setValidUserName(true);\r\n    }\r\n  }\r\n\r\n  const handlePasswordChange = (password) => {\r\n    setPassword(password);\r\n    if (isBlankString(password) || password.length < 6) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 2), { id: 2, msg: \"Pasword can't be empty or shorter than 6 chars\" }]);\r\n      setValidPassword(false);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 2));\r\n      setValidPassword(true);\r\n    }\r\n  }\r\n\r\n  const signUpClicked = () => {\r\n    history.push('/signUp');\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const signIn = async () => {\r\n      const data = {\r\n        username: username,\r\n        password: password\r\n      };\r\n\r\n      if (!validUserName || !validPassword) {\r\n        setShowSnackBar(true);\r\n        return;\r\n      }\r\n\r\n      const res = await fetch(`${API_URL}/signin`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n      const result = await res.json();\r\n      if (res.status === 200) {\r\n        window.localStorage.setItem('jwtToken', result.token);\r\n        window.localStorage.setItem('userID', result.id);\r\n        window.localStorage.setItem('name', result.name);\r\n        socket.emit('client_LoggedIn', { userID: result.id });\r\n        setIsLoggedIn(true);\r\n        history.push(\"/games\");\r\n      } else {\r\n        // alert(result.mesg);\r\n        setContents([{ id: -1, msg: result.msg }]);\r\n        setShowSnackBar(true);\r\n      }\r\n    }\r\n    // call API here\r\n    signIn();\r\n  }\r\n\r\n  const responseFacebook = async (response) => {\r\n\r\n    const data = {\r\n      name: response.name,\r\n      email: response.email,\r\n      id: response.id\r\n    };\r\n\r\n    const res = await fetch(`${API_URL}/auth/socialmedia`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n\r\n    const result = await res.json();\r\n    if (res.status === 200) {\r\n      window.localStorage.setItem('jwtToken', result.token);\r\n      window.localStorage.setItem('userID', result.id);\r\n      window.localStorage.setItem('name', result.name);\r\n      socket.emit('client_LoggedIn', { userID: result.id });\r\n      alert(\"Welcome to our app\");\r\n      setIsLoggedIn(true);\r\n      history.push(\"/\");\r\n    } else {\r\n      // alert(result.mesg);\r\n      setContents([{ id: -1, msg: result.msg }]);\r\n      setShowSnackBar(true);\r\n    }\r\n  }\r\n\r\n  const responseGoogle = async (response) => {\r\n    console.log(response);\r\n\r\n    const data = {\r\n      name: response.profileObj.name,\r\n      email: response.profileObj.email,\r\n      id: response.googleId\r\n    };\r\n    const res = await fetch(`${API_URL}/auth/socialmedia`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n\r\n    const result = await res.json();\r\n    if (res.status === 200) {\r\n      window.localStorage.setItem('jwtToken', result.token);\r\n      window.localStorage.setItem('userID', result.id);\r\n      window.localStorage.setItem('name', result.name);\r\n      socket.emit('client_LoggedIn', { userID: result.id });\r\n      alert(\"Welcome to our app\");\r\n      setIsLoggedIn(true);\r\n      history.push(\"/\");\r\n    } else {\r\n      // alert(result.mesg);\r\n      setContents([{ id: -1, msg: result.msg }]);\r\n      setShowSnackBar(true);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"md\">\r\n      <SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n\r\n      <CssBaseline />\r\n\r\n      <Grid container spacing={6} /*style={{ paddingLeft: '100px', paddingRight: '100px' }}*/>\r\n        <Grid item xs={12} sm={5} md={5} >\r\n          <div className={classes.paper} style={{ marginBottom: '60px' }}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Welcome To Our Page\r\n            </Typography>\r\n            <Link onClick={signUpClicked} variant=\"body2\" style={{ cursor: 'pointer', margin: '10px' }}>\r\n              {\"Don't have an account? Sign up\"}\r\n            </Link>\r\n            <form className={classes.form} onSubmit={handleSubmit}>\r\n              <TextField id=\"username\" name=\"username\" label=\"Username\" variant=\"outlined\"\r\n                margin=\"normal\" required fullWidth autoComplete=\"username\" autoFocus\r\n                onChange={e => handleUsernameChange(e.target.value)}\r\n              />\r\n              <TextField id=\"password\" name=\"password\" label=\"Password\" type=\"password\"\r\n                variant=\"outlined\" margin=\"normal\" required fullWidth autoComplete=\"current-password\"\r\n                onChange={e => handlePasswordChange(e.target.value)}\r\n              />\r\n              <Button className={classes.submit} type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n                Sign In\r\n              </Button>\r\n              <Grid container justify=\"flex-end\">\r\n                <Grid item>\r\n                  <ResetPasswordDialog />\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={2} md={2} style={{ textAlign: 'center', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n          <Divider orientation=\"vertical\" style={{ height: '35vh' }} />\r\n          <span style={{ margin: '15px' }}>OR</span>\r\n          <Divider orientation=\"vertical\" style={{ height: '45vh' }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={5} md={5} style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\r\n          <FacebookLogin\r\n            appId=\"384191462701845\"\r\n            autoLoad={false}\r\n            fields=\"name,email,picture\"\r\n            // onClick={componentClicked}\r\n            callback={responseFacebook}\r\n            render={renderProps => (\r\n              <div className={`${classes.socialLoginButton} ${classes.facebook} ${classes.shadow}`}>\r\n                <Typography onClick={renderProps.onClick} style={{ display: 'table-cell', verticalAlign: 'middle', fontWeight: 'bold' }}> <FacebookIcon style={{ margin: '10px', verticalAlign: 'middle' }} />Sign in with FaceBook</Typography>\r\n              </div>\r\n            )}\r\n          />\r\n          {/* <GoogleLogin\r\n            clientId=\"226602372235-lp2s47icle0bm0c58rnsp58f9a4tuid3.apps.googleusercontent.com\" // clientID này của account: lactuanminh2121\r\n            render={renderProps => (\r\n              <div className={`${classes.socialLoginButton} ${classes.google} ${classes.shadow}`} onClick={renderProps.onClick}>\r\n                <Typography style={{ display: 'table-cell', verticalAlign: 'middle', fontWeight: 'bold' }}>\r\n                  <img src={GoogleIcon} alt=\"Google icon\" style={{ width: '25px', height: '25px', margin: '10px', verticalAlign: 'middle' }} />\r\n                    Sign in with Google\r\n                </Typography>\r\n              </div>)}\r\n            buttonText=\"Login\"\r\n            onSuccess={responseGoogle}\r\n            onFailure={responseGoogle}\r\n            cookiePolicy={'single_host_origin'}\r\n          /> */}\r\n        </Grid>\r\n      </Grid>\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SignIn;","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gamelist.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\gameServices.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\board.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\utils\\helper.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\PlayedGamesDialog\\index.js",["179","180"],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SnackBar\\snackbar.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Primary.js",["181"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport List from '@material-ui/core/List';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Input from '@material-ui/core/Input';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: 5,\r\n    top: 30,\r\n    border: `1px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n    background: ' green',\r\n  },\r\n}))(Badge);\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  list: {\r\n    position: \"fixed\",\r\n    right: 30,\r\n    bottom: 0,\r\n    border: '2px solid grey',\r\n    borderBottomWidth: '0',\r\n    width: '300px',\r\n    borderRadius: '8px 8px 0 0',\r\n    maxHeight: '80%',\r\n    // overflowY: 'scroll',\r\n    overflow: 'auto',\r\n    background: '#f2f2f2'\r\n  },\r\n  card: {\r\n    position: \"fixed\",\r\n    right: 30,\r\n    bottom: 0,\r\n    border: `1px solid #3f51b5`,\r\n    borderRadius: '5px 5px 0 0',\r\n    width: '300px',\r\n    height: '50px',\r\n    background: '#3f51b5',\r\n    cursor: 'pointer',\r\n    display: 'inline-block',\r\n    color: 'white',\r\n    padding: '15px',\r\n    fontWeight: 'bold',\r\n  },\r\n\r\n  paperShadow: {\r\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n  },\r\n\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  floatLeft: {\r\n    float: 'left'\r\n  },\r\n  floatRight: {\r\n    float: 'right'\r\n  }\r\n\r\n}));\r\n\r\nexport default function OnlineUsers({ onlineUserList }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [onlineUserListCopy, setOnlineUserListCopy] = useState([]);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setSearchString(\"\");\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n\r\n  }\r\n  useEffect(() => {\r\n    setOnlineUserListCopy(onlineUserList.slice());\r\n  }, [onlineUserList]);\r\n\r\n  useEffect(() => {\r\n    if (searchString !== \"\")// có nội dung cần tìm\r\n    {\r\n      // console.log(\"v\");\r\n      setOnlineUserListCopy(onlineUserListCopy.slice()\r\n        .filter(user => user.Name.toLowerCase().includes(searchString.toLowerCase())))\r\n    }\r\n    else {\r\n      setOnlineUserListCopy(onlineUserList);\r\n    }\r\n  }, [searchString, onlineUserList]); // 2nd dependency help make sure new client connects will not make filtered list wrong\r\n\r\n\r\n  return (\r\n    <>\r\n      {open ?\r\n        <div className={`${classes.list} ${classes.paperShadow}`}>\r\n          <div className={classes.drawerHeader}>\r\n            <Input\r\n              placeholder=\"Username here\"\r\n              onChange={(event) => { setSearchString(event.target.value) }}\r\n              fullWidth\r\n              style={{ position: 'sticky' }}\r\n            />\r\n            <IconButton onClick={handleDrawerClose}>\r\n              <MinimizeIcon />\r\n            </IconButton>\r\n          </div>\r\n          <List >\r\n            {onlineUserListCopy.length === 0 ?\r\n              <div >No user found</div>\r\n              :\r\n              onlineUserListCopy.map((item) => (\r\n                <ListItem key={item.ID}>\r\n                  <ListItemIcon >\r\n                    <StyledBadge badgeContent={\"\"} >\r\n                      <FaceIcon fontSize=\"large\" />\r\n                    </StyledBadge>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={item.Name} />\r\n                  {/* <Button variant=\"outlined\" style={{ fontSize: '12px', borderRadius: '5px', padding: '2px' }}>Invite</Button> */}\r\n                </ListItem>\r\n              ))}\r\n          </List>\r\n        </div>\r\n        :\r\n        <div className={`${classes.card} ${classes.paperShadow}`} onClick={() => handleDrawerOpen()}>\r\n          <div className={classes.floatLeft}>\r\n            Online Users\r\n          </div>\r\n          <div className={classes.floatRight} style={{ marginRight: '10px' }}>\r\n            <Badge badgeContent={onlineUserList.length} color=\"secondary\" />\r\n          </div>\r\n        </div>\r\n      }\r\n\r\n    </>\r\n\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ImageUploadDialog\\index.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\square.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ChangePasswordDialog\\index.js",["182","183","184","185","186"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport SimpleSnackbar from '../../SnackBar/snackbar';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { isBlankString } from '../../../utils/helper'; //'../../../utils/index'\r\nimport config from '../../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n\tcontainer: {\r\n\t\tdisplay: 'inline-block',\r\n\t\twidth: '100%'\r\n\t},\r\n\tfloatRight: {\r\n\t\tfloat: \"right\",\r\n\t\twidth: '60%'\r\n\t},\r\n\tfloatLeft: {\r\n\t\tfloat: \"left\",\r\n\t\twidth: '40%'\r\n\t},\r\n\tpaperLikeShadow: {\r\n\t\tboxShadow: '0 4px 8px 5px rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n\t},\r\n\thidden: {\r\n\t\tdisplay: 'none'\r\n\t}\r\n}));\r\n\r\nexport default function FormDialog(/*{ setShowSnackBar, contents, setContents }*/) {\r\n\tconst classes = useStyles();\r\n\tconst userID = localStorage.getItem('userID');\r\n\tconst token = window.localStorage.getItem('jwtToken');\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [currentPassword, setCurrentPassword] = useState(\"\");\r\n\tconst [newPassword, setNewPassword] = useState(\"\");\r\n\tconst [validCurentPassword, setValidCurentPassword] = useState(false);\r\n\tconst [validNewPassword, setValidNewPassword] = useState(false);\r\n\tconst [showSnackbar, setShowSnackBar] = useState(false);\r\n\tconst [contents, setContents] = useState([\r\n\t\t{ id: 4, msg: \"Password can't be empty!!!\" },\r\n\t\t{ id: 5, msg: \"New password can't be empty!!!\" },\r\n\t]);\r\n\r\n\tconst handleCurrentPasswordChange = (currentPassword) => {\r\n\t\tsetCurrentPassword(currentPassword);\r\n\t\tif (isBlankString(currentPassword)) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 4), { id: 4, msg: \"Password can't be empty!!!\" }]);\r\n\t\t\tsetValidCurentPassword(false);\r\n\t\t} else if (currentPassword.length < 6) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 4), { id: 4, msg: \"Password must have at least 6 characters!!!\" }]);\r\n\t\t\tsetValidCurentPassword(false);\r\n\t\t} else {\r\n\t\t\tsetContents(contents.filter(content => content.id !== 4));\r\n\t\t\tsetValidCurentPassword(true);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleNewPasswordChange = (newPassword) => {\r\n\t\tsetNewPassword(newPassword);\r\n\t\tif (isBlankString(newPassword)) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 5), { id: 5, msg: \"New password can't be empty!!!\" }]);\r\n\t\t\tsetValidNewPassword(false);\r\n\t\t} else if (newPassword.length < 6) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 5), { id: 5, msg: \"New password must have at least 6 characters!!!\" }]);\r\n\t\t\tsetValidNewPassword(false);\r\n\t\t} else {\r\n\t\t\tsetContents(contents.filter(content => content.id !== 5));\r\n\t\t\tsetValidNewPassword(true);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleClickOpen = () => {\r\n\t\tsetOpen(true);\r\n\t\tsetContents([\r\n\t\t\t{ id: 4, msg: \"Password can't be empty!!!\" },\r\n\t\t\t{ id: 5, msg: \"New password can't be empty!!!\" },\r\n\t\t]);\r\n\t}\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t\tsetCurrentPassword(\"\");\r\n\t\tsetNewPassword(\"\");\r\n\t\tsetShowSnackBar(false);\r\n\t}\r\n\r\n\tconst handleChangePassword = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif (!validCurentPassword || !validNewPassword) {\r\n\t\t\t// if (!validCurentPassword) {\r\n\t\t\t// \tif (!contents.includes({ id: 4, msg: \"Password can't be empty!!!\" })) {\r\n\t\t\t// \t\tsetContents(contents => [...contents, { id: 4, msg: \"Password can't be empty!!!\" }]);\r\n\t\t\t// \t}\r\n\t\t\t// \telse setContents(contents.filter(content => content.id !== 4));\r\n\t\t\t// }\r\n\t\t\t// if (!validNewPassword) {\r\n\t\t\t// \tif (!contents.includes({ id: 5, msg: \"New password can't be empty!!!\" })) {\r\n\t\t\t// \t\tsetContents(contents => [...contents, { id: 5, msg: \"New password can't be empty!!!\" }]);\r\n\t\t\t// \t}\r\n\t\t\t// \telse setContents(contents.filter(content => content.id !== 5));\r\n\t\t\t// }\r\n\t\t\tsetShowSnackBar(true);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst data = {\r\n\t\t\t\tCurrentPassword: currentPassword,\r\n\t\t\t\tNewPassword: newPassword\r\n\t\t\t}\r\n\t\t\tconst res = await fetch(`${API_URL}/users/profile/updatepassword/${userID}`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(data),\r\n\t\t\t});\r\n\r\n\t\t\t// const result = await res.json();\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetShowSnackBar(true);\r\n\t\t\t} else {\r\n\t\t\t\tsetShowSnackBar(true);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n\r\n\t\t\t<Button fullWidth variant=\"outlined\" color=\"secondary\" onClick={handleClickOpen} startIcon={<SaveIcon />}>\r\n\t\t\t\tChange password\r\n      </Button>\r\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n\t\t\t\t<form >\r\n\t\t\t\t\t<DialogTitle id=\"form-dialog-title\">Change password</DialogTitle>\r\n\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t\t\t<Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> Current password:</b> </Typography>\r\n\t\t\t\t\t\t\t{validCurentPassword ?\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<TextField variant=\"outlined\" autoFocus margin=\"normal\" type=\"password\" fullWidth\r\n\t\t\t\t\t\t\tonChange={(event) => { handleCurrentPasswordChange(event.target.value); }}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t\t\t<Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> New password:</b> </Typography>\r\n\t\t\t\t\t\t\t{validNewPassword ?\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<TextField variant=\"outlined\" margin=\"normal\" type=\"password\" fullWidth\r\n\t\t\t\t\t\t\tonChange={(event) => { handleNewPasswordChange(event.target.value); }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Typography>Password must have at least 6 characters</Typography>\r\n\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button onClick={handleChangePassword} color=\"secondary\">\r\n\t\t\t\t\t\t\tUpdate\r\n            </Button>\r\n\t\t\t\t\t\t<Button onClick={handleClose} color=\"primary\">\r\n\t\t\t\t\t\t\tCancel\r\n           </Button>\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</form>\r\n\t\t\t</Dialog>\r\n\t\t</div>\r\n\t);\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gameitem.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Secondary.js",["187"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport Input from '@material-ui/core/Input';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: 5,\r\n    top: 30,\r\n    border: `1px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n    background: ' green',\r\n  },\r\n}))(Badge);\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: drawerWidth,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginRight: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: 0,\r\n  },\r\n}));\r\n\r\nexport default function OnlineUsers({ socket, gameID, onlineUserList, observers, }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [onlineUserListCopy, setOnlineUserListCopy] = useState([]);\r\n  const userID = localStorage.getItem(\"userID\");\r\n\r\n  const handleDrawerOpen = () => {\r\n    setSearchString(\"\");\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n\r\n  }\r\n\r\n  const handleUserInvitaion = (id) => {\r\n    const hostName = localStorage.getItem('name');\r\n    socket.emit(`invite`, { hostName, gameID, userID: id });\r\n  }\r\n  useEffect(() => {\r\n    setOnlineUserListCopy(onlineUserList.slice());\r\n  }, [onlineUserList]);\r\n\r\n  useEffect(() => {\r\n    if (searchString !== \"\") {// có nội dung cần tìm\r\n      setOnlineUserListCopy(onlineUserListCopy.slice()\r\n        .filter(user => user.Name.toLowerCase().includes(searchString.toLowerCase())))\r\n    } else {\r\n      setOnlineUserListCopy(onlineUserList);\r\n    }\r\n  }, [searchString, onlineUserList]); // 2nd dependency help make sure new client connects will not make filtered list wrong\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton color=\"inherit\" aria-label=\"open drawer\" edge=\"end\"\r\n        onClick={handleDrawerOpen} className={clsx(open && classes.hide)}\r\n        style={{\r\n          position: 'absolute',\r\n          top: -10,\r\n          right: 25,\r\n          zIndex: 1,\r\n          alignContent: 'center',\r\n          fontSize: '4',\r\n          borderRadius: '50%',\r\n          height: '60px',\r\n          width: '60px',\r\n          color: '#FFF',\r\n          backgroundImage: 'linear-gradient(to right, #24C6DC 0%, #514A9D 100%)',\r\n          boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        }}\r\n      >\r\n        <GroupAddIcon />\r\n      </IconButton>\r\n      <Drawer className={classes.drawer} variant=\"temporary\" anchor=\"right\"\r\n        open={open} classes={{ paper: classes.drawerPaper }} onClose={handleDrawerClose}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Input placeholder=\"Username here\"\r\n            onChange={(event) => { setSearchString(event.target.value) }}\r\n          />\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {onlineUserListCopy.map((user) => (\r\n            <ListItem key={user.ID}>\r\n              <ListItemIcon >\r\n                <StyledBadge badgeContent={\"\"} >\r\n                  <FaceIcon fontSize=\"large\" />\r\n                </StyledBadge>\r\n              </ListItemIcon>\r\n              <ListItemText primary={user.Name} />\r\n              {user.ID !== userID ?\r\n                <Button variant=\"outlined\" style={{ fontSize: '12px', borderRadius: '5px', padding: '2px' }}\r\n                  onClick={() => handleUserInvitaion(user.ID)}>\r\n                  Invite\r\n                  </Button>\r\n                :\r\n                <></>\r\n              }\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Player\\player.js",["188"],"import React, { useState, useEffect } from 'react';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport defaultAvatar from '../../images/defaultAvatar.jpg';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Player({ player, xOrO }) {\r\n\r\n  const token = localStorage.getItem('jwtToken');\r\n  const [avatar, setAvatar] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function retrieveAvatar() {\r\n\r\n      const res = await fetch(`${API_URL}/users/avatar/${player.ID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          ContentType: 'image/jpeg',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        const result = await res.blob();\r\n        setAvatar(URL.createObjectURL(result));\r\n      }\r\n    }\r\n\r\n    if (player.ID) {\r\n      retrieveAvatar();\r\n    }\r\n  }, [player.ID]);\r\n  return (\r\n    <div style={{ border: `3px solid ${xOrO === \"X\" ? \"blue\" : \"red\"}` }}>\r\n      <CardMedia image={avatar ? avatar : defaultAvatar}\r\n        style={{ height: '120px', width: '200px' }}\r\n      />\r\n      <Typography>Name: {player.Name}</Typography>\r\n      <Typography>Elo: {player.Elo}</Typography>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ResetPasswordDialog\\index.js",["189"],"import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { InformationSnackbar } from '../../SnackBar/snackbar';\r\nimport { isEmailPattern, isBlankString, containsBlank } from '../../../utils/helper';\r\nimport config from '../../../constants/config.json';\r\n\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nexport default function ResetPasswordDialog() {\r\n  const userID = localStorage.getItem('userID');\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [usernameInput, setUsernameInput] = useState(\"\");\r\n  const [emailInput, setEmailInput] = useState(\"\");\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSendEmail = async () => {\r\n\r\n    if (isBlankString(emailInput) || isBlankString(usernameInput)) {\r\n      setContent(\"Input can not be empty.\");\r\n      setShowSnackBar(true);\r\n      return;\r\n    }\r\n    if (containsBlank(usernameInput)) {\r\n      setContent(\"Username can not contain blank space.\");\r\n      setShowSnackBar(true);\r\n      return;\r\n    }\r\n    if (isEmailPattern(emailInput) === false) {\r\n      setContent(\"Email is not valid.\");\r\n      setShowSnackBar(true);\r\n      return;\r\n    }\r\n    const data = {\r\n      Username: usernameInput,\r\n      Email: emailInput\r\n    }\r\n    const res = await fetch(`${API_URL}/forgotpassword`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const result = await res.json();\r\n      setContent(result.msg);\r\n      setShowSnackBar(true);\r\n      setOpen(false);\r\n    } else {\r\n      const result = await res.json();\r\n      setContent(result.msg);\r\n      setShowSnackBar(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <InformationSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} content={content} />\r\n      <Link onClick={handleClickOpen} variant=\"body2\" style={{ cursor: 'pointer ' }}>\r\n        {\"Forgot password?\"}\r\n      </Link>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Reset password</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To reset to your password, please enter your username and <b>valid email</b> address here. Then you need to check this mail for further information.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Username\"\r\n            fullWidth\r\n            value={usernameInput}\r\n            onChange={(e) => setUsernameInput(e.target.value)}\r\n          />\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Email Address\"\r\n            type=\"email\"\r\n            fullWidth\r\n            value={emailInput}\r\n            onChange={(e) => setEmailInput(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleSendEmail} color=\"secondary\">\r\n            Send\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Ranking\\index.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Timer\\timer.js",["190","191"],"import React, { useState, useEffect } from 'react';\r\nimport config from '../../constants/config.json';\r\n\r\nconst API_URL = config.API_URL_TEST;\r\nlet myTimeout = null;\r\n\r\nfunction Timer({ counter, setCounter, start }) {\r\n  // const [seconds, setSeconds] = useState(counter);\r\n\r\n  // useEffect(() => {\r\n  //   // setSeconds(counter);\r\n  //   if (start === true) {\r\n  //     myInterval = setInterval(() => {\r\n\r\n  //       if (counter <= 0) {\r\n  //         clearInterval(myInterval);\r\n  //         setCounter(null);\r\n  //       }\r\n  //       else setCounter(counter - 1);\r\n  //     }, 1000);\r\n  //   }\r\n\r\n  // }, [start]);\r\n\r\n  useEffect(() => {\r\n    clearTimeout(myTimeout);\r\n    if (counter > 0) {\r\n      myTimeout = setTimeout(() => {\r\n        if (counter > 0) {\r\n          setCounter(counter - 1)\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      setCounter(0);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div style={{ fontSize: '24px', fontWeight: 'bold', margin: '10px' }}>\r\n      Time: {counter}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;",{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":72,"column":6,"nodeType":"198","endLine":72,"endColumn":8,"suggestions":"199"},{"ruleId":"196","severity":1,"message":"200","line":88,"column":6,"nodeType":"198","endLine":88,"endColumn":8,"suggestions":"201"},{"ruleId":"196","severity":1,"message":"202","line":105,"column":6,"nodeType":"198","endLine":105,"endColumn":8,"suggestions":"203"},{"ruleId":"196","severity":1,"message":"204","line":127,"column":6,"nodeType":"198","endLine":127,"endColumn":8,"suggestions":"205"},{"ruleId":"196","severity":1,"message":"206","line":145,"column":6,"nodeType":"198","endLine":145,"endColumn":17,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":247,"column":25,"nodeType":"210","endLine":251,"endColumn":30},{"ruleId":"211","severity":1,"message":"212","line":35,"column":10,"nodeType":"213","messageId":"214","endLine":35,"endColumn":16},{"ruleId":"211","severity":1,"message":"215","line":35,"column":18,"nodeType":"213","messageId":"214","endLine":35,"endColumn":27},{"ruleId":"196","severity":1,"message":"216","line":48,"column":6,"nodeType":"198","endLine":48,"endColumn":8,"suggestions":"217"},{"ruleId":"196","severity":1,"message":"218","line":94,"column":6,"nodeType":"198","endLine":94,"endColumn":67,"suggestions":"219"},{"ruleId":"208","severity":1,"message":"209","line":156,"column":15,"nodeType":"210","endLine":158,"endColumn":17},{"ruleId":"208","severity":1,"message":"209","line":164,"column":15,"nodeType":"210","endLine":166,"endColumn":17},{"ruleId":"196","severity":1,"message":"220","line":58,"column":6,"nodeType":"198","endLine":58,"endColumn":8,"suggestions":"221"},{"ruleId":"196","severity":1,"message":"222","line":29,"column":6,"nodeType":"198","endLine":29,"endColumn":14,"suggestions":"223"},{"ruleId":"211","severity":1,"message":"224","line":9,"column":8,"nodeType":"213","messageId":"214","endLine":9,"endColumn":11},{"ruleId":"211","severity":1,"message":"225","line":13,"column":26,"nodeType":"213","messageId":"214","endLine":13,"endColumn":45},{"ruleId":"211","severity":1,"message":"226","line":19,"column":10,"nodeType":"213","messageId":"214","endLine":19,"endColumn":19},{"ruleId":"196","severity":1,"message":"227","line":82,"column":6,"nodeType":"198","endLine":82,"endColumn":8,"suggestions":"228"},{"ruleId":"196","severity":1,"message":"229","line":46,"column":5,"nodeType":"198","endLine":46,"endColumn":9,"suggestions":"230"},{"ruleId":"211","severity":1,"message":"231","line":97,"column":18,"nodeType":"213","messageId":"214","endLine":97,"endColumn":35},{"ruleId":"211","severity":1,"message":"232","line":118,"column":18,"nodeType":"213","messageId":"214","endLine":118,"endColumn":32},{"ruleId":"196","severity":1,"message":"216","line":147,"column":6,"nodeType":"198","endLine":147,"endColumn":8,"suggestions":"233"},{"ruleId":"196","severity":1,"message":"234","line":155,"column":6,"nodeType":"198","endLine":155,"endColumn":8,"suggestions":"235"},{"ruleId":"196","severity":1,"message":"236","line":171,"column":6,"nodeType":"198","endLine":171,"endColumn":34,"suggestions":"237"},{"ruleId":"196","severity":1,"message":"222","line":179,"column":6,"nodeType":"198","endLine":179,"endColumn":14,"suggestions":"238"},{"ruleId":"196","severity":1,"message":"239","line":194,"column":6,"nodeType":"198","endLine":194,"endColumn":12,"suggestions":"240"},{"ruleId":"196","severity":1,"message":"222","line":217,"column":6,"nodeType":"198","endLine":217,"endColumn":22,"suggestions":"241"},{"ruleId":"196","severity":1,"message":"222","line":225,"column":6,"nodeType":"198","endLine":225,"endColumn":14,"suggestions":"242"},{"ruleId":"196","severity":1,"message":"222","line":277,"column":6,"nodeType":"198","endLine":277,"endColumn":22,"suggestions":"243"},{"ruleId":"196","severity":1,"message":"222","line":289,"column":6,"nodeType":"198","endLine":289,"endColumn":44,"suggestions":"244"},{"ruleId":"196","severity":1,"message":"222","line":297,"column":6,"nodeType":"198","endLine":297,"endColumn":22,"suggestions":"245"},{"ruleId":"196","severity":1,"message":"246","line":318,"column":6,"nodeType":"198","endLine":318,"endColumn":14,"suggestions":"247"},{"ruleId":"196","severity":1,"message":"222","line":348,"column":6,"nodeType":"198","endLine":348,"endColumn":22,"suggestions":"248"},{"ruleId":"196","severity":1,"message":"249","line":382,"column":6,"nodeType":"198","endLine":382,"endColumn":8,"suggestions":"250"},{"ruleId":"196","severity":1,"message":"246","line":573,"column":6,"nodeType":"198","endLine":573,"endColumn":28,"suggestions":"251"},{"ruleId":"196","severity":1,"message":"246","line":582,"column":6,"nodeType":"198","endLine":582,"endColumn":28,"suggestions":"252"},{"ruleId":"196","severity":1,"message":"246","line":607,"column":6,"nodeType":"198","endLine":607,"endColumn":14,"suggestions":"253"},{"ruleId":"211","severity":1,"message":"254","line":16,"column":8,"nodeType":"213","messageId":"214","endLine":16,"endColumn":18},{"ruleId":"211","severity":1,"message":"255","line":18,"column":8,"nodeType":"213","messageId":"214","endLine":18,"endColumn":19},{"ruleId":"211","severity":1,"message":"226","line":24,"column":10,"nodeType":"213","messageId":"214","endLine":24,"endColumn":19},{"ruleId":"211","severity":1,"message":"256","line":197,"column":9,"nodeType":"213","messageId":"214","endLine":197,"endColumn":23},{"ruleId":"211","severity":1,"message":"257","line":48,"column":16,"nodeType":"213","messageId":"214","endLine":48,"endColumn":24},{"ruleId":"196","severity":1,"message":"206","line":73,"column":5,"nodeType":"198","endLine":73,"endColumn":18,"suggestions":"258"},{"ruleId":"196","severity":1,"message":"259","line":112,"column":6,"nodeType":"198","endLine":112,"endColumn":36,"suggestions":"260"},{"ruleId":"211","severity":1,"message":"261","line":1,"column":27,"nodeType":"213","messageId":"214","endLine":1,"endColumn":36},{"ruleId":"262","severity":1,"message":"263","line":56,"column":70,"nodeType":"264","messageId":"265","endLine":56,"endColumn":72},{"ruleId":"262","severity":1,"message":"263","line":59,"column":70,"nodeType":"264","messageId":"265","endLine":59,"endColumn":72},{"ruleId":"262","severity":1,"message":"263","line":70,"column":70,"nodeType":"264","messageId":"265","endLine":70,"endColumn":72},{"ruleId":"262","severity":1,"message":"263","line":73,"column":70,"nodeType":"264","messageId":"265","endLine":73,"endColumn":72},{"ruleId":"196","severity":1,"message":"259","line":120,"column":6,"nodeType":"198","endLine":120,"endColumn":36,"suggestions":"266"},{"ruleId":"196","severity":1,"message":"267","line":33,"column":6,"nodeType":"198","endLine":33,"endColumn":17,"suggestions":"268"},{"ruleId":"211","severity":1,"message":"269","line":17,"column":9,"nodeType":"213","messageId":"214","endLine":17,"endColumn":15},{"ruleId":"211","severity":1,"message":"270","line":1,"column":17,"nodeType":"213","messageId":"214","endLine":1,"endColumn":25},{"ruleId":"211","severity":1,"message":"271","line":4,"column":7,"nodeType":"213","messageId":"214","endLine":4,"endColumn":14},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["274"],"React Hook useEffect has a missing dependency: 'jwtToken'. Either include it or remove the dependency array.",["275"],"React Hook useEffect has missing dependencies: 'history', 'socket', and 'userID'. Either include them or remove the dependency array.",["276"],"React Hook useEffect has missing dependencies: 'history', 'token', and 'userID'. Either include them or remove the dependency array.",["277"],"React Hook useEffect has missing dependencies: 'token' and 'userID'. Either include them or remove the dependency array.",["278"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'player' is assigned a value but never used.","Identifier","unusedVar","'setPlayer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'History'. Either include it or remove the dependency array.",["279"],"React Hook useEffect has missing dependencies: 'gameID' and 'token'. Either include them or remove the dependency array.",["280"],"React Hook useEffect has missing dependencies: 'history', 'setIsLoggedIn', 'socket', and 'userID'. Either include them or remove the dependency array. If 'setIsLoggedIn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["281"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["282"],"'Box' is defined but never used.","'InformationSnackbar' is defined but never used.","'Copyright' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'isLoggedIn', and 'reqID'. Either include them or remove the dependency array.",["283"],"React Hook useEffect has missing dependencies: 'history', 'isLoggedIn', 'setIsLoggedIn', and 'socket'. Either include them or remove the dependency array. If 'setIsLoggedIn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["284"],"'updatePlayersInfo' is defined but never used.","'updateGameInfo' is defined but never used.",["285"],"React Hook useEffect has missing dependencies: 'game', 'gameID', and 'getGame'. Either include them or remove the dependency array.",["286"],"React Hook useEffect has missing dependencies: 'gameID', 'player1.Elo', 'player2.Elo', and 'socket'. Either include them or remove the dependency array.",["287"],["288"],"React Hook useEffect has missing dependencies: 'getPlayer' and 'userID'. Either include them or remove the dependency array.",["289"],["290"],["291"],["292"],["293"],["294"],"React Hook useEffect has missing dependencies: 'socket' and 'userID'. Either include them or remove the dependency array.",["295"],["296"],"React Hook useEffect has missing dependencies: 'gameID', 'socket', and 'userID'. Either include them or remove the dependency array.",["297"],["298"],["299"],["300"],"'GoogleIcon' is defined but never used.","'GoogleLogin' is defined but never used.","'responseGoogle' is assigned a value but never used.","'setDense' is assigned a value but never used.",["301"],"React Hook useEffect has a missing dependency: 'onlineUserListCopy'. Either include it or remove the dependency array. You can also do a functional update 'setOnlineUserListCopy(o => ...)' if you only need 'onlineUserListCopy' in the 'setOnlineUserListCopy' call.",["302"],"'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["303"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["304"],"'userID' is assigned a value but never used.","'useState' is defined but never used.","'API_URL' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"315","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"332","fix":"338"},{"desc":"336","fix":"339"},{"desc":"340","fix":"341"},{"desc":"336","fix":"342"},{"desc":"336","fix":"343"},{"desc":"336","fix":"344"},{"desc":"336","fix":"345"},{"desc":"346","fix":"347"},{"desc":"346","fix":"348"},{"desc":"336","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"352","fix":"354"},{"desc":"355","fix":"356"},"Update the dependencies array to be: [history]",{"range":"357","text":"358"},"Update the dependencies array to be: [jwtToken]",{"range":"359","text":"360"},"Update the dependencies array to be: [history, socket, userID]",{"range":"361","text":"362"},"Update the dependencies array to be: [history, token, userID]",{"range":"363","text":"364"},"Update the dependencies array to be: [setAvatar, token, userID]",{"range":"365","text":"366"},"Update the dependencies array to be: [History]",{"range":"367","text":"368"},"Update the dependencies array to be: [setGame, setHistory, setChatHistory, setAvatar1, setAvatar2, token, gameID]",{"range":"369","text":"370"},"Update the dependencies array to be: [history, setIsLoggedIn, socket, userID]",{"range":"371","text":"372"},"Update the dependencies array to be: [socket, userID]",{"range":"373","text":"374"},"Update the dependencies array to be: [history, isLoggedIn, reqID]",{"range":"375","text":"376"},"Update the dependencies array to be: [ID, history, isLoggedIn, setIsLoggedIn, socket]",{"range":"377","text":"378"},{"range":"379","text":"368"},"Update the dependencies array to be: [game, gameID, getGame]",{"range":"380","text":"381"},"Update the dependencies array to be: [gameID, player1.Elo, player1Ready, player2.Elo, player2Ready, socket]",{"range":"382","text":"383"},"Update the dependencies array to be: [gameID, socket]",{"range":"384","text":"385"},"Update the dependencies array to be: [game, getPlayer, userID]",{"range":"386","text":"387"},"Update the dependencies array to be: [gameID, socket, userID]",{"range":"388","text":"389"},{"range":"390","text":"385"},{"range":"391","text":"389"},"Update the dependencies array to be: [gameID, userID, chatHistory, history, socket]",{"range":"392","text":"393"},{"range":"394","text":"389"},{"range":"395","text":"389"},{"range":"396","text":"389"},{"range":"397","text":"389"},"Update the dependencies array to be: [gameID, player2.Name, socket, userID]",{"range":"398","text":"399"},{"range":"400","text":"399"},{"range":"401","text":"389"},"Update the dependencies array to be: [setGameList, token, userID]",{"range":"402","text":"403"},"Update the dependencies array to be: [searchString, onlineUserList, onlineUserListCopy]",{"range":"404","text":"405"},{"range":"406","text":"405"},"Update the dependencies array to be: [player.ID, token]",{"range":"407","text":"408"},[2455,2457],"[history]",[2867,2869],"[jwtToken]",[3291,3293],"[history, socket, userID]",[4278,4280],"[history, token, userID]",[4734,4745],"[setAvatar, token, userID]",[1804,1806],"[History]",[3232,3293],"[setGame, setHistory, setChatHistory, setAvatar1, setAvatar2, token, gameID]",[1681,1683],"[history, setIsLoggedIn, socket, userID]",[1135,1143],"[socket, userID]",[2464,2466],"[history, isLoggedIn, reqID]",[1361,1365],"[ID, history, isLoggedIn, setIsLoggedIn, socket]",[5194,5196],[5371,5373],"[game, gameID, getGame]",[5848,5876],"[gameID, player1.Elo, player1Ready, player2.Elo, player2Ready, socket]",[6064,6072],"[gameID, socket]",[6517,6523],"[game, getPlayer, userID]",[7164,7180],"[gameID, socket, userID]",[7388,7396],[9270,9286],[9611,9649],"[gameID, userID, chatHistory, history, socket]",[9864,9880],[10473,10481],[11348,11364],[12438,12440],[17600,17622],"[gameID, player2.Name, socket, userID]",[17869,17891],[18566,18574],[2220,2233],"[setGameList, token, userID]",[2935,2965],"[searchString, onlineUserList, onlineUserListCopy]",[3628,3658],[938,949],"[player.ID, token]"]