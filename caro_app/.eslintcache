[{"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\index.js":"1","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\App.js":"2","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Profile\\profile.js":"3","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignUp\\signup.js":"4","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignIn\\signin.js":"5","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Footer\\footer.js":"6","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Navbar\\navbar.js":"7","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\games.js":"8","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\game.js":"9","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Home\\home.js":"10","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\utils\\helper.js":"11","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gamelist.js":"12","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\board.js":"13","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\gameServices.js":"14","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Player\\player.js":"15","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Secondary.js":"16","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Primary.js":"17","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Timer\\timer.js":"18","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ChangePasswordDialog\\index.js":"19","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ImageUploadDialog\\index.js":"20","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gameitem.js":"21","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\square.js":"22","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SnackBar\\snackbar.js":"23","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ActiveDestination\\index.js":"24","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Table\\index.js":"25","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\PlayedGamesDialog\\index.js":"26","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\PlayedGame\\playedGame.js":"27"},{"size":423,"mtime":1609087763675,"results":"28","hashOfConfig":"29"},{"size":2531,"mtime":1609429359379,"results":"30","hashOfConfig":"29"},{"size":13193,"mtime":1609437187514,"results":"31","hashOfConfig":"29"},{"size":5993,"mtime":1609090845960,"results":"32","hashOfConfig":"29"},{"size":5743,"mtime":1609437140700,"results":"33","hashOfConfig":"29"},{"size":1287,"mtime":1609079356169,"results":"34","hashOfConfig":"29"},{"size":4606,"mtime":1609431115045,"results":"35","hashOfConfig":"29"},{"size":7125,"mtime":1609428045894,"results":"36","hashOfConfig":"29"},{"size":23645,"mtime":1609259957367,"results":"37","hashOfConfig":"29"},{"size":4106,"mtime":1609341536997,"results":"38","hashOfConfig":"29"},{"size":801,"mtime":1608137785206,"results":"39","hashOfConfig":"29"},{"size":345,"mtime":1607910230213,"results":"40","hashOfConfig":"29"},{"size":889,"mtime":1607239422563,"results":"41","hashOfConfig":"29"},{"size":7448,"mtime":1607910230209,"results":"42","hashOfConfig":"29"},{"size":1309,"mtime":1609166607708,"results":"43","hashOfConfig":"29"},{"size":5487,"mtime":1608365662043,"results":"44","hashOfConfig":"29"},{"size":4710,"mtime":1608016089541,"results":"45","hashOfConfig":"29"},{"size":3735,"mtime":1609261644379,"results":"46","hashOfConfig":"29"},{"size":6651,"mtime":1609339047002,"results":"47","hashOfConfig":"29"},{"size":1958,"mtime":1609143225450,"results":"48","hashOfConfig":"29"},{"size":4016,"mtime":1608439351199,"results":"49","hashOfConfig":"29"},{"size":322,"mtime":1607184421669,"results":"50","hashOfConfig":"29"},{"size":1522,"mtime":1609090800239,"results":"51","hashOfConfig":"29"},{"size":1433,"mtime":1609428031440,"results":"52","hashOfConfig":"29"},{"size":2648,"mtime":1609431731159,"results":"53","hashOfConfig":"29"},{"size":4117,"mtime":1609431829807,"results":"54","hashOfConfig":"29"},{"size":8100,"mtime":1609439392389,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"yhvsdj",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\index.js",[],["117","118"],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\App.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Profile\\profile.js",["119","120"],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignUp\\signup.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignIn\\signin.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Footer\\footer.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Navbar\\navbar.js",["121"],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\games.js",["122","123","124"],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\game.js",["125","126","127","128","129","130","131","132","133","134","135"],"import React, { useState, useEffect } from 'react';\r\nimport { Prompt } from 'react-router';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SendMessageIcon from '@material-ui/icons/Send';\r\nimport Button from '@material-ui/core/Button';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Board from './board';\r\nimport Player from '../Player/player';\r\nimport Timer from '../Timer/timer';\r\nimport { calculateWinner, calculateElo } from './gameServices';\r\nimport OnlineUsers from '../OnlineUsers/onlineUsers_Secondary';\r\nimport { authen } from '../../utils/helper';\r\nimport config from '../../constants/config.json';\r\n\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Game({ socket, onlineUserList }) {\r\n  const pathTokensArray = window.location.toString().split('/');\r\n  const gameID = pathTokensArray[pathTokensArray.length - 1];\r\n  const name = localStorage.getItem('name');\r\n  const userID = localStorage.getItem('userID');\r\n  const jwtToken = window.localStorage.getItem('jwtToken');\r\n  const History = useHistory();\r\n\r\n  const [start, setStart] = useState(false);\r\n  const [hasWinner, setHasWinner] = useState(false);\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [chatItemMessage, setChatItemMessage] = useState(\"\");\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(0).fill(null),\r\n      position: -1\r\n    }\r\n  ]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [isAscending, setIsAscending] = useState(true);\r\n  const [game, setGame] = useState({});\r\n  const [player1, setPlayer1] = useState({});// when the game has had 2 mainplayer, the 'user' term in others system is observer (cant not play game)\r\n  const [player2, setPlayer2] = useState({\r\n    Name: \"Waiting for opponent\",\r\n    Elo: 0\r\n  });\r\n  const [observers, setObservers] = useState([]);\r\n  const [isMainPlayer, setIsMainPlayer] = useState(false);\r\n  const [isYourTurn, setIsYourTurn] = useState(true);\r\n  const [player, setPlayer] = useState(\"X\");// X || O\r\n  const [player1Ready, setPlayer1Ready] = useState(false);\r\n  const [player2Ready, setPlayer2Ready] = useState(false);\r\n\r\n  async function getPlayer(id) {\r\n    const res = await fetch(`${API_URL}/users/get/${id}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n\r\n    setPlayer1(result.player1);\r\n  }\r\n\r\n  async function getGame(gameID) {\r\n    const res = await fetch(`${API_URL}/games/get/${gameID}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n    setGame(result.game);\r\n  }\r\n\r\n  // update user info\r\n  async function updatePlayersInfo(data) {\r\n    const res = await fetch(`${API_URL}/users/update`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n    if (res.status === 200) {\r\n      console.log(result.msg);\r\n      setPlayer1(result.player1);\r\n      setPlayer2(result.player2);\r\n    }\r\n    else {\r\n      window.alert(result.msg);\r\n    }\r\n  }\r\n\r\n  async function updateGameInfo(data) {\r\n    const res = await fetch(`${API_URL}/games/update`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n    if (res.status === 200) {\r\n      // console.log(result.msg);\r\n      setGame(result.game);\r\n    }\r\n    else {\r\n      window.alert(result.msg);\r\n    }\r\n  }\r\n\r\n  // authen when component mount\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const status = await authen();\r\n      if (status === 401) {\r\n        History.push('/signin');\r\n      }\r\n    }\r\n    Authen();\r\n  }, []);\r\n\r\n  // set game status (can start?) depends on 'youreReady' and 'opponentReady'\r\n  useEffect(() => {\r\n    setStart(player1Ready && player2Ready);\r\n  }, [player1Ready, player2Ready]);\r\n\r\n  // get game info when component mount\r\n  useEffect(() => {\r\n    if (game) { // if (game === {})\r\n      console.log(\"Game setup\");\r\n      getGame(gameID);\r\n    }\r\n  }, []);\r\n\r\n  // get player info when component mount\r\n  useEffect(() => {\r\n    if (!game.Result) { // if (game.Result == null)\r\n      if (game.Player1ID === userID || game.Player2ID === userID) { // if (player === {})\r\n        if (game.Player1ID === userID) {\r\n          console.log(\"IM THE 1ST\");\r\n        }\r\n        if (game.Player2ID === userID) {\r\n          console.log(\"IM THE 2ND\");\r\n        }\r\n        getPlayer(userID);\r\n      }\r\n    }\r\n  }, [game]);\r\n\r\n  // load moves\r\n  useEffect(() => {\r\n    socket.on(`load_moves_${gameID}`, data => {\r\n      console.log(\"load_moves\");\r\n      setHistory(data.history);\r\n      setStepNumber(data.history.length - 1);\r\n      setXIsNext(data.player === \"X\");\r\n      //setIsYourTurn(data.isYourTurn);\r\n      if (data.opponentID === userID) {\r\n        setIsYourTurn(data.isYourTurn);\r\n      }\r\n      else {\r\n        if (data.player === \"X\") {\r\n          setIsYourTurn(data.isYourTurn);\r\n        }\r\n        else {\r\n          setIsYourTurn(!data.isYourTurn);\r\n        }\r\n      }\r\n    });\r\n  }, [gameID, userID]);\r\n\r\n  // load chat\r\n  useEffect(() => {\r\n    socket.on(`load_chat_${gameID}`, data => {\r\n      console.log(\"load_chat\");\r\n      setChatHistory(chatHistory => [...chatHistory, data.message]);\r\n    });\r\n  }, [gameID]);\r\n\r\n  //get notified when someone enter the room\r\n  useEffect(() => {\r\n    socket.on(`notify_join_game_${gameID}`, data => {\r\n      console.log(`notify_join_game_${gameID}`);\r\n      console.log(data);\r\n\r\n      setObservers(data.observers);\r\n\r\n      if (data.isMainPlayer) {\r\n        // player1 (who creates the game) moves first\r\n        setIsYourTurn(userID === data.player1.ID ? true : false);\r\n        setPlayer(userID === data.player1.ID ? \"X\" : \"O\");\r\n        setPlayer2(userID === data.player1.ID ? data.player2 : data.player1);\r\n        setIsMainPlayer(data.isMainPlayer);// default is false, now set to true\r\n        const message = {\r\n          ownerID: null,\r\n          message: data.player2.Name + \" has joined the game\"\r\n        }\r\n        setChatHistory(chatHistory => [...chatHistory, message]);\r\n      } else { // is not main players\r\n        console.log(\"IM A VIEWER\");\r\n        // if we dont use [0] then joiner is an array\r\n        const joiner = data.observers.filter(observer => observer.ID === data.userID)[0];\r\n\r\n        const message = {\r\n          ownerID: null,\r\n          message: joiner.Name + \" has joined the game\"\r\n        }\r\n        setChatHistory(chatHistory => [...chatHistory, message]);\r\n\r\n        if (userID !== data.player1.ID && userID !== data.player2.ID) {\r\n          // chặn 2 màn hình người choi8 chính cập nhật màn hình khi khán giả vào phòng\r\n          if (data.player1.ID === data.game.Player1ID && data.player2.ID === data.game.Player2ID) {\r\n            setPlayer1(data.player1);\r\n            setPlayer2(data.player2);\r\n          }\r\n          else {\r\n            setPlayer1(data.player2);\r\n            setPlayer2(data.player1);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }, [gameID, userID]);\r\n\r\n  // player 2 & observer get info from player1 (owner)\r\n  useEffect(() => {\r\n    socket.on(`I_need_game_info_${gameID}_${userID}`, (data) => {\r\n      socket.emit(`I_provide_game_info`, {\r\n        gameID,\r\n        userID: data.userID,\r\n        chatHistory: chatHistory,\r\n        moves: history\r\n      });\r\n    });\r\n  }, [gameID, userID, chatHistory, history]);\r\n\r\n  // for observer to get game info\r\n  useEffect(() => {\r\n    socket.on(`receive_your_data_${gameID}_${userID}`, data => {\r\n      setChatHistory(data.chatHistory);\r\n      setHistory(data.moves);\r\n    });\r\n  }, [gameID, userID]);\r\n\r\n  //player ready\r\n  useEffect(() => {\r\n    socket.on(`ready_${gameID}`, data => {\r\n      if (data.player2.ID === userID) {\r\n        console.log(\"player2 ready\");\r\n        setPlayer2Ready(data.player1.player1Ready);\r\n      }\r\n      else {\r\n        if (data.player1.ID === data.game.Player1ID) {\r\n          console.log(\"player1 ready\");\r\n          setPlayer1Ready(data.player1.player1Ready);\r\n        }\r\n        else {\r\n          console.log(\"player2 ready\");\r\n          setPlayer2Ready(data.player1.player1Ready);\r\n        }\r\n      }\r\n\r\n      // setPlayer2Ready(data.value);\r\n    });\r\n  }, [gameID]);\r\n\r\n  // opponent leave\r\n  // useEffect(() => {\r\n  //   socket.on(`opponent_leave_game_${gameID}`, data => {\r\n  //     console.log(\"opponent_leave_game\");\r\n  //     setUser(data.user);\r\n  //   });\r\n  // }, [gameID]);\r\n\r\n  // owner of the game leaves game\r\n  // useEffect(() => {\r\n  //   socket.on(`owner_leave_game_${gameID}`, data => {\r\n  //     console.log(\"owner_leave_game\");\r\n  //     console.log(data);\r\n  //     setPlayer(\"X\");\r\n  //     setOpponentReady(false);\r\n  //     setYoureReady(false);\r\n  //     setOpponent({\r\n  //       Name: \"Waiting for opponent\",\r\n  //       Elo: 0\r\n  //     });\r\n  //     setGame(data.game);\r\n  //   });\r\n  // }, [gameID]);\r\n\r\n  // time up\r\n  useEffect(() => {\r\n    socket.on(`timeup_${gameID}`, data => {\r\n      console.log(\"time up\");\r\n      // reset player2\r\n      setPlayer2(data.player2);\r\n      // reset player1\r\n      getPlayer(data.player1ID);\r\n\r\n      const gameData = {\r\n        game: data.game,\r\n        player2ID: userID === data.game.Player1ID ? data.player2.ID : userID,\r\n        result: data.winnerID === data.game.Player1ID ? 1 : 2,\r\n        status: 0,\r\n        moves: JSON.stringify(history),\r\n        chatHistory: JSON.stringify(chatHistory)\r\n      }\r\n      if (!data.game.Result) {\r\n        updateGameInfo(gameData);\r\n      }\r\n\r\n      setHasWinner(true);\r\n      setPlayer1Ready(false);\r\n      setPlayer2Ready(false);\r\n    });\r\n  }, [gameID, userID]);\r\n\r\n  const handleClick = (i) => {\r\n    if (!isMainPlayer)// chỉ là khán giả thì ko click được\r\n      return;\r\n\r\n    if (!start)\r\n      return;\r\n\r\n    const newHistory = history.slice(0, stepNumber + 1);\r\n    const current = newHistory[newHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (hasWinner || squares[i] || !isYourTurn) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(newHistory.concat([\r\n      {\r\n        squares: squares,\r\n        position: i\r\n      }\r\n    ]));\r\n    setStepNumber(newHistory.length);\r\n    setXIsNext(!xIsNext);\r\n    setIsYourTurn(!isYourTurn);\r\n\r\n    //ok\r\n    socket.emit(\"move\", {\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          position: i\r\n        }\r\n      ]),\r\n      player: xIsNext ? \"O\" : \"X\",\r\n      playerID: userID,\r\n      opponentID: player2.ID,\r\n      gameID,\r\n      game,\r\n      isYourTurn\r\n    });\r\n  }\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  };\r\n\r\n  const sortButtonClicked = () => {\r\n    setIsAscending(!isAscending);\r\n  };\r\n\r\n  const current = history.slice(stepNumber, stepNumber + 1)[0];\r\n  const winInfo = calculateWinner(current.squares, current.position, game.IsBlockedRule);\r\n  const winner = winInfo.winner; // X or O\r\n\r\n  // prevent from playing when there's a winner\r\n  useEffect(() => {\r\n    setHasWinner(winner !== null);\r\n  }, [winner]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (hasWinner) {\r\n      setPlayer2Ready(false);\r\n      setPlayer1Ready(false);\r\n    }\r\n\r\n    if (isMainPlayer && hasWinner) {\r\n      if (!game.Result) {\r\n        const elo = calculateElo(player1.Elo, player2.Elo);\r\n        const win = player === winner;\r\n        const msg = (win ? \"You win\\n+\" : \"You lose\\n-\") + elo + \" elo\";\r\n        const data = {\r\n          player1,\r\n          win: win,\r\n          elo: elo,\r\n          player2ID: player2.ID\r\n        }\r\n        updatePlayersInfo(data);\r\n\r\n        const gameData = {\r\n          game,\r\n          player2ID: userID === game.Player1ID ? player2.ID : userID,\r\n          result: (win && userID === game.Player1ID) || (!win && userID === game.Player2ID) ? 1 : 2,\r\n          status: 0,\r\n          moves: JSON.stringify(history),\r\n          chatHistory: JSON.stringify(chatHistory)\r\n        }\r\n        updateGameInfo(gameData);\r\n\r\n        alert(msg);\r\n      }\r\n\r\n      // emit to update players info for observers\r\n\r\n\r\n      // emit tới server để xóa game này khỏi game layout của những người chơi khác\r\n\r\n\r\n      // setStart(false);\r\n      // setHasWinner(false);\r\n    }\r\n  }, [winner, hasWinner, isMainPlayer, history, chatHistory, game]);\r\n\r\n  const moves = history.map((step, move) => {\r\n    const boardSize = config.boardSize;\r\n    const rowIndex = Math.floor(step.position / boardSize);\r\n    const colIndex = step.position % boardSize;\r\n    const desc = move ? 'Go to move #' + move +\r\n      ' (' + colIndex + ', ' + rowIndex + ')' : 'Go to game start';\r\n    const buttonClassName = (move === stepNumber) ? \"selected-move\" : \"\";\r\n    return (\r\n      <li key={move}>\r\n        <button className={buttonClassName} onClick={() => jumpTo(move)}>{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  if (!isAscending) {\r\n    moves.reverse();\r\n  }\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  }\r\n  else {\r\n    if (winInfo.isDraw) {\r\n      status = \"Draw!!!\";\r\n      window.alert(\"Draw!!!\");\r\n    }\r\n    else {\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n  }\r\n\r\n  const handleChat = (e) => {\r\n    e.preventDefault();\r\n\r\n    setChatHistory(chatHistory => chatHistory.slice().concat([\r\n      {\r\n        ownerID: userID,\r\n        message: name + ': ' + chatItemMessage\r\n      }\r\n    ]));\r\n\r\n    socket.emit(\"chat\", {\r\n      message: {\r\n        ownerID: userID,\r\n        message: name + ': ' + chatItemMessage\r\n      },\r\n      gameID\r\n    });\r\n    setChatItemMessage(\"\");\r\n  }\r\n\r\n  const handleReady = () => {\r\n    setPlayer1Ready(!player1Ready);\r\n    socket.emit(\"ready\", {\r\n      gameID,\r\n      userID,\r\n      game,\r\n      player1: { ID: player1.ID, player1Ready: !player1Ready },\r\n      player2: { ID: player2.ID, player2Ready: player2Ready }\r\n    });\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   window.addEventListener('beforeunload', alertUser);\r\n  //   window.addEventListener('unload', handleEndConcert);\r\n  //   return () => {\r\n  //     window.removeEventListener('beforeunload', alertUser);\r\n  //     window.removeEventListener('unload', handleEndConcert);\r\n  //     handleEndConcert(game, player2);\r\n  //   }\r\n  // }, [game, player2]);\r\n\r\n  // const alertUser = e => {\r\n  //   e.preventDefault();\r\n  //   // e.returnValue = 'HAHA';\r\n  //   window.alert('You are reload the page!!!');\r\n  // }\r\n\r\n  // const handleEndConcert = (game, player2) => {\r\n  //   if (start) {\r\n  //     const elo = calculateElo(user.Elo, player2.Elo);\r\n  //     const win = !isYourTurn;\r\n  //     const msg = (win ? \"You win\\n+\" : \"You lose\\n-\") + elo + \" elo\";\r\n  //     //socket.emit(\"leave_game\", { player1, player2, gameID, elo });\r\n  //     window.alert(msg);\r\n  //   }\r\n  //   else {\r\n  //     // leave game when the game is not starting yet\r\n  //     // reset owner of the game if the owner leaves\r\n  //     if (userID === game.Player1ID && player2.ID && !game.Result) {\r\n  //       console.log(\"emit owner leave game\");\r\n  //       console.log(game);\r\n  //       console.log(player2.ID);\r\n  //       socket.emit(\"owner_leave_game\", { game, userID, player2ID: player2.ID });\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  const handleURLChangeWhenPlayingGame = () => {\r\n\r\n    // if (('Are you sure you want to leave game')) {\r\n\r\n    // }\r\n  }\r\n\r\n  const opponent = player === \"X\" ? \"O\" : \"X\";\r\n  let element = (\r\n    <React.Fragment>\r\n      <Prompt\r\n        when={start}\r\n        message={() => handleURLChangeWhenPlayingGame()}\r\n      />\r\n      <div style={{ position: 'relative' }}>\r\n        <div style={{ position: 'absolute', zIndex: '1', width: '100%' }}>\r\n          <OnlineUsers onlineUserList={onlineUserList} />\r\n        </div>\r\n        <div className=\"game\" style={{ marginTop: '25px' }}>\r\n          <div className=\"player-info\">\r\n            <CardHeader title=\"Player Info\"></CardHeader>\r\n            <Player player={player2} xOrO={opponent} />\r\n            {/* game not started and game result is null*/}\r\n            {!start ?\r\n              (\r\n                hasWinner ?\r\n                  <></> :\r\n                  <Typography style={{ margin: \"10px\", color: \"darkgreen\" }}>\r\n                    {player2Ready ? 'Ready' : 'Not Ready'}\r\n                  </Typography>\r\n              ) :\r\n              <Timer\r\n                setHasWinner={setHasWinner}\r\n                value={game.TimeThinkingEachTurn}\r\n                isYourTurn={!isYourTurn}\r\n                game={game}\r\n                player2={player2}\r\n                player1={player1}\r\n                setPlayer1={setPlayer1}\r\n                setPlayer2={setPlayer2}\r\n                setGame={setGame}\r\n                isPlayer2={true}\r\n                elo={calculateElo(player2.Elo, player1.Elo)}\r\n                isMainPlayer={isMainPlayer}\r\n                history={history}\r\n                chatHistory={chatHistory}\r\n              />}\r\n            <br></br>\r\n\r\n            <Player player={player1} xOrO={player} />\r\n            {!start ?\r\n              <>\r\n                {/* game not started */}\r\n                {\r\n                  hasWinner ? <React.Fragment></React.Fragment> : (\r\n                    isMainPlayer && player1.ID ?\r\n                      // là người chơi chính thì hiện nút để ready or cancel\r\n                      (player2.ID ?\r\n                        <Button style={{ margin: \"10px\" }} variant=\"contained\" color=\"primary\"\r\n                          onClick={handleReady}\r\n                        >\r\n                          {player1Ready ? \"Cancel\" : \"Ready\"}\r\n                        </Button>\r\n                        :\r\n                        <React.Fragment></React.Fragment>\r\n                      )\r\n                      :\r\n                      <Typography style={{ margin: \"10px\", color: \"darkgreen\" }}>\r\n                        {player1Ready ? 'Ready' : 'Not Ready'}\r\n                      </Typography>\r\n                  )\r\n                }\r\n              </>\r\n              // waiting for opponent, hide the Ready Button\r\n              :\r\n              <Timer\r\n                setHasWinner={setHasWinner}\r\n                value={game.TimeThinkingEachTurn}\r\n                isYourTurn={isYourTurn}\r\n                game={game}\r\n                player2={player1}\r\n                player1={player2}\r\n                setPlayer1={setPlayer1}\r\n                setPlayer2={setPlayer2}\r\n                setGame={setGame}\r\n                isPlayer2={false}\r\n                elo={calculateElo(player2.Elo, player1.Elo)}\r\n                isMainPlayer={isMainPlayer}\r\n                history={history}\r\n                chatHistory={chatHistory}\r\n              />\r\n            }\r\n          </div>\r\n\r\n          <div className=\"game-board\">\r\n            <CardHeader style={{ padding: '5px' }} title={\"Game name: \" + game.Name}></CardHeader>\r\n            <CardHeader style={{ padding: '5px' }} title={\"Game ID: \" + game.ID}></CardHeader>\r\n            <Board\r\n              key={stepNumber}\r\n              squares={current.squares}\r\n              onClick={i => handleClick(i)}\r\n              winLine={winInfo.winLine}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n\r\n            <div className=\"chat-box\" >\r\n              <CardHeader title=\"Chat Box\"></CardHeader>\r\n              <Card style={{ boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)', width: '100%', minHeight: '200px', maxHeight: '200px', overflowY: 'scroll' }}>\r\n                {chatHistory.map((item, i) => {\r\n                  return (\r\n                    <div key={i} className=\"chat-item\"\r\n                      style={{\r\n                        color: item.ownerID === null ? 'gray' :\r\n                          (item.ownerID === userID ? 'orange' : 'green')\r\n                      }}\r\n                    >\r\n                      {item.message}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </Card>\r\n              <form className=\"form\" onSubmit={handleChat}>\r\n                <TextField id=\"message\" name=\"message\" label=\"Message\" variant=\"outlined\" size=\"small\"\r\n                  margin=\"normal\" required fullWidth autoFocus value={chatItemMessage}\r\n                  onChange={e => setChatItemMessage(e.target.value)}\r\n                />\r\n                <IconButton className=\"submit-button\" size=\"small\" type=\"submit\" color=\"primary\">\r\n                  <SendMessageIcon />\r\n                </IconButton>\r\n              </form>\r\n            </div>\r\n\r\n            <div className=\"paper-like-shadow\" style={{\r\n              marginTop: '20px',\r\n              marginLeft: '20px',\r\n              minWidth: '320px',\r\n            }}\r\n            >\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography><b>Gameplay Info</b></Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails style={{ display: 'flex', flexDirection: 'column' }}>\r\n                  {game.IsBlockedRule ? <Typography>Blocked Rule</Typography> : <React.Fragment></React.Fragment>}\r\n\r\n                  <div>{status}</div>\r\n                  <div>\r\n                    <button onClick={() => sortButtonClicked()}>\r\n                      {isAscending ? \"Descending\" : \"Ascending\"}\r\n                    </button>\r\n                  </div>\r\n                  <ol style={{ maxHeight: '200px', overflowY: 'scroll' }}>{moves}</ol>\r\n\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel2a-content\"\r\n                  id=\"panel2a-header\"\r\n                >\r\n                  <Typography><b>Observer List</b></Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails style={{ display: 'flex', flexDirection: 'column', textAlign: 'left' }}>\r\n                  {observers.map((observer, i) =>\r\n                    <div key={i}>\r\n                      <Typography>\r\n                        {observer.Name}\r\n                      </Typography>\r\n                      <Divider />\r\n                    </div>\r\n\r\n                  )}\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n  return (\r\n    element\r\n  );\r\n}\r\n\r\nexport default Game;","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Home\\home.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\utils\\helper.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gamelist.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\board.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\gameServices.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Player\\player.js",["136"],"import React, { useState, useEffect } from 'react';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport defaultAvatar from '../../images/defaultAvatar.jpg';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Player({ player, xOrO }) {\r\n\r\n  const token = localStorage.getItem('jwtToken');\r\n  const [avatar, setAvatar] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function retrieveAvatar() {\r\n\r\n      const res = await fetch(`${API_URL}/users/avatar/${player.ID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          ContentType: 'image/jpeg',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        const result = await res.blob();\r\n        setAvatar(URL.createObjectURL(result));\r\n      }\r\n    }\r\n\r\n    if (player.ID) {\r\n      retrieveAvatar();\r\n    }\r\n  }, [player.ID]);\r\n  return (\r\n    <div style={{ border: `3px solid ${xOrO === \"X\" ? \"blue\" : \"red\"}` }}>\r\n      <CardMedia image={avatar ? avatar : defaultAvatar}\r\n        style={{ height: '120px', width: '200px' }}\r\n      />\r\n      <Typography>Name: {player.Name}</Typography>\r\n      <Typography>Elo: {player.Elo}</Typography>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Secondary.js",["137"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport Input from '@material-ui/core/Input';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: 5,\r\n    top: 30,\r\n    border: `1px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n    background: ' green',\r\n  },\r\n}))(Badge);\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: drawerWidth,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginRight: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: 0,\r\n  },\r\n}));\r\n\r\nexport default function OnlineUsers({ onlineUserList }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [onlineUserListCopy, setOnlineUserListCopy] = useState([]);\r\n  const userID = localStorage.getItem(\"userID\");\r\n\r\n  const handleDrawerOpen = () => {\r\n    setSearchString(\"\");\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n\r\n  }\r\n  useEffect(() => {\r\n    setOnlineUserListCopy(onlineUserList.slice());\r\n  }, [onlineUserList]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (searchString !== \"\")// có nội dung cần tìm\r\n    {\r\n      console.log(\"v\");\r\n      setOnlineUserListCopy(onlineUserListCopy.slice()\r\n        .filter(user => user.Name.toLowerCase().includes(searchString.toLowerCase())))\r\n    } else {\r\n      setOnlineUserListCopy(onlineUserList);\r\n    }\r\n  }, [searchString, onlineUserList]); // 2nd dependency help make sure new client connects will not make filtered list wrong\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton color=\"inherit\" aria-label=\"open drawer\" edge=\"end\"\r\n        onClick={handleDrawerOpen} className={clsx(open && classes.hide)}\r\n        style={{\r\n          position: 'absolute',\r\n          top: -10,\r\n          right: 25,\r\n          zIndex: 1,\r\n          alignContent: 'center',\r\n          fontSize: '4',\r\n          borderRadius: '50%',\r\n          height: '60px',\r\n          width: '60px',\r\n          color: '#FFF',\r\n          backgroundImage: 'linear-gradient(to right, #24C6DC 0%, #514A9D 100%)',\r\n          boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        }}\r\n      >\r\n        <GroupAddIcon />\r\n      </IconButton>\r\n      <Drawer className={classes.drawer} variant=\"temporary\" anchor=\"right\"\r\n        open={open} classes={{ paper: classes.drawerPaper }} onClose={handleDrawerClose}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Input placeholder=\"Username here\"\r\n            onChange={(event) => { setSearchString(event.target.value) }}\r\n          />\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {onlineUserListCopy.map((item) => (\r\n            <ListItem key={item.ID}>\r\n              <ListItemIcon >\r\n                <StyledBadge badgeContent={\"\"} >\r\n                  <FaceIcon fontSize=\"large\" />\r\n                </StyledBadge>\r\n              </ListItemIcon>\r\n              <ListItemText primary={item.Name} />\r\n              {item.ID !== userID ?\r\n                <Button variant=\"outlined\" style={{ fontSize: '12px', borderRadius: '5px', padding: '2px' }}>Invite</Button>\r\n                :\r\n                <></>\r\n              }\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Primary.js",["138"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport List from '@material-ui/core/List';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Input from '@material-ui/core/Input';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: 5,\r\n    top: 30,\r\n    border: `1px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n    background: ' green',\r\n  },\r\n}))(Badge);\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  list: {\r\n    position: \"fixed\",\r\n    right: 30,\r\n    bottom: 0,\r\n    border: '2px solid grey',\r\n    borderBottomWidth: '0',\r\n    width: '300px',\r\n    borderRadius: '8px 8px 0 0',\r\n    maxHeight: '80%',\r\n    // overflowY: 'scroll',\r\n    overflow: 'auto',\r\n    background: '#f2f2f2'\r\n  },\r\n  card: {\r\n    position: \"fixed\",\r\n    right: 30,\r\n    bottom: 0,\r\n    border: `1px solid #3f51b5`,\r\n    borderRadius: '5px 5px 0 0',\r\n    width: '300px',\r\n    height: '50px',\r\n    background: '#3f51b5',\r\n    cursor: 'pointer',\r\n    display: 'inline-block',\r\n    color: 'white',\r\n    padding: '15px',\r\n    fontWeight: 'bold',\r\n  },\r\n\r\n  paperShadow: {\r\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n  },\r\n\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  floatLeft: {\r\n    float: 'left'\r\n  },\r\n  floatRight: {\r\n    float: 'right'\r\n  }\r\n\r\n}));\r\n\r\nexport default function OnlineUsers({ onlineUserList }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [onlineUserListCopy, setOnlineUserListCopy] = useState([]);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setSearchString(\"\");\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n\r\n  }\r\n  useEffect(() => {\r\n    setOnlineUserListCopy(onlineUserList.slice());\r\n  }, [onlineUserList]);\r\n\r\n  useEffect(() => {\r\n    if (searchString !== \"\")// có nội dung cần tìm\r\n    {\r\n      // console.log(\"v\");\r\n      setOnlineUserListCopy(onlineUserListCopy.slice()\r\n        .filter(user => user.Name.toLowerCase().includes(searchString.toLowerCase())))\r\n    }\r\n    else {\r\n      setOnlineUserListCopy(onlineUserList);\r\n    }\r\n  }, [searchString, onlineUserList]); // 2nd dependency help make sure new client connects will not make filtered list wrong\r\n\r\n\r\n  return (\r\n    <>\r\n      {open ?\r\n        <div className={`${classes.list} ${classes.paperShadow}`}>\r\n          <div className={classes.drawerHeader}>\r\n            <Input\r\n              placeholder=\"Username here\"\r\n              onChange={(event) => { setSearchString(event.target.value) }}\r\n              fullWidth\r\n              style={{ position: 'sticky' }}\r\n            />\r\n            <IconButton onClick={handleDrawerClose}>\r\n              <MinimizeIcon />\r\n            </IconButton>\r\n          </div>\r\n          <List >\r\n            {onlineUserListCopy.length === 0 ?\r\n              <div >No user found</div>\r\n              :\r\n              onlineUserListCopy.map((item) => (\r\n                <ListItem key={item.ID}>\r\n                  <ListItemIcon >\r\n                    <StyledBadge badgeContent={\"\"} >\r\n                      <FaceIcon fontSize=\"large\" />\r\n                    </StyledBadge>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={item.Name} />\r\n                  {/* <Button variant=\"outlined\" style={{ fontSize: '12px', borderRadius: '5px', padding: '2px' }}>Invite</Button> */}\r\n                </ListItem>\r\n              ))}\r\n          </List>\r\n        </div>\r\n        :\r\n        <div className={`${classes.card} ${classes.paperShadow}`} onClick={() => handleDrawerOpen()}>\r\n          <div className={classes.floatLeft}>\r\n            Online Users\r\n          </div>\r\n          <div className={classes.floatRight} style={{ marginRight: '10px' }}>\r\n            <Badge badgeContent={onlineUserList.length} color=\"secondary\" />\r\n          </div>\r\n        </div>\r\n      }\r\n\r\n    </>\r\n\r\n  );\r\n}\r\n","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Timer\\timer.js",["139"],"import React, { useState, useEffect } from 'react';\r\nimport config from '../../constants/config.json';\r\n\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Timer({ setHasWinner, winner, game, value, isYourTurn, player1, player2, setPlayer1, setPlayer2, setGame, isPlayer2, elo, isMainPlayer, history, chatHistory }) {\r\n  const userID = localStorage.getItem(\"userID\");\r\n  const jwtToken = localStorage.getItem(\"jwtToken\");\r\n  const [seconds, setSeconds] = useState(value);\r\n\r\n  async function updatePlayersInfo(data) {\r\n    const res = await fetch(`${API_URL}/users/update`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n    if (res.status === 200) {\r\n      console.log(result.msg);\r\n      setPlayer1(result.player1);\r\n      setPlayer2(result.player2);\r\n    }\r\n    else {\r\n      window.alert(result.msg);\r\n    }\r\n  }\r\n\r\n  async function updateGameInfo(data) {\r\n    const res = await fetch(`${API_URL}/games/update`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n    if (res.status === 200) {\r\n      // console.log(result.msg);\r\n      setGame(result.game);\r\n    }\r\n    else {\r\n      window.alert(result.msg);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let myInterval = setInterval(() => {\r\n      // count down if it's your turn\r\n      if (seconds > 0) {\r\n        if (isYourTurn) {\r\n          setSeconds(seconds - 1);\r\n        }\r\n      }\r\n      // reset timer when it's your opponent's turn (you finished your turn)\r\n      if (!isYourTurn) {\r\n        setSeconds(value);\r\n      }\r\n\r\n      // check when player runs out of time (you lose)\r\n      // isPlayer2 means the opponent's timer counts down\r\n      if (seconds === 0) {\r\n        console.log(\"Game over\");\r\n        setHasWinner(true);\r\n\r\n        if (isMainPlayer) {\r\n          clearInterval(myInterval);\r\n          const msg = \"You \" + (isPlayer2 ? \"win\\n+\" : \"lose\\n-\") + elo + \" elo\";\r\n          window.alert(msg);\r\n\r\n          // cập nhatt65 elo cũa t/m\r\n          const data = {\r\n            player1: isPlayer2 ? player1 : player2,\r\n            win: isPlayer2,\r\n            elo,\r\n            player2ID: !isPlayer2 ? player1.ID : player2.ID,\r\n\r\n          }\r\n          console.log(data);\r\n          updatePlayersInfo(data);\r\n          setPlayer2({ ...player2, Elo: data.elo });\r\n\r\n          if (userID === game.Player1ID) {\r\n            const gameData = {\r\n              game,\r\n              player2ID: !isPlayer2 ? player1.ID : player2.ID,//userID === game.Player1ID ? player2.ID : userID,\r\n              result: winner === 'X' ? 1 : 2,\r\n              status: 0,\r\n              moves: JSON.stringify(history),\r\n              chatHistory: JSON.stringify(chatHistory)\r\n            }\r\n            console.log(gameData);\r\n            updateGameInfo(gameData);\r\n          }\r\n          // cập nhat65 result game\r\n          // socket.emit(\"run_out_of_time\",\r\n          //   {\r\n          //     game,\r\n          //     player: isPlayer2 ? player1 : player2,\r\n          //     win: isPlayer2,\r\n          //     elo,\r\n          //     player2ID: !isPlayer2 ? player1.ID : player2.ID\r\n          //   }\r\n          // );\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(myInterval);\r\n    };\r\n  }, [seconds, isYourTurn, isMainPlayer]);\r\n\r\n\r\n  return (\r\n    <div style={{ margin: '10px' }}>\r\n      Time: {seconds}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ChangePasswordDialog\\index.js",["140","141","142","143","144"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport SimpleSnackbar from '../../SnackBar/snackbar';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { isBlankString } from '../../../utils/helper'; //'../../../utils/index'\r\nimport config from '../../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n\tcontainer: {\r\n\t\tdisplay: 'inline-block',\r\n\t\twidth: '100%'\r\n\t},\r\n\tfloatRight: {\r\n\t\tfloat: \"right\",\r\n\t\twidth: '60%'\r\n\t},\r\n\tfloatLeft: {\r\n\t\tfloat: \"left\",\r\n\t\twidth: '40%'\r\n\t},\r\n\tpaperLikeShadow: {\r\n\t\tboxShadow: '0 4px 8px 5px rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n\t},\r\n\thidden: {\r\n\t\tdisplay: 'none'\r\n\t}\r\n}));\r\n\r\nexport default function FormDialog(/*{ setShowSnackBar, contents, setContents }*/) {\r\n\tconst classes = useStyles();\r\n\tconst userID = localStorage.getItem('userID');\r\n\tconst token = window.localStorage.getItem('jwtToken');\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [currentPassword, setCurrentPassword] = useState(\"\");\r\n\tconst [newPassword, setNewPassword] = useState(\"\");\r\n\tconst [validCurentPassword, setValidCurentPassword] = useState(false);\r\n\tconst [validNewPassword, setValidNewPassword] = useState(false);\r\n\tconst [showSnackbar, setShowSnackBar] = useState(false);\r\n\tconst [contents, setContents] = useState([\r\n\t\t{ id: 4, msg: \"Password can't be empty!!!\" },\r\n\t\t{ id: 5, msg: \"New password can't be empty!!!\" },\r\n\t]);\r\n\r\n\tconst handleCurrentPasswordChange = (currentPassword) => {\r\n\t\tsetCurrentPassword(currentPassword);\r\n\t\tif (isBlankString(currentPassword)) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 4), { id: 4, msg: \"Password can't be empty!!!\" }]);\r\n\t\t\tsetValidCurentPassword(false);\r\n\t\t} else if (currentPassword.length < 6) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 4), { id: 4, msg: \"Password must have at least 6 characters!!!\" }]);\r\n\t\t\tsetValidCurentPassword(false);\r\n\t\t} else {\r\n\t\t\tsetContents(contents.filter(content => content.id !== 4));\r\n\t\t\tsetValidCurentPassword(true);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleNewPasswordChange = (newPassword) => {\r\n\t\tsetNewPassword(newPassword);\r\n\t\tif (isBlankString(newPassword)) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 5), { id: 5, msg: \"New password can't be empty!!!\" }]);\r\n\t\t\tsetValidNewPassword(false);\r\n\t\t} else if (newPassword.length < 6) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 5), { id: 5, msg: \"New password must have at least 6 characters!!!\" }]);\r\n\t\t\tsetValidNewPassword(false);\r\n\t\t} else {\r\n\t\t\tsetContents(contents.filter(content => content.id !== 5));\r\n\t\t\tsetValidNewPassword(true);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleClickOpen = () => {\r\n\t\tsetOpen(true);\r\n\t\tsetContents([\r\n\t\t\t{ id: 4, msg: \"Password can't be empty!!!\" },\r\n\t\t\t{ id: 5, msg: \"New password can't be empty!!!\" },\r\n\t\t]);\r\n\t}\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t\tsetCurrentPassword(\"\");\r\n\t\tsetNewPassword(\"\");\r\n\t\tsetShowSnackBar(false);\r\n\t}\r\n\r\n\tconst handleChangePassword = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif (!validCurentPassword || !validNewPassword) {\r\n\t\t\t// if (!validCurentPassword) {\r\n\t\t\t// \tif (!contents.includes({ id: 4, msg: \"Password can't be empty!!!\" })) {\r\n\t\t\t// \t\tsetContents(contents => [...contents, { id: 4, msg: \"Password can't be empty!!!\" }]);\r\n\t\t\t// \t}\r\n\t\t\t// \telse setContents(contents.filter(content => content.id !== 4));\r\n\t\t\t// }\r\n\t\t\t// if (!validNewPassword) {\r\n\t\t\t// \tif (!contents.includes({ id: 5, msg: \"New password can't be empty!!!\" })) {\r\n\t\t\t// \t\tsetContents(contents => [...contents, { id: 5, msg: \"New password can't be empty!!!\" }]);\r\n\t\t\t// \t}\r\n\t\t\t// \telse setContents(contents.filter(content => content.id !== 5));\r\n\t\t\t// }\r\n\t\t\tsetShowSnackBar(true);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst data = {\r\n\t\t\t\tCurrentPassword: currentPassword,\r\n\t\t\t\tNewPassword: newPassword\r\n\t\t\t}\r\n\t\t\tconst res = await fetch(`${API_URL}/users/profile/updatepassword/${userID}`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(data),\r\n\t\t\t});\r\n\r\n\t\t\t// const result = await res.json();\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetShowSnackBar(true);\r\n\t\t\t} else {\r\n\t\t\t\tsetShowSnackBar(true);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n\r\n\t\t\t<Button fullWidth variant=\"outlined\" color=\"secondary\" onClick={handleClickOpen} startIcon={<SaveIcon />}>\r\n\t\t\t\tChange password\r\n      </Button>\r\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n\t\t\t\t<form >\r\n\t\t\t\t\t<DialogTitle id=\"form-dialog-title\">Change password</DialogTitle>\r\n\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t\t\t<Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> Current password:</b> </Typography>\r\n\t\t\t\t\t\t\t{validCurentPassword ?\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<TextField variant=\"outlined\" autoFocus margin=\"normal\" type=\"password\" fullWidth\r\n\t\t\t\t\t\t\tonChange={(event) => { handleCurrentPasswordChange(event.target.value); }}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t\t\t<Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> New password:</b> </Typography>\r\n\t\t\t\t\t\t\t{validNewPassword ?\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<TextField variant=\"outlined\" margin=\"normal\" type=\"password\" fullWidth\r\n\t\t\t\t\t\t\tonChange={(event) => { handleNewPasswordChange(event.target.value); }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Typography>Password must have at least 6 characters</Typography>\r\n\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button onClick={handleChangePassword} color=\"secondary\">\r\n\t\t\t\t\t\t\tUpdate\r\n            </Button>\r\n\t\t\t\t\t\t<Button onClick={handleClose} color=\"primary\">\r\n\t\t\t\t\t\t\tCancel\r\n           </Button>\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</form>\r\n\t\t\t</Dialog>\r\n\t\t</div>\r\n\t);\r\n}\r\n","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ImageUploadDialog\\index.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gameitem.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\square.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SnackBar\\snackbar.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ActiveDestination\\index.js",["145"],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Table\\index.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\PlayedGamesDialog\\index.js",["146","147","148","149","150","151"],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\PlayedGame\\playedGame.js",["152","153","154","155","156","157"],{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":126,"column":6,"nodeType":"164","endLine":126,"endColumn":8,"suggestions":"165"},{"ruleId":"162","severity":1,"message":"166","line":144,"column":6,"nodeType":"164","endLine":144,"endColumn":17,"suggestions":"167"},{"ruleId":"162","severity":1,"message":"168","line":58,"column":6,"nodeType":"164","endLine":58,"endColumn":8,"suggestions":"169"},{"ruleId":"162","severity":1,"message":"163","line":72,"column":6,"nodeType":"164","endLine":72,"endColumn":8,"suggestions":"170"},{"ruleId":"162","severity":1,"message":"171","line":88,"column":6,"nodeType":"164","endLine":88,"endColumn":8,"suggestions":"172"},{"ruleId":"162","severity":1,"message":"173","line":107,"column":6,"nodeType":"164","endLine":107,"endColumn":8,"suggestions":"174"},{"ruleId":"162","severity":1,"message":"175","line":138,"column":6,"nodeType":"164","endLine":138,"endColumn":8,"suggestions":"176"},{"ruleId":"162","severity":1,"message":"177","line":151,"column":6,"nodeType":"164","endLine":151,"endColumn":8,"suggestions":"178"},{"ruleId":"162","severity":1,"message":"179","line":166,"column":6,"nodeType":"164","endLine":166,"endColumn":12,"suggestions":"180"},{"ruleId":"162","severity":1,"message":"181","line":188,"column":6,"nodeType":"164","endLine":188,"endColumn":22,"suggestions":"182"},{"ruleId":"162","severity":1,"message":"181","line":196,"column":6,"nodeType":"164","endLine":196,"endColumn":14,"suggestions":"183"},{"ruleId":"162","severity":1,"message":"181","line":241,"column":6,"nodeType":"164","endLine":241,"endColumn":22,"suggestions":"184"},{"ruleId":"162","severity":1,"message":"181","line":253,"column":6,"nodeType":"164","endLine":253,"endColumn":44,"suggestions":"185"},{"ruleId":"162","severity":1,"message":"181","line":261,"column":6,"nodeType":"164","endLine":261,"endColumn":22,"suggestions":"186"},{"ruleId":"162","severity":1,"message":"187","line":283,"column":6,"nodeType":"164","endLine":283,"endColumn":14,"suggestions":"188"},{"ruleId":"162","severity":1,"message":"189","line":334,"column":6,"nodeType":"164","endLine":334,"endColumn":22,"suggestions":"190"},{"ruleId":"162","severity":1,"message":"191","line":439,"column":6,"nodeType":"164","endLine":439,"endColumn":67,"suggestions":"192"},{"ruleId":"162","severity":1,"message":"193","line":33,"column":6,"nodeType":"164","endLine":33,"endColumn":17,"suggestions":"194"},{"ruleId":"162","severity":1,"message":"195","line":118,"column":6,"nodeType":"164","endLine":118,"endColumn":36,"suggestions":"196"},{"ruleId":"162","severity":1,"message":"195","line":112,"column":6,"nodeType":"164","endLine":112,"endColumn":36,"suggestions":"197"},{"ruleId":"162","severity":1,"message":"198","line":116,"column":6,"nodeType":"164","endLine":116,"endColumn":41,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":1,"column":27,"nodeType":"202","messageId":"203","endLine":1,"endColumn":36},{"ruleId":"204","severity":1,"message":"205","line":56,"column":70,"nodeType":"206","messageId":"207","endLine":56,"endColumn":72},{"ruleId":"204","severity":1,"message":"205","line":59,"column":70,"nodeType":"206","messageId":"207","endLine":59,"endColumn":72},{"ruleId":"204","severity":1,"message":"205","line":70,"column":70,"nodeType":"206","messageId":"207","endLine":70,"endColumn":72},{"ruleId":"204","severity":1,"message":"205","line":73,"column":70,"nodeType":"206","messageId":"207","endLine":73,"endColumn":72},{"ruleId":"162","severity":1,"message":"208","line":46,"column":5,"nodeType":"164","endLine":46,"endColumn":9,"suggestions":"209"},{"ruleId":"200","severity":1,"message":"210","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":18},{"ruleId":"200","severity":1,"message":"211","line":7,"column":8,"nodeType":"202","messageId":"203","endLine":7,"endColumn":21},{"ruleId":"200","severity":1,"message":"212","line":14,"column":8,"nodeType":"202","messageId":"203","endLine":14,"endColumn":20},{"ruleId":"200","severity":1,"message":"213","line":50,"column":8,"nodeType":"202","messageId":"203","endLine":50,"endColumn":15},{"ruleId":"200","severity":1,"message":"214","line":52,"column":16,"nodeType":"202","messageId":"203","endLine":52,"endColumn":24},{"ruleId":"162","severity":1,"message":"166","line":77,"column":5,"nodeType":"164","endLine":77,"endColumn":18,"suggestions":"215"},{"ruleId":"200","severity":1,"message":"216","line":35,"column":18,"nodeType":"202","messageId":"203","endLine":35,"endColumn":27},{"ruleId":"162","severity":1,"message":"175","line":48,"column":6,"nodeType":"164","endLine":48,"endColumn":8,"suggestions":"217"},{"ruleId":"162","severity":1,"message":"218","line":89,"column":6,"nodeType":"164","endLine":89,"endColumn":67,"suggestions":"219"},{"ruleId":"200","severity":1,"message":"220","line":120,"column":9,"nodeType":"202","messageId":"203","endLine":120,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":146,"column":15,"nodeType":"223","endLine":148,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":154,"column":15,"nodeType":"223","endLine":156,"endColumn":17},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["226"],"React Hook useEffect has missing dependencies: 'token' and 'userID'. Either include them or remove the dependency array.",["227"],"React Hook useEffect has missing dependencies: 'history', 'setIsLoggedIn', 'socket', and 'userID'. Either include them or remove the dependency array. If 'setIsLoggedIn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["228"],["229"],"React Hook useEffect has a missing dependency: 'jwtToken'. Either include it or remove the dependency array.",["230"],"React Hook useEffect has missing dependencies: 'history', 'socket', and 'userID'. Either include them or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'History'. Either include it or remove the dependency array.",["232"],"React Hook useEffect has missing dependencies: 'game', 'gameID', and 'getGame'. Either include them or remove the dependency array.",["233"],"React Hook useEffect has missing dependencies: 'getPlayer' and 'userID'. Either include them or remove the dependency array.",["234"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["235"],["236"],["237"],["238"],["239"],"React Hook useEffect has missing dependencies: 'socket' and 'userID'. Either include them or remove the dependency array.",["240"],"React Hook useEffect has missing dependencies: 'chatHistory', 'getPlayer', 'history', 'socket', and 'updateGameInfo'. Either include them or remove the dependency array.",["241"],"React Hook useEffect has missing dependencies: 'player', 'player1', 'player2.Elo', 'player2.ID', 'updateGameInfo', 'updatePlayersInfo', and 'userID'. Either include them or remove the dependency array.",["242"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'onlineUserListCopy'. Either include it or remove the dependency array. You can also do a functional update 'setOnlineUserListCopy(o => ...)' if you only need 'onlineUserListCopy' in the 'setOnlineUserListCopy' call.",["244"],["245"],"React Hook useEffect has missing dependencies: 'chatHistory', 'elo', 'game', 'history', 'isPlayer2', 'player1', 'player2', 'setHasWinner', 'setPlayer2', 'updateGameInfo', 'updatePlayersInfo', 'userID', 'value', and 'winner'. Either include them or remove the dependency array. If 'setHasWinner' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["246"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'history', 'isLoggedIn', 'setIsLoggedIn', and 'socket'. Either include them or remove the dependency array. If 'setIsLoggedIn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["247"],"'Typography' is defined but never used.","'DialogActions' is defined but never used.","'ListItemIcon' is defined but never used.","'history' is assigned a value but never used.","'setDense' is assigned a value but never used.",["248"],"'setPlayer' is assigned a value but never used.",["249"],"React Hook useEffect has missing dependencies: 'gameID' and 'token'. Either include them or remove the dependency array.",["250"],"'opponent' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"251","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"268","fix":"272"},{"desc":"273","fix":"274"},{"desc":"268","fix":"275"},{"desc":"268","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"283","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"262","fix":"292"},{"desc":"293","fix":"294"},"Update the dependencies array to be: [history]",{"range":"295","text":"296"},"Update the dependencies array to be: [setAvatar, token, userID]",{"range":"297","text":"298"},"Update the dependencies array to be: [history, setIsLoggedIn, socket, userID]",{"range":"299","text":"300"},{"range":"301","text":"296"},"Update the dependencies array to be: [jwtToken]",{"range":"302","text":"303"},"Update the dependencies array to be: [history, socket, userID]",{"range":"304","text":"305"},"Update the dependencies array to be: [History]",{"range":"306","text":"307"},"Update the dependencies array to be: [game, gameID, getGame]",{"range":"308","text":"309"},"Update the dependencies array to be: [game, getPlayer, userID]",{"range":"310","text":"311"},"Update the dependencies array to be: [gameID, socket, userID]",{"range":"312","text":"313"},"Update the dependencies array to be: [gameID, socket]",{"range":"314","text":"315"},{"range":"316","text":"313"},"Update the dependencies array to be: [gameID, userID, chatHistory, history, socket]",{"range":"317","text":"318"},{"range":"319","text":"313"},{"range":"320","text":"313"},"Update the dependencies array to be: [chatHistory, gameID, getPlayer, history, socket, updateGameInfo, userID]",{"range":"321","text":"322"},"Update the dependencies array to be: [winner, hasWinner, isMainPlayer, history, chatHistory, game, player1, player2.Elo, player2.ID, player, updatePlayersInfo, userID, updateGameInfo]",{"range":"323","text":"324"},"Update the dependencies array to be: [player.ID, token]",{"range":"325","text":"326"},"Update the dependencies array to be: [searchString, onlineUserList, onlineUserListCopy]",{"range":"327","text":"328"},{"range":"329","text":"328"},"Update the dependencies array to be: [seconds, isYourTurn, isMainPlayer, value, setHasWinner, isPlayer2, elo, player1, player2, updatePlayersInfo, setPlayer2, userID, game, winner, history, chatHistory, updateGameInfo]",{"range":"330","text":"331"},"Update the dependencies array to be: [ID, history, isLoggedIn, setIsLoggedIn, socket]",{"range":"332","text":"333"},"Update the dependencies array to be: [setGameList, token, userID]",{"range":"334","text":"335"},{"range":"336","text":"307"},"Update the dependencies array to be: [setGame, setHistory, setChatHistory, setAvatar1, setAvatar2, token, gameID]",{"range":"337","text":"338"},[4150,4152],"[history]",[4606,4617],"[setAvatar, token, userID]",[1681,1683],"[history, setIsLoggedIn, socket, userID]",[2455,2457],[2867,2869],"[jwtToken]",[3342,3344],"[history, socket, userID]",[4684,4686],"[History]",[5045,5047],"[game, gameID, getGame]",[5492,5498],"[game, getPlayer, userID]",[6075,6091],"[gameID, socket, userID]",[6299,6307],"[gameID, socket]",[8031,8047],[8372,8410],"[gameID, userID, chatHistory, history, socket]",[8625,8641],[9236,9244],[10636,10652],"[chatHistory, gameID, getPlayer, history, socket, updateGameInfo, userID]",[13255,13316],"[winner, hasWinner, isMainPlayer, history, chatHistory, game, player1, player2.Elo, player2.ID, player, updatePlayersInfo, userID, updateGameInfo]",[938,949],"[player.ID, token]",[3470,3500],"[searchString, onlineUserList, onlineUserListCopy]",[2935,2965],[3570,3605],"[seconds, isYourTurn, isMainPlayer, value, setHasWinner, isPlayer2, elo, player1, player2, updatePlayersInfo, setPlayer2, userID, game, winner, history, chatHistory, updateGameInfo]",[1361,1365],"[ID, history, isLoggedIn, setIsLoggedIn, socket]",[2467,2480],"[setGameList, token, userID]",[1804,1806],[3084,3145],"[setGame, setHistory, setChatHistory, setAvatar1, setAvatar2, token, gameID]"]