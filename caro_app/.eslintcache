[{"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\index.js":"1","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\reportWebVitals.js":"2","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\App.js":"3","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Profile\\profile.js":"4","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignUp\\signup.js":"5","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignIn\\signin.js":"6","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Footer\\footer.js":"7","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Navbar\\navbar.js":"8","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\games.js":"9","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\game.js":"10","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Home\\home.js":"11","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\utils\\helper.js":"12","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gamelist.js":"13","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\board.js":"14","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\gameServices.js":"15","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Player\\player.js":"16","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Secondary.js":"17","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Primary.js":"18","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Timer\\timer.js":"19","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ChangePasswordDialog\\index.js":"20","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ImageUploadDialog\\index.js":"21","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gameitem.js":"22","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\square.js":"23","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SnackBar\\snackbar.js":"24","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ActiveDestination\\index.js":"25"},{"size":423,"mtime":1609087763675,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":2377,"mtime":1609082823692,"results":"29","hashOfConfig":"27"},{"size":12960,"mtime":1609055333760,"results":"30","hashOfConfig":"27"},{"size":5993,"mtime":1609090845960,"results":"31","hashOfConfig":"27"},{"size":5770,"mtime":1609090307780,"results":"32","hashOfConfig":"27"},{"size":1287,"mtime":1609079356169,"results":"33","hashOfConfig":"27"},{"size":3966,"mtime":1608445258509,"results":"34","hashOfConfig":"27"},{"size":7125,"mtime":1608439240954,"results":"35","hashOfConfig":"27"},{"size":22006,"mtime":1608440801494,"results":"36","hashOfConfig":"27"},{"size":3959,"mtime":1608565511647,"results":"37","hashOfConfig":"27"},{"size":801,"mtime":1608137785206,"results":"38","hashOfConfig":"27"},{"size":345,"mtime":1607910230213,"results":"39","hashOfConfig":"27"},{"size":889,"mtime":1607239422563,"results":"40","hashOfConfig":"27"},{"size":7448,"mtime":1607910230209,"results":"41","hashOfConfig":"27"},{"size":616,"mtime":1608121197678,"results":"42","hashOfConfig":"27"},{"size":5487,"mtime":1608365662043,"results":"43","hashOfConfig":"27"},{"size":4710,"mtime":1608016089541,"results":"44","hashOfConfig":"27"},{"size":1440,"mtime":1608440837690,"results":"45","hashOfConfig":"27"},{"size":6661,"mtime":1609055251793,"results":"46","hashOfConfig":"27"},{"size":2058,"mtime":1608654973537,"results":"47","hashOfConfig":"27"},{"size":4016,"mtime":1608439351199,"results":"48","hashOfConfig":"27"},{"size":322,"mtime":1607184421669,"results":"49","hashOfConfig":"27"},{"size":1522,"mtime":1609090800239,"results":"50","hashOfConfig":"27"},{"size":1416,"mtime":1609085668602,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"yhvsdj",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"54"},"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\index.js",[],["113","114"],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\reportWebVitals.js",[],["115","116"],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\App.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Profile\\profile.js",["117","118","119","120","121"],"import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ChangePasswordDialog from '../Dialogs/ChangePasswordDialog';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport ImageUploadDialog from '../Dialogs/ImageUploadDialog';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport SimpleSnackbar from '../SnackBar/snackbar';\r\nimport defaultAvatar from '../../images/defaultAvatar.jpg';\r\nimport config from '../../constants/config.json';\r\nimport { isBlankString, isEmailPattern } from '../../utils/helper';\r\n\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '25%',\r\n  },\r\n  cardHeader: {\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"black\"//theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '75%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  container: {\r\n    display: 'inline-block',\r\n    width: '100%'\r\n  },\r\n  floatRight: {\r\n    float: \"right\",\r\n    width: '60%'\r\n  },\r\n  floatLeft: {\r\n    float: \"left\",\r\n    width: '40%'\r\n  },\r\n  paperLikeShadow: {\r\n    boxShadow: '0 4px 8px 5px rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n  },\r\n  hidden: {\r\n    display: 'none'\r\n  }\r\n}));\r\n\r\nexport default function Profile() {\r\n  const classes = useStyles();\r\n  const userID = localStorage.getItem('userID');\r\n  const token = localStorage.getItem('jwtToken')\r\n  const [name, setName] = useState(\"\");\r\n  const [validName, setValidName] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [validEmail, setValidEmail] = useState(true);\r\n  const [dateOfBirth, setDateOfBirth] = useState((new Date()).toISOString());\r\n  const [validDOB, setValidDOB] = useState(true);\r\n  const [avatar, setAvatar] = useState({});\r\n  const [info, setInfo] = useState({});\r\n  const [contents, setContents] = useState([]);\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function ComponentWillMount() {\r\n      const token = window.localStorage.getItem('jwtToken');\r\n      const userID = localStorage.getItem('userID');\r\n      const res = await fetch(`${API_URL}/users/profile/${userID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      const result = await res.json();\r\n      setInfo(result.userInfo);\r\n      setName(result.userInfo.Name);\r\n      setEmail(result.userInfo.Email);\r\n      setAvatar(result.userInfo.Avatar);\r\n      setDateOfBirth(result.userInfo.DateOfBirth);\r\n    }\r\n    ComponentWillMount();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function retrieveAvatar() {\r\n      const res = await fetch(`${API_URL}/users/avatar/${userID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          ContentType: 'image/jpeg',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        const result = await res.blob();\r\n        setAvatar(URL.createObjectURL(result));\r\n      }\r\n    }\r\n    retrieveAvatar();\r\n  }, [setAvatar]);\r\n\r\n  const handleNameChange = (name) => {\r\n    setName(name);\r\n    if (isBlankString(name)) {\r\n      setContents(contents => [...contents.filter(content => content.id != 1), { id: 1, msg: \"Name field can't be empty!!!\" }]);\r\n      setValidName(false);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 1));\r\n      setValidName(true);\r\n    }\r\n  }\r\n\r\n  const handleEmailChange = (email) => {\r\n    setEmail(email);\r\n    if (isBlankString(email)) {\r\n      setContents(contents => [...contents.filter(content => content.id != 2), { id: 2, msg: \"Email field can't be empty!!!\" }]);\r\n      setValidEmail(false);\r\n    }\r\n    else if (!isEmailPattern(email)) {// === false\r\n      setContents(contents => [...contents.filter(content => content.id != 2), { id: 2, msg: \"Email field doesn't match the email format!!!\" }]);\r\n      setValidEmail(false);\r\n    }\r\n    else {\r\n      setContents(contents.filter(content => content.id !== 2));\r\n      setValidEmail(true);\r\n    }\r\n  }\r\n\r\n  const handleDateChange = (date) => {\r\n    setDateOfBirth(date.toISOString());\r\n    const now = new Date().toISOString()\r\n    if (dateOfBirth < now) {\r\n      setContents(contents.filter(content => content.id !== 3));\r\n      setValidDOB(true);\r\n    }\r\n    else {\r\n      setContents(contents => [...contents.filter(content => content.id != 3), { id: 3, msg: \"Invalid date!!!\" }]);\r\n      setValidDOB(false);\r\n    }\r\n  }\r\n\r\n  const handleSaveChange = async () => {\r\n    if (validDOB && validEmail && validName) {\r\n\r\n      const data = {\r\n        Name: name,\r\n        Email: email,\r\n        DateOfBirth: dateOfBirth\r\n      }\r\n\r\n      const res = await fetch(`${API_URL}/users/profile/updateinfo/${userID}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      // const result = await res.json();\r\n\r\n      if (res.status === 200) {\r\n\r\n        const infoCopy = JSON.parse(JSON.stringify(info));\r\n\r\n        infoCopy.Name = data.Name;\r\n        infoCopy.Email = data.Email;\r\n        infoCopy.DateOfBirth = data.DateOfBirth;\r\n        setInfo(infoCopy);\r\n        setShowSnackBar(true);\r\n\r\n      } else {\r\n        // alert(\"Some error when updating!\")\r\n      }\r\n\r\n    } else {\r\n      setShowSnackBar(true);\r\n    }\r\n  }\r\n\r\n  const handleResetInfo = () => {\r\n    setName(info.Name);\r\n    setEmail(info.Email);\r\n    setDateOfBirth(info.DateOfBirth);\r\n    setValidEmail(true);\r\n    setValidName(true);\r\n    setValidDOB(true);\r\n    setContents([]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n\r\n      <Container component=\"main\" maxWidth=\"lg\">\r\n        <Grid container spacing={4}>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <div className={classes.paper} style={{ padding: '20px' }}>\r\n              <img height={200} width={200} style={{ borderRadius: '8px' }} className={classes.paperLikeShadow}\r\n                src={avatar ? avatar : defaultAvatar} alt=\"User avatar\"\r\n              />\r\n              <ImageUploadDialog setAvatar={setAvatar} setShowSnackBar={setShowSnackBar} />\r\n              <Card className={classes.paperLikeShadow} style={{ width: '70%' }}>\r\n                <CardHeader\r\n                  title={\r\n                    <Badge color=\"secondary\">\r\n                      Achivement\r\n                    </Badge>}\r\n                  className={classes.cardHeader}\r\n                />\r\n                <CardContent>\r\n                  {/* <Typography> */}\r\n                  <table style={{ margin: '10px', width: '100%' }}>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold', width: '50%' }}>Username:</td>\r\n                        <td style={{ textAlign: 'center', width: '50%' }}>{info.Username}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold' }}>Elo mark:</td>\r\n                        <td style={{ textAlign: 'center' }}>{info.Elo}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold' }}>Total play(s):</td>\r\n                        <td style={{ textAlign: 'center' }}>{info.PlayCount}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold' }}>Winned play(s):</td>\r\n                        <td style={{ textAlign: 'center' }}>{info.WinCount}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <div className={classes.paper}>\r\n              {/* <Avatar className={classes.avatar}>\r\n                <ContactMailRoundedIcon />\r\n              </Avatar> */}\r\n              <Typography component=\"h2\" variant=\"h5\">\r\n                YOUR PROFILE\r\n                <IconButton onClick={handleResetInfo} title=\"Reset information\" color=\"primary\" aria-label=\"add an alarm\" style={{ fontSize: 'large' }} >\r\n                  <ReplayIcon />\r\n                </IconButton>\r\n              </Typography>\r\n              <div className={classes.form} >\r\n\r\n                <div className={classes.container}>\r\n                  <Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> Name:</b> </Typography>\r\n                  {validName ?\r\n                    <></>\r\n                    :\r\n                    <Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n                  }\r\n                </div>\r\n                <TextField variant=\"outlined\" margin=\"normal\" required fullWidth autoFocus\r\n                  placeholder=\"Username\" value={name}\r\n                  onChange={(event) => { handleNameChange(event.target.value); }}\r\n                />\r\n\r\n                <div className={classes.container}>\r\n                  <Typography className={classes.floatLeft} align=\"left\" component=\"h2\"> <b>Email:</b>  </Typography>\r\n                  {validEmail ?\r\n                    <></>\r\n                    :\r\n                    <Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n                  }\r\n                </div>\r\n                <TextField variant=\"outlined\" margin=\"normal\" required fullWidth\r\n                  id=\"email\" name=\"email\" placeholder=\"Email\" value={email}\r\n                  onChange={(event) => { handleEmailChange(event.target.value); }}\r\n                />\r\n\r\n                <div className={classes.container}>\r\n                  <Typography align=\"left\" component=\"h2\" className={classes.floatLeft}>\r\n                    <b>Date of Birth:</b>\r\n                  </Typography>\r\n                  {validDOB ?\r\n                    <></>\r\n                    :\r\n                    <Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n                  }\r\n                </div>\r\n\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils} >\r\n                  <KeyboardDatePicker\r\n                    // disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"dd/MM/yyyy\"\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-inline\"\r\n                    fullWidth value={dateOfBirth}\r\n                    onChange={handleDateChange}\r\n                    KeyboardButtonProps={{\r\n                      'aria-label': 'change date',\r\n                    }}\r\n                    placeholder=\"Date of Birth\"\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n                <Button type=\"submit\" fullWidth variant=\"outlined\" color=\"primary\" onClick={handleSaveChange}\r\n                  className={classes.submit} startIcon={<SaveIcon />}\r\n                >\r\n                  Save Change\r\n                </Button>\r\n                <Typography align=\"left\" component=\"h2\" style={{ marginTop: 10, marginBottom: 12, fontWeight: 'bold' }}> Passowrd: </Typography>\r\n                <ChangePasswordDialog\r\n                // showSnackbar={showSnackbar}\r\n                // setShowSnackBar={setShowSnackBar}\r\n                // contents={contents}\r\n                // setContents={setContents}\r\n                />\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignUp\\signup.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignIn\\signin.js",["122","123"],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Footer\\footer.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Navbar\\navbar.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\games.js",["124","125","126"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { authen, isBlankString } from '../../utils/helper'\r\nimport GameList from './gamelist';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(4, 0, 2),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '25%',\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  fab: {\r\n    width: '35%',\r\n    height: '35%',\r\n    fontSize: '50px',\r\n  }\r\n}));\r\n\r\nfunction Games({ socket }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const userID = localStorage.getItem('userID');\r\n  const jwtToken = window.localStorage.getItem('jwtToken');\r\n  const [open, setOpen] = useState(false);\r\n  const [games, setGames] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(null);\r\n  const [isBlockedRule, setIsBlockedRule] = useState(false);\r\n  const [timeThinkingEachTurn, setTimeThinkingEachTurn] = useState(60);\r\n\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const status = await authen();\r\n      if (status === 401) {\r\n        history.push('/signin')\r\n      }\r\n    }\r\n    Authen();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function getAllGames() {\r\n      const res = await fetch(`${API_URL}/games`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${jwtToken}`\r\n        }\r\n      });\r\n      const result = await res.json();\r\n      // console.log(result);\r\n      setGames(result.games);\r\n    }\r\n    getAllGames();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    socket.on(`newGameFail${userID}`, (data) => {\r\n      alert(data.msg);// game name is empty\r\n    });\r\n\r\n    socket.on(\"server_NewGame\", data => {\r\n      setGames(games => {\r\n        const gamesCopy = games.slice();\r\n        return [data.game].concat(gamesCopy);\r\n        // games.slice().concat([data.game])});\r\n\r\n      });\r\n      if (data.game.Player1ID === userID) {\r\n        history.push(`/games/${data.game.ID}`);\r\n      }\r\n    })\r\n  }, []);\r\n\r\n  const addGameButtonClicked = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleCreate = async () => {\r\n    const data = {\r\n      name,\r\n      password,\r\n      isBlockedRule,\r\n      timeThinkingEachTurn,\r\n      userID\r\n    }\r\n    // console.log(data);\r\n    if (isBlankString(data.name)) {\r\n      alert('Game name can not be empty');\r\n      return;\r\n    }\r\n    socket.emit('client_NewGame', data);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <main>\r\n        {/* Hero unit */}\r\n        <div className={classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n              Games layout\r\n            </Typography>\r\n          </Container>\r\n        </div>\r\n        <Container className={classes.cardGrid} maxWidth=\"lg\">\r\n          {/* End hero unit */}\r\n          <Grid container spacing={4}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card className={classes.card}>\r\n                <CardMedia className={classes.cardMedia}>\r\n                  <Fab className={classes.fab} color=\"primary\" aria-label=\"Add\"\r\n                    onClick={addGameButtonClicked}>\r\n                    +\r\n                  </Fab>\r\n                </CardMedia>\r\n                <CardContent className={classes.cardContent}>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Create a new game\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <GameList\r\n              games={games}\r\n              socket={socket}\r\n            />\r\n          </Grid>\r\n          <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Game Information</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                Please enter the information for the game\r\n              </DialogContentText>\r\n              <TextField id=\"name\" label=\"Name\" autoFocus margin=\"dense\" required\r\n                fullWidth onChange={e => setName(e.target.value)}\r\n              />\r\n              <TextField id=\"password\" label=\"Password\" margin=\"dense\"\r\n                fullWidth onChange={e => setPassword(e.target.value)}\r\n              />\r\n              <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\r\n                <Typography>\r\n                  Is Blocked Rule\r\n                </Typography>\r\n                <Checkbox onChange={e => setIsBlockedRule(e.target.checked)} />\r\n              </div>\r\n\r\n              <div>\r\n                <Typography style={{ display: \"inline-flex\", alignItems: \"center\" }}>\r\n                  Time to think each turn (seconds)\r\n                </Typography>\r\n                <Select labelId=\"demo-customized-select-label\" id=\"time\" value={timeThinkingEachTurn}\r\n                  style={{ marginLeft: \"10px\" }} onChange={e => setTimeThinkingEachTurn(e.target.value)}\r\n                >\r\n                  <MenuItem value={10}>10</MenuItem>\r\n                  <MenuItem value={30}>30</MenuItem>\r\n                  <MenuItem value={60}>60</MenuItem>\r\n                  <MenuItem value={90}>90</MenuItem>\r\n                </Select>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={handleCreate} color=\"secondary\">\r\n                Create\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Container>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Games;","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\game.js",["127","128","129","130","131","132","133","134","135"],"import React, { useState, useEffect } from 'react';\r\nimport { Prompt } from 'react-router';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SendMessageIcon from '@material-ui/icons/Send';\r\nimport Button from '@material-ui/core/Button';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Board from './board';\r\nimport Player from '../Player/player';\r\nimport Timer from '../Timer/timer';\r\nimport { calculateWinner, calculateElo } from './gameServices';\r\nimport OnlineUsers from '../OnlineUsers/onlineUsers_Secondary';\r\nimport { authen } from '../../utils/helper';\r\nimport config from '../../constants/config.json';\r\n\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Game({ socket, onlineUserList }) {\r\n  const pathTokensArray = window.location.toString().split('/');\r\n  const gameID = pathTokensArray[pathTokensArray.length - 1];\r\n  const name = localStorage.getItem('name');\r\n  const userID = localStorage.getItem('userID');\r\n  const jwtToken = window.localStorage.getItem('jwtToken');\r\n  const History = useHistory();\r\n\r\n  const [start, setStart] = useState(false);\r\n  const [hasWinner, setHasWinner] = useState(false);\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [chatItemMessage, setChatItemMessage] = useState(\"\");\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(0).fill(null),\r\n      position: -1\r\n    }\r\n  ]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [isAscending, setIsAscending] = useState(true);\r\n  const [game, setGame] = useState({});\r\n  const [player1, setPlayer1] = useState({});// when the game has had 2 mainplayer, the 'user' term in others system is observer (cant not play game)\r\n  const [player2, setPlayer2] = useState({\r\n    Name: \"Waiting for opponent\",\r\n    Elo: 0\r\n  });\r\n  const [observers, setObservers] = useState([]);\r\n  const [isMainPlayer, setIsMainPlayer] = useState(false);\r\n  const [isYourTurn, setIsYourTurn] = useState(true);\r\n  const [player, setPlayer] = useState(\"X\");// X || O\r\n  const [player1Ready, setPlayer1Ready] = useState(false);\r\n  const [player2Ready, setPlayer2Ready] = useState(false);\r\n\r\n  async function getPlayer(id) {\r\n    const res = await fetch(`${API_URL}/users/get/${id}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n\r\n    setPlayer1(result.player1);\r\n  }\r\n\r\n  async function getGame(gameID) {\r\n    const res = await fetch(`${API_URL}/games/get/${gameID}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n    setGame(result.game);\r\n  }\r\n\r\n  // update user info\r\n  async function updatePlayersInfo(data) {\r\n    const res = await fetch(`${API_URL}/users/update`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n    if (res.status === 200) {\r\n      console.log(result.msg);\r\n      setPlayer1(result.player1);\r\n      setPlayer2(result.player2);\r\n    }\r\n    else {\r\n      window.alert(result.msg);\r\n    }\r\n  }\r\n\r\n  async function updateGameInfo(data) {\r\n    const res = await fetch(`${API_URL}/games/update`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n    if (res.status === 200) {\r\n      // console.log(result.msg);\r\n      setGame(result.game);\r\n    }\r\n    else {\r\n      window.alert(result.msg);\r\n    }\r\n  }\r\n\r\n  // authen when component mount\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const status = await authen();\r\n      if (status === 401) {\r\n        History.push('/signin');\r\n      }\r\n    }\r\n    Authen();\r\n  }, []);\r\n\r\n  // set game status (can start?) depends on 'youreReady' and 'opponentReady'\r\n  useEffect(() => {\r\n    setStart(player1Ready && player2Ready);\r\n  }, [player1Ready, player2Ready]);\r\n\r\n  // get game info when component mount\r\n  useEffect(() => {\r\n    if (game) { // if (game === {})\r\n      console.log(\"Game setup\");\r\n      getGame(gameID);\r\n    }\r\n  }, []);\r\n\r\n  // get player info when component mount\r\n  useEffect(() => {\r\n    if (!game.Result) { // if (game.Result == null)\r\n      if (game.Player1ID === userID || game.Player2ID === userID) { // if (player === {})\r\n        if (game.Player1ID === userID) {\r\n          console.log(\"IM THE 1ST\");\r\n        }\r\n        if (game.Player2ID === userID) {\r\n          console.log(\"IM THE 2ND\");\r\n        }\r\n        getPlayer(userID);\r\n      }\r\n    }\r\n  }, [game]);\r\n\r\n  // load moves\r\n  useEffect(() => {\r\n    socket.on(`load_moves_${gameID}`, data => {\r\n      console.log(\"load_moves\");\r\n      setHistory(data.history);\r\n      setStepNumber(data.history.length - 1);\r\n      setXIsNext(player === \"X\");\r\n\r\n      if (isMainPlayer) {\r\n        setIsYourTurn(data.isYourTurn);\r\n      }\r\n      else setIsYourTurn(!data.isYourTurn);\r\n    });\r\n  }, [gameID, isMainPlayer]);\r\n\r\n  // load chat\r\n  useEffect(() => {\r\n    socket.on(`load_chat_${gameID}`, data => {\r\n      console.log(\"load_chat\");\r\n      setChatHistory(chatHistory => [...chatHistory, data.message]);\r\n    });\r\n  }, [gameID]);\r\n\r\n  //get notified when someone enter the room\r\n  useEffect(() => {\r\n    socket.on(`notify_join_game_${gameID}`, data => {\r\n      console.log(`notify_join_game_${gameID}`);\r\n\r\n      setObservers(data.observers);\r\n\r\n      if (data.isMainPlayer) {\r\n        // player1 (who creates the game) moves first\r\n        setIsYourTurn(userID === data.player1.ID ? true : false);\r\n        setPlayer(userID === data.player1.ID ? \"X\" : \"O\");\r\n        setPlayer2(userID === data.player1.ID ? data.player2 : data.player1);\r\n        setIsMainPlayer(data.isMainPlayer);// default is false, now set to true\r\n        const message = {\r\n          ownerID: null,\r\n          message: data.player2.Name + \" has joined the game\"\r\n        }\r\n        setChatHistory(chatHistory => [...chatHistory, message]);\r\n      } else { // is not main players\r\n        console.log(\"IM A VIEWER\");\r\n        // if we dont use [0] then joiner is an array\r\n        const joiner = data.observers.filter(observer => observer.ID === data.userID)[0];\r\n\r\n        const message = {\r\n          ownerID: null,\r\n          message: joiner.Name + \" has joined the game\"\r\n        }\r\n        setChatHistory(chatHistory => [...chatHistory, message]);\r\n\r\n        if (userID !== data.player1.ID && userID !== data.player2.ID) {\r\n          // chặn 2 màn hình người choi8 chính cập nhật màn hình khi khán giả vào phòng\r\n          if (data.player1.ID === game.Player1ID) {\r\n            setPlayer1(data.player1);\r\n            setPlayer2(data.player2);\r\n          }\r\n          else {\r\n            setPlayer1(data.player2);\r\n            setPlayer2(data.player1);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }, [gameID, userID]);\r\n\r\n  //player ready\r\n  useEffect(() => {\r\n    socket.on(`ready_${gameID}`, data => {\r\n      console.log(\"player_ready\");\r\n\r\n      if (data.player1.ID === player1.ID) {\r\n        setPlayer1Ready(data.player1.player1Ready);\r\n        setPlayer2Ready(data.player2.player2Ready);\r\n      } else {\r\n        setPlayer1Ready(data.player2.player2Ready);\r\n        setPlayer2Ready(data.player1.player1Ready);\r\n      }\r\n\r\n      // setPlayer2Ready(data.value);\r\n    });\r\n  }, [gameID]);\r\n\r\n  // opponent leave\r\n  // useEffect(() => {\r\n  //   socket.on(`opponent_leave_game_${gameID}`, data => {\r\n  //     console.log(\"opponent_leave_game\");\r\n  //     setUser(data.user);\r\n  //   });\r\n  // }, [gameID]);\r\n\r\n  // owner of the game leaves game\r\n  // useEffect(() => {\r\n  //   socket.on(`owner_leave_game_${gameID}`, data => {\r\n  //     console.log(\"owner_leave_game\");\r\n  //     console.log(data);\r\n  //     setPlayer(\"X\");\r\n  //     setOpponentReady(false);\r\n  //     setYoureReady(false);\r\n  //     setOpponent({\r\n  //       Name: \"Waiting for opponent\",\r\n  //       Elo: 0\r\n  //     });\r\n  //     setGame(data.game);\r\n  //   });\r\n  // }, [gameID]);\r\n\r\n  // time up\r\n  useEffect(() => {\r\n    socket.on(`timeup_${gameID}`, data => {\r\n      console.log(\"time up\");\r\n      // reset player2\r\n      setPlayer2(data.player2);\r\n      // reset player1\r\n      getPlayer(data.player1ID);\r\n\r\n      const gameData = {\r\n        game,\r\n        player2ID: userID === game.Player1ID ? player2.ID : userID,\r\n        result: data.winnerID === game.Player1ID ? 1 : 2,\r\n        status: 0,\r\n        moves: JSON.stringify(history),\r\n        chatHistory: JSON.stringify(chatHistory)\r\n      }\r\n      if (!game.Result) {\r\n        updateGameInfo(gameData);\r\n      }\r\n\r\n      setPlayer1Ready(false);\r\n      setPlayer2Ready(false);\r\n      setHasWinner(false);\r\n    });\r\n  }, [gameID, history, chatHistory, game]);\r\n\r\n  const handleClick = (i) => {\r\n    if (!isMainPlayer)// chỉ là khán giả thì ko click được\r\n      return;\r\n\r\n    const newHistory = history.slice(0, stepNumber + 1);\r\n    const current = newHistory[newHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (hasWinner || squares[i] || !isYourTurn) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(newHistory.concat([\r\n      {\r\n        squares: squares,\r\n        position: i\r\n      }\r\n    ]));\r\n    setStepNumber(newHistory.length);\r\n    setXIsNext(!xIsNext);\r\n    setIsYourTurn(!isYourTurn);\r\n\r\n    //ok\r\n    socket.emit(\"move\", {\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          position: i\r\n        }\r\n      ]),\r\n      playerID: userID,\r\n      gameID,\r\n      isYourTurn\r\n    });\r\n  }\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  };\r\n\r\n  const sortButtonClicked = () => {\r\n    setIsAscending(!isAscending);\r\n  };\r\n\r\n  const current = history.slice(stepNumber, stepNumber + 1)[0];\r\n  const winInfo = calculateWinner(current.squares, current.position, game.IsBlockedRule);\r\n  const winner = winInfo.winner; // X or O\r\n\r\n  // prevent from playing when there's a winner\r\n  useEffect(() => {\r\n    setHasWinner(winner !== null);\r\n  }, [winner]);\r\n\r\n  useEffect(() => {\r\n    if (isMainPlayer && hasWinner) {\r\n      const elo = calculateElo(player1.Elo, player2.Elo);\r\n      const win = player === winner;\r\n      const msg = (win ? \"You win\\n+\" : \"You lose\\n-\") + elo + \" elo\";\r\n      const data = {\r\n        player1,\r\n        win: win,\r\n        elo: elo,\r\n        player2ID: player2.ID\r\n      }\r\n      updatePlayersInfo(data);\r\n\r\n      // some code to update game result here\r\n      const gameData = {\r\n        game,\r\n        player2ID: userID === game.Player1ID ? player2.ID : userID,\r\n        result: (win && userID === game.Player1ID) || (!win && userID === game.Player2ID) ? 1 : 2,\r\n        status: 0,\r\n        moves: JSON.stringify(history),\r\n        chatHistory: JSON.stringify(chatHistory)\r\n      }\r\n      if (!game.Result) {\r\n        updateGameInfo(gameData);\r\n      }\r\n\r\n      // emit tới server để xóa game này khỏi game layout của những người chơi khác\r\n\r\n      alert(msg);\r\n      setPlayer2Ready(false);\r\n      setPlayer1Ready(false);\r\n      setHasWinner(false);\r\n    }\r\n  }, [winner, hasWinner, isMainPlayer, history, chatHistory, game]);\r\n\r\n  const moves = history.map((step, move) => {\r\n    const boardSize = config.boardSize;\r\n    const rowIndex = Math.floor(step.position / boardSize);\r\n    const colIndex = step.position % boardSize;\r\n    const desc = move ? 'Go to move #' + move +\r\n      ' (' + colIndex + ', ' + rowIndex + ')' : 'Go to game start';\r\n    const buttonClassName = (move === stepNumber) ? \"selected-move\" : \"\";\r\n    return (\r\n      <li key={move}>\r\n        <button className={buttonClassName} onClick={() => jumpTo(move)}>{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  if (!isAscending) {\r\n    moves.reverse();\r\n  }\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  }\r\n  else {\r\n    if (winInfo.isDraw) {\r\n      status = \"Draw!!!\";\r\n      window.alert(\"Draw!!!\");\r\n    }\r\n    else {\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n  }\r\n\r\n  const handleChat = (e) => {\r\n    e.preventDefault();\r\n\r\n    setChatHistory(chatHistory => chatHistory.slice().concat([\r\n      {\r\n        ownerID: userID,\r\n        message: name + ': ' + chatItemMessage\r\n      }\r\n    ]));\r\n\r\n    socket.emit(\"chat\", {\r\n      message: {\r\n        ownerID: userID,\r\n        message: name + ': ' + chatItemMessage\r\n      },\r\n      gameID\r\n    });\r\n    setChatItemMessage(\"\");\r\n  }\r\n\r\n  const handleReady = () => {\r\n    setPlayer1Ready(!player1Ready);\r\n    socket.emit(\"ready\", {\r\n      gameID,\r\n      player1: { ID: player1.ID, player1Ready: !player1Ready },\r\n      player2: { ID: player2.ID, player2Ready: player2Ready }\r\n    });\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   window.addEventListener('beforeunload', alertUser);\r\n  //   window.addEventListener('unload', handleEndConcert);\r\n  //   return () => {\r\n  //     window.removeEventListener('beforeunload', alertUser);\r\n  //     window.removeEventListener('unload', handleEndConcert);\r\n  //     handleEndConcert(game, player2);\r\n  //   }\r\n  // }, [game, player2]);\r\n\r\n  // const alertUser = e => {\r\n  //   e.preventDefault();\r\n  //   // e.returnValue = 'HAHA';\r\n  //   window.alert('You are reload the page!!!');\r\n  // }\r\n\r\n  // const handleEndConcert = (game, player2) => {\r\n  //   if (start) {\r\n  //     const elo = calculateElo(user.Elo, player2.Elo);\r\n  //     const win = !isYourTurn;\r\n  //     const msg = (win ? \"You win\\n+\" : \"You lose\\n-\") + elo + \" elo\";\r\n  //     //socket.emit(\"leave_game\", { player1, player2, gameID, elo });\r\n  //     window.alert(msg);\r\n  //   }\r\n  //   else {\r\n  //     // leave game when the game is not starting yet\r\n  //     // reset owner of the game if the owner leaves\r\n  //     if (userID === game.Player1ID && player2.ID && !game.Result) {\r\n  //       console.log(\"emit owner leave game\");\r\n  //       console.log(game);\r\n  //       console.log(player2.ID);\r\n  //       socket.emit(\"owner_leave_game\", { game, userID, player2ID: player2.ID });\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  const handleURLChangeWhenPlayingGame = () => {\r\n\r\n    // if (('Are you sure you want to leave game')) {\r\n\r\n    // }\r\n  }\r\n\r\n  const opponent = player === \"X\" ? \"O\" : \"X\";\r\n  let element = (\r\n    <React.Fragment>\r\n      <Prompt\r\n        when={start}\r\n        message={() => handleURLChangeWhenPlayingGame()}\r\n      />\r\n      <div style={{ position: 'relative' }}>\r\n        <div style={{ position: 'absolute', zIndex: '1', width: '100%' }}>\r\n          <OnlineUsers onlineUserList={onlineUserList} />\r\n        </div>\r\n        <div className=\"game\" style={{ marginTop: '25px' }}>\r\n          <div className=\"player-info\">\r\n            <CardHeader title=\"Player Info\"></CardHeader>\r\n            <Player player={player2} xOrO={opponent} />\r\n\r\n            {/* game not started */}\r\n            {!start ?\r\n              <Typography style={{ margin: \"10px\", color: \"darkgreen\" }}>\r\n                {player2Ready ? 'Ready' : 'Not Ready'}\r\n              </Typography> :\r\n              <Timer\r\n                socket={socket}\r\n                gameID={gameID}\r\n                value={game.TimeThinkingEachTurn}\r\n                isYourTurn={!isYourTurn}\r\n                player2={player2}\r\n                player1={player1}\r\n                isPlayer2={true}\r\n                elo={calculateElo(player2.Elo, player1.Elo)}\r\n                isMainPlayer={isMainPlayer}\r\n              />}\r\n\r\n            <br></br>\r\n            <Player player={player1} xOrO={player} />\r\n\r\n            {!start ?\r\n              <>\r\n                {/* game not started */}\r\n                {\r\n                  isMainPlayer ?\r\n                    // là người chơi chính thì hiện nút để ready or cancel\r\n                    (player2.ID ?\r\n                      <Button style={{ margin: \"10px\" }} variant=\"contained\" color=\"primary\"\r\n                        onClick={handleReady}\r\n                      >\r\n                        {player1Ready ? \"Cancel\" : \"Ready\"}\r\n                      </Button>\r\n                      :\r\n                      <React.Fragment></React.Fragment>\r\n                    )\r\n                    :\r\n                    <Typography style={{ margin: \"10px\", color: \"darkgreen\" }}>\r\n                      {player1Ready ? 'Ready' : 'Not Ready'}\r\n                    </Typography>\r\n                }\r\n              </>\r\n              // waiting for opponent, hide the Ready Button\r\n              :\r\n              <Timer\r\n                socket={socket}\r\n                gameID={gameID}\r\n                value={game.TimeThinkingEachTurn}\r\n                isYourTurn={isYourTurn}\r\n                player2={player1}\r\n                player1={player2}\r\n                isPlayer2={false}\r\n                elo={calculateElo(player2.Elo, player1.Elo)}\r\n                isMainPlayer={isMainPlayer}\r\n              />\r\n            }\r\n          </div>\r\n\r\n          <div className=\"game-board\">\r\n            <CardHeader style={{ padding: '5px' }} title={\"Game name: \" + game.Name}></CardHeader>\r\n            <CardHeader style={{ padding: '5px' }} title={\"Game ID: \" + game.ID}></CardHeader>\r\n            {start ?\r\n              <Board\r\n                key={stepNumber}\r\n                squares={current.squares}\r\n                onClick={i => handleClick(i)}\r\n                winLine={winInfo.winLine}\r\n              /> : <React.Fragment></React.Fragment>}\r\n          </div>\r\n          <div className=\"game-info\">\r\n\r\n            <div className=\"chat-box\" >\r\n              <CardHeader title=\"Chat Box\"></CardHeader>\r\n              <Card style={{ boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)', width: '100%', minHeight: '200px', maxHeight: '200px', overflowY: 'scroll' }}>\r\n                {chatHistory.map((item, i) => {\r\n                  return (\r\n                    <div key={i} className=\"chat-item\"\r\n                      style={{\r\n                        color: item.ownerID === null ? 'gray' :\r\n                          (item.ownerID === userID ? 'orange' : 'green')\r\n                      }}\r\n                    >\r\n                      {item.message}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </Card>\r\n              <form className=\"form\" onSubmit={handleChat}>\r\n                <TextField id=\"message\" name=\"message\" label=\"Message\" variant=\"outlined\" size=\"small\"\r\n                  margin=\"normal\" required fullWidth autoFocus value={chatItemMessage}\r\n                  onChange={e => setChatItemMessage(e.target.value)}\r\n                />\r\n                <IconButton className=\"submit-button\" size=\"small\" type=\"submit\" color=\"primary\">\r\n                  <SendMessageIcon />\r\n                </IconButton>\r\n              </form>\r\n            </div>\r\n\r\n            <div className=\"paper-like-shadow\" style={{\r\n              marginTop: '20px',\r\n              marginLeft: '20px',\r\n              minWidth: '320px',\r\n            }}\r\n            >\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography><b>Gameplay Info</b></Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails style={{ display: 'flex', flexDirection: 'column' }}>\r\n                  {game.IsBlockedRule ? <Typography>Blocked Rule</Typography> : <React.Fragment></React.Fragment>}\r\n                  {start ?\r\n                    <React.Fragment>\r\n                      <div>{status}</div>\r\n                      <div>\r\n                        <button onClick={() => sortButtonClicked()}>\r\n                          {isAscending ? \"Descending\" : \"Ascending\"}\r\n                        </button>\r\n                      </div>\r\n                      <ol style={{ maxHeight: '200px', overflowY: 'scroll' }}>{moves}</ol>\r\n                    </React.Fragment> :\r\n                    <React.Fragment></React.Fragment>\r\n                  }\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel2a-content\"\r\n                  id=\"panel2a-header\"\r\n                >\r\n                  <Typography><b>Observer List</b></Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails style={{ display: 'flex', flexDirection: 'column', textAlign: 'left' }}>\r\n                  {observers.map((observer, i) =>\r\n                    <div key={i}>\r\n                      <Typography>\r\n                        {observer.Name}\r\n                      </Typography>\r\n                      <Divider />\r\n                    </div>\r\n\r\n                  )}\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n  return (\r\n    element\r\n  );\r\n}\r\n\r\nexport default Game;","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Home\\home.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\utils\\helper.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gamelist.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\board.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\gameServices.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Player\\player.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Secondary.js",["136"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport Input from '@material-ui/core/Input';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: 5,\r\n    top: 30,\r\n    border: `1px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n    background: ' green',\r\n  },\r\n}))(Badge);\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: drawerWidth,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginRight: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: 0,\r\n  },\r\n}));\r\n\r\nexport default function OnlineUsers({ onlineUserList }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [onlineUserListCopy, setOnlineUserListCopy] = useState([]);\r\n  const userID = localStorage.getItem(\"userID\");\r\n\r\n  const handleDrawerOpen = () => {\r\n    setSearchString(\"\");\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n\r\n  }\r\n  useEffect(() => {\r\n    setOnlineUserListCopy(onlineUserList.slice());\r\n  }, [onlineUserList]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (searchString !== \"\")// có nội dung cần tìm\r\n    {\r\n      console.log(\"v\");\r\n      setOnlineUserListCopy(onlineUserListCopy.slice()\r\n        .filter(user => user.Name.toLowerCase().includes(searchString.toLowerCase())))\r\n    } else {\r\n      setOnlineUserListCopy(onlineUserList);\r\n    }\r\n  }, [searchString, onlineUserList]); // 2nd dependency help make sure new client connects will not make filtered list wrong\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton color=\"inherit\" aria-label=\"open drawer\" edge=\"end\"\r\n        onClick={handleDrawerOpen} className={clsx(open && classes.hide)}\r\n        style={{\r\n          position: 'absolute',\r\n          top: -10,\r\n          right: 25,\r\n          zIndex: 1,\r\n          alignContent: 'center',\r\n          fontSize: '4',\r\n          borderRadius: '50%',\r\n          height: '60px',\r\n          width: '60px',\r\n          color: '#FFF',\r\n          backgroundImage: 'linear-gradient(to right, #24C6DC 0%, #514A9D 100%)',\r\n          boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        }}\r\n      >\r\n        <GroupAddIcon />\r\n      </IconButton>\r\n      <Drawer className={classes.drawer} variant=\"temporary\" anchor=\"right\"\r\n        open={open} classes={{ paper: classes.drawerPaper }} onClose={handleDrawerClose}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Input placeholder=\"Username here\"\r\n            onChange={(event) => { setSearchString(event.target.value) }}\r\n          />\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {onlineUserListCopy.map((item) => (\r\n            <ListItem key={item.ID}>\r\n              <ListItemIcon >\r\n                <StyledBadge badgeContent={\"\"} >\r\n                  <FaceIcon fontSize=\"large\" />\r\n                </StyledBadge>\r\n              </ListItemIcon>\r\n              <ListItemText primary={item.Name} />\r\n              {item.ID !== userID ?\r\n                <Button variant=\"outlined\" style={{ fontSize: '12px', borderRadius: '5px', padding: '2px' }}>Invite</Button>\r\n                :\r\n                <></>\r\n              }\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Primary.js",["137"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport List from '@material-ui/core/List';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Input from '@material-ui/core/Input';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: 5,\r\n    top: 30,\r\n    border: `1px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n    background: ' green',\r\n  },\r\n}))(Badge);\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  list: {\r\n    position: \"fixed\",\r\n    right: 30,\r\n    bottom: 0,\r\n    border: '2px solid grey',\r\n    borderBottomWidth: '0',\r\n    width: '300px',\r\n    borderRadius: '8px 8px 0 0',\r\n    maxHeight: '80%',\r\n    // overflowY: 'scroll',\r\n    overflow: 'auto',\r\n    background: '#f2f2f2'\r\n  },\r\n  card: {\r\n    position: \"fixed\",\r\n    right: 30,\r\n    bottom: 0,\r\n    border: `1px solid #3f51b5`,\r\n    borderRadius: '5px 5px 0 0',\r\n    width: '300px',\r\n    height: '50px',\r\n    background: '#3f51b5',\r\n    cursor: 'pointer',\r\n    display: 'inline-block',\r\n    color: 'white',\r\n    padding: '15px',\r\n    fontWeight: 'bold',\r\n  },\r\n\r\n  paperShadow: {\r\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n  },\r\n\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  floatLeft: {\r\n    float: 'left'\r\n  },\r\n  floatRight: {\r\n    float: 'right'\r\n  }\r\n\r\n}));\r\n\r\nexport default function OnlineUsers({ onlineUserList }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [onlineUserListCopy, setOnlineUserListCopy] = useState([]);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setSearchString(\"\");\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n\r\n  }\r\n  useEffect(() => {\r\n    setOnlineUserListCopy(onlineUserList.slice());\r\n  }, [onlineUserList]);\r\n\r\n  useEffect(() => {\r\n    if (searchString !== \"\")// có nội dung cần tìm\r\n    {\r\n      // console.log(\"v\");\r\n      setOnlineUserListCopy(onlineUserListCopy.slice()\r\n        .filter(user => user.Name.toLowerCase().includes(searchString.toLowerCase())))\r\n    }\r\n    else {\r\n      setOnlineUserListCopy(onlineUserList);\r\n    }\r\n  }, [searchString, onlineUserList]); // 2nd dependency help make sure new client connects will not make filtered list wrong\r\n\r\n\r\n  return (\r\n    <>\r\n      {open ?\r\n        <div className={`${classes.list} ${classes.paperShadow}`}>\r\n          <div className={classes.drawerHeader}>\r\n            <Input\r\n              placeholder=\"Username here\"\r\n              onChange={(event) => { setSearchString(event.target.value) }}\r\n              fullWidth\r\n              style={{ position: 'sticky' }}\r\n            />\r\n            <IconButton onClick={handleDrawerClose}>\r\n              <MinimizeIcon />\r\n            </IconButton>\r\n          </div>\r\n          <List >\r\n            {onlineUserListCopy.length === 0 ?\r\n              <div >No user found</div>\r\n              :\r\n              onlineUserListCopy.map((item) => (\r\n                <ListItem key={item.ID}>\r\n                  <ListItemIcon >\r\n                    <StyledBadge badgeContent={\"\"} >\r\n                      <FaceIcon fontSize=\"large\" />\r\n                    </StyledBadge>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={item.Name} />\r\n                  {/* <Button variant=\"outlined\" style={{ fontSize: '12px', borderRadius: '5px', padding: '2px' }}>Invite</Button> */}\r\n                </ListItem>\r\n              ))}\r\n          </List>\r\n        </div>\r\n        :\r\n        <div className={`${classes.card} ${classes.paperShadow}`} onClick={() => handleDrawerOpen()}>\r\n          <div className={classes.floatLeft}>\r\n            Online Users\r\n          </div>\r\n          <div className={classes.floatRight} style={{ marginRight: '10px' }}>\r\n            <Badge badgeContent={onlineUserList.length} color=\"secondary\" />\r\n          </div>\r\n        </div>\r\n      }\r\n\r\n    </>\r\n\r\n  );\r\n}\r\n","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Timer\\timer.js",["138"],"import React, { useState, useEffect } from 'react';\r\n\r\nfunction Timer({ socket, gameID, value, isYourTurn, player1, player2, isPlayer2, elo, isMainPlayer }) {\r\n  const [seconds, setSeconds] = useState(value);\r\n\r\n  useEffect(() => {\r\n    let myInterval = setInterval(() => {\r\n      // count down if it's your turn\r\n      console.log(isYourTurn);\r\n      if (seconds > 0 && isYourTurn) {\r\n        setSeconds(seconds - 1);\r\n      }\r\n      // reset timer when it's your opponent's turn\r\n      if (!isYourTurn) {\r\n        setSeconds(value);\r\n      }\r\n\r\n      // check when player runs out of time (you lose)\r\n      // isPlayer2 means the opponent's timer counts down\r\n      if (seconds === 0 && isYourTurn) {\r\n        console.log(\"Game over\");\r\n        clearInterval(myInterval);\r\n        if (isMainPlayer) {\r\n          const msg = \"You \" + (isPlayer2 ? \"win\\n+\" : \"lose\\n-\") + elo + \" elo\";\r\n          window.alert(msg);\r\n          socket.emit(\"run_out_of_time\",\r\n            {\r\n              gameID,\r\n              player: isPlayer2 ? player1 : player2,\r\n              win: isPlayer2,\r\n              elo,\r\n              player2ID: !isPlayer2 ? player1.ID : player2.ID\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(myInterval);\r\n    };\r\n  }, [seconds, isYourTurn]);\r\n\r\n  return (\r\n    <div style={{ margin: '10px' }}>\r\n      Time: {seconds}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ChangePasswordDialog\\index.js",["139","140","141","142","143"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport SimpleSnackbar from '../../SnackBar/snackbar';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { isBlankString } from '../../../utils/helper'; //'../../../utils/index'\r\nimport config from '../../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n\tcontainer: {\r\n\t\tdisplay: 'inline-block',\r\n\t\twidth: '100%'\r\n\t},\r\n\tfloatRight: {\r\n\t\tfloat: \"right\",\r\n\t\twidth: '60%'\r\n\t},\r\n\tfloatLeft: {\r\n\t\tfloat: \"left\",\r\n\t\twidth: '40%'\r\n\t},\r\n\tpaperLikeShadow: {\r\n\t\tboxShadow: '0 4px 8px 5px rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n\t},\r\n\thidden: {\r\n\t\tdisplay: 'none'\r\n\t}\r\n}));\r\n\r\nexport default function FormDialog(/*{ setShowSnackBar, contents, setContents }*/) {\r\n\tconst classes = useStyles();\r\n\tconst userID = localStorage.getItem('userID');\r\n\tconst token = window.localStorage.getItem('jwtToken');\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [currentPassword, setCurrentPassword] = useState(\"\");\r\n\tconst [newPassword, setNewPassword] = useState(\"\");\r\n\tconst [validCurentPassword, setValidCurentPassword] = useState(false);\r\n\tconst [validNewPassword, setValidNewPassword] = useState(false);\r\n\tconst [showSnackbar, setShowSnackBar] = useState(false);\r\n\tconst [contents, setContents] = useState([\r\n\t\t{ id: 4, msg: \"Password can't be empty!!!\" },\r\n\t\t{ id: 5, msg: \"New password can't be empty!!!\" },\r\n\t]);\r\n\r\n\tconst handleCurrentPasswordChange = (currentPassword) => {\r\n\t\tsetCurrentPassword(currentPassword);\r\n\t\tif (isBlankString(currentPassword)) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 4), { id: 4, msg: \"Password can't be empty!!!\" }]);\r\n\t\t\tsetValidCurentPassword(false);\r\n\t\t} else if (currentPassword.length < 6) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 4), { id: 4, msg: \"Password must have at least 6 characters!!!\" }]);\r\n\t\t\tsetValidCurentPassword(false);\r\n\t\t} else {\r\n\t\t\tsetContents(contents.filter(content => content.id !== 4));\r\n\t\t\tsetValidCurentPassword(true);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleNewPasswordChange = (newPassword) => {\r\n\t\tsetNewPassword(newPassword);\r\n\t\tif (isBlankString(newPassword)) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 5), { id: 5, msg: \"New password can't be empty!!!\" }]);\r\n\t\t\tsetValidNewPassword(false);\r\n\t\t} else if (newPassword.length < 6) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 5), { id: 5, msg: \"New password must have at least 6 characters!!!\" }]);\r\n\t\t\tsetValidNewPassword(false);\r\n\t\t} else {\r\n\t\t\tsetContents(contents.filter(content => content.id !== 5));\r\n\t\t\tsetValidNewPassword(true);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleClickOpen = () => {\r\n\t\tsetOpen(true);\r\n\t\tsetContents([\r\n\t\t\t{ id: 4, msg: \"Password can't be empty!!!\" },\r\n\t\t\t{ id: 5, msg: \"New password can't be empty!!!\" },\r\n\t\t]);\r\n\t}\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t\tsetCurrentPassword(\"\");\r\n\t\tsetNewPassword(\"\");\r\n\t\tsetShowSnackBar(false);\r\n\r\n\t}\r\n\r\n\tconst handleChangePassword = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif (!validCurentPassword || !validNewPassword) {\r\n\t\t\t// if (!validCurentPassword) {\r\n\t\t\t// \tif (!contents.includes({ id: 4, msg: \"Password can't be empty!!!\" })) {\r\n\t\t\t// \t\tsetContents(contents => [...contents, { id: 4, msg: \"Password can't be empty!!!\" }]);\r\n\t\t\t// \t}\r\n\t\t\t// \telse setContents(contents.filter(content => content.id !== 4));\r\n\t\t\t// }\r\n\t\t\t// if (!validNewPassword) {\r\n\t\t\t// \tif (!contents.includes({ id: 5, msg: \"New password can't be empty!!!\" })) {\r\n\t\t\t// \t\tsetContents(contents => [...contents, { id: 5, msg: \"New password can't be empty!!!\" }]);\r\n\t\t\t// \t}\r\n\t\t\t// \telse setContents(contents.filter(content => content.id !== 5));\r\n\t\t\t// }\r\n\t\t\tsetShowSnackBar(true);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst data = {\r\n\t\t\t\tCurrentPassword: currentPassword,\r\n\t\t\t\tNewPassword: newPassword\r\n\t\t\t}\r\n\t\t\tconst res = await fetch(`${API_URL}/users/profile/updatepassword/${userID}`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(data),\r\n\t\t\t});\r\n\r\n\t\t\t// const result = await res.json();\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetShowSnackBar(true);\r\n\t\t\t} else {\r\n\t\t\t\tsetShowSnackBar(true);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n\r\n\t\t\t<Button fullWidth variant=\"outlined\" color=\"secondary\" onClick={handleClickOpen} startIcon={<SaveIcon />}>\r\n\t\t\t\tChange password\r\n            </Button>\r\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n\t\t\t\t<form >\r\n\t\t\t\t\t<DialogTitle id=\"form-dialog-title\">Change password</DialogTitle>\r\n\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t\t\t<Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> Current password:</b> </Typography>\r\n\t\t\t\t\t\t\t{validCurentPassword ?\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<TextField variant=\"outlined\" autoFocus margin=\"normal\" type=\"password\" fullWidth\r\n\t\t\t\t\t\t\tonChange={(event) => { handleCurrentPasswordChange(event.target.value); }}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t\t\t<Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> New password:</b> </Typography>\r\n\t\t\t\t\t\t\t{validNewPassword ?\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<TextField variant=\"outlined\" margin=\"normal\" type=\"password\" fullWidth\r\n\t\t\t\t\t\t\tonChange={(event) => { handleNewPasswordChange(event.target.value); }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Typography>Password must have at least 6 characters</Typography>\r\n\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button onClick={handleChangePassword} color=\"secondary\">\r\n\t\t\t\t\t\t\tUpdate\r\n            </Button>\r\n\t\t\t\t\t\t<Button onClick={handleClose} color=\"primary\">\r\n\t\t\t\t\t\t\tCancel\r\n           </Button>\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t</Dialog>\r\n\t\t</div>\r\n\t);\r\n}\r\n","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ImageUploadDialog\\index.js",["144"],"import React, { useState } from 'react'\r\nimport { DropzoneDialog, DropzoneArea } from 'material-ui-dropzone'\r\nimport Button from '@material-ui/core/Button';\r\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport config from '../../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tmargin: {\r\n\t\tmargin: '20px 0 40px',\r\n\t\talignItems: 'center'\r\n\t}\r\n}));\r\n\r\nexport default function ImageUploadDialog({ setAvatar, setShowErrorSnackBar, setShowSuccessSnackBar }) {\r\n\tconst classes = useStyles();\r\n\tconst userID = localStorage.getItem('userID');\r\n\tconst token = window.localStorage.getItem('jwtToken');\r\n\tconst [open, setOpen] = useState(false);\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t}\r\n\r\n\tconst handleSave = async (files) => {\r\n\r\n\t\tconst data = new FormData();\r\n\t\tdata.append('avatar', files[0]);\r\n\r\n\t\tconst res = await fetch(`${API_URL}/users/profile/updateavatar/${userID}`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t// 'content-type': 'multipart/form-data', // no need\r\n\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t},\r\n\t\t\tbody: data,\r\n\t\t});\r\n\r\n\t\tif (res.status === 200) {\r\n\t\t\tconst result = await res.blob();\r\n\t\t\tsetAvatar(URL.createObjectURL(result));\r\n\t\t\tsetShowSuccessSnackBar(true);\r\n\t\t} else { // 400, etc...\r\n\t\t\tsetShowErrorSnackBar(true);\r\n\t\t}\r\n\t\tsetOpen(false);\r\n\t}\r\n\r\n\tconst handleOpen = () => {\r\n\t\tsetOpen(true);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.margin}>\r\n\t\t\t<Button onClick={handleOpen} variant=\"outlined\" color=\"primary\" component=\"span\" >\r\n\t\t\t\t<AddPhotoAlternateIcon /> Choose another image\r\n            </Button>\r\n\r\n\t\t\t<DropzoneDialog\r\n\t\t\t\t// inputProps={{ name: \"avatar\" }}\r\n\t\t\t\topen={open}\r\n\t\t\t\tonSave={handleSave}\r\n\t\t\t\tacceptedFiles={['image/jpeg', 'image/png', 'image/bmp', 'image/gif']}\r\n\t\t\t\tshowPreviewsInDropzone={true}\r\n\t\t\t\tshowPreviews={false}\r\n\t\t\t\tshowFileNames={true}\r\n\t\t\t\tfilesLimit={1}\r\n\t\t\t\tmaxFileSize={10000000}\r\n\t\t\t\tonClose={handleClose}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}","D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gameitem.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\square.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SnackBar\\snackbar.js",[],"D:\\Github\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ActiveDestination\\index.js",["145","146"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nexport default function ({ socket, isLoggedIn, setIsLoggedIn }) {\r\n\tconst ID = useParams().id;\r\n\tconst history = useHistory();\r\n\tconst [status, setStatus] = useState(\"Activating your account. Please wait a moment ...\")\r\n\tuseEffect(() => {\r\n\t\tasync function active() {\r\n\r\n\t\t\tif (isLoggedIn) {\r\n\t\t\t\thistory.push(\"/\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst res = await fetch(`${API_URL}/active`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: JSON.stringify({ ID }),\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst result = await res.json()\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\talert(result.msg);\r\n\t\t\t\twindow.localStorage.setItem('jwtToken', result.token);\r\n\t\t\t\twindow.localStorage.setItem('userID', result.id);\r\n\t\t\t\twindow.localStorage.setItem('name', result.name);\r\n\r\n\t\t\t\tsocket.emit(`client_LoggedIn`, { userID: result.id });\r\n\t\t\t\tsetIsLoggedIn(true);\r\n\t\t\t\thistory.push(\"/\");\r\n\r\n\t\t\t} else if (res.status === 400) { // already activated or not exist\r\n\t\t\t\t// alert(result.msg);\r\n\t\t\t\tsetStatus(result.msg);\r\n\t\t\t}\r\n\t\t}\r\n\t\tactive();\r\n\t}, [ID])\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Typography>{status}</Typography>\r\n\t\t</>);\r\n}",{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"147","replacedBy":"151"},{"ruleId":"149","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":135,"column":6,"nodeType":"155","endLine":135,"endColumn":17,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":140,"column":73,"nodeType":"159","messageId":"160","endLine":140,"endColumn":75},{"ruleId":"157","severity":1,"message":"158","line":151,"column":73,"nodeType":"159","messageId":"160","endLine":151,"endColumn":75},{"ruleId":"157","severity":1,"message":"158","line":155,"column":73,"nodeType":"159","messageId":"160","endLine":155,"endColumn":75},{"ruleId":"157","severity":1,"message":"158","line":172,"column":73,"nodeType":"159","messageId":"160","endLine":172,"endColumn":75},{"ruleId":"157","severity":1,"message":"158","line":75,"column":73,"nodeType":"159","messageId":"160","endLine":75,"endColumn":75},{"ruleId":"157","severity":1,"message":"158","line":86,"column":73,"nodeType":"159","messageId":"160","endLine":86,"endColumn":75},{"ruleId":"153","severity":1,"message":"161","line":72,"column":6,"nodeType":"155","endLine":72,"endColumn":8,"suggestions":"162"},{"ruleId":"153","severity":1,"message":"163","line":88,"column":6,"nodeType":"155","endLine":88,"endColumn":8,"suggestions":"164"},{"ruleId":"153","severity":1,"message":"165","line":107,"column":6,"nodeType":"155","endLine":107,"endColumn":8,"suggestions":"166"},{"ruleId":"153","severity":1,"message":"167","line":138,"column":6,"nodeType":"155","endLine":138,"endColumn":8,"suggestions":"168"},{"ruleId":"153","severity":1,"message":"169","line":151,"column":6,"nodeType":"155","endLine":151,"endColumn":8,"suggestions":"170"},{"ruleId":"153","severity":1,"message":"171","line":166,"column":6,"nodeType":"155","endLine":166,"endColumn":12,"suggestions":"172"},{"ruleId":"153","severity":1,"message":"173","line":181,"column":6,"nodeType":"155","endLine":181,"endColumn":28,"suggestions":"174"},{"ruleId":"153","severity":1,"message":"175","line":189,"column":6,"nodeType":"155","endLine":189,"endColumn":14,"suggestions":"176"},{"ruleId":"153","severity":1,"message":"177","line":233,"column":6,"nodeType":"155","endLine":233,"endColumn":22,"suggestions":"178"},{"ruleId":"153","severity":1,"message":"179","line":250,"column":6,"nodeType":"155","endLine":250,"endColumn":14,"suggestions":"180"},{"ruleId":"153","severity":1,"message":"181","line":301,"column":6,"nodeType":"155","endLine":301,"endColumn":42,"suggestions":"182"},{"ruleId":"153","severity":1,"message":"183","line":391,"column":6,"nodeType":"155","endLine":391,"endColumn":67,"suggestions":"184"},{"ruleId":"153","severity":1,"message":"185","line":118,"column":6,"nodeType":"155","endLine":118,"endColumn":36,"suggestions":"186"},{"ruleId":"153","severity":1,"message":"185","line":112,"column":6,"nodeType":"155","endLine":112,"endColumn":36,"suggestions":"187"},{"ruleId":"153","severity":1,"message":"188","line":41,"column":6,"nodeType":"155","endLine":41,"endColumn":27,"suggestions":"189"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":27,"nodeType":"192","messageId":"193","endLine":1,"endColumn":36},{"ruleId":"157","severity":1,"message":"158","line":56,"column":70,"nodeType":"159","messageId":"160","endLine":56,"endColumn":72},{"ruleId":"157","severity":1,"message":"158","line":59,"column":70,"nodeType":"159","messageId":"160","endLine":59,"endColumn":72},{"ruleId":"157","severity":1,"message":"158","line":70,"column":70,"nodeType":"159","messageId":"160","endLine":70,"endColumn":72},{"ruleId":"157","severity":1,"message":"158","line":73,"column":70,"nodeType":"159","messageId":"160","endLine":73,"endColumn":72},{"ruleId":"190","severity":1,"message":"194","line":2,"column":26,"nodeType":"192","messageId":"193","endLine":2,"endColumn":38},{"ruleId":"195","severity":1,"message":"196","line":9,"column":1,"nodeType":"197","endLine":51,"endColumn":2},{"ruleId":"153","severity":1,"message":"198","line":46,"column":5,"nodeType":"155","endLine":46,"endColumn":9,"suggestions":"199"},"no-native-reassign",["200"],"no-negated-in-lhs",["201"],["200"],["201"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'token' and 'userID'. Either include them or remove the dependency array.","ArrayExpression",["202"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["203"],"React Hook useEffect has a missing dependency: 'jwtToken'. Either include it or remove the dependency array.",["204"],"React Hook useEffect has missing dependencies: 'history', 'socket', and 'userID'. Either include them or remove the dependency array.",["205"],"React Hook useEffect has a missing dependency: 'History'. Either include it or remove the dependency array.",["206"],"React Hook useEffect has missing dependencies: 'game', 'gameID', and 'getGame'. Either include them or remove the dependency array.",["207"],"React Hook useEffect has missing dependencies: 'getPlayer' and 'userID'. Either include them or remove the dependency array.",["208"],"React Hook useEffect has missing dependencies: 'player' and 'socket'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setXIsNext' needs the current value of 'player'.",["209"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["210"],"React Hook useEffect has missing dependencies: 'game.Player1ID' and 'socket'. Either include them or remove the dependency array.",["211"],"React Hook useEffect has missing dependencies: 'player1.ID' and 'socket'. Either include them or remove the dependency array.",["212"],"React Hook useEffect has missing dependencies: 'getPlayer', 'player2.ID', 'socket', 'updateGameInfo', and 'userID'. Either include them or remove the dependency array.",["213"],"React Hook useEffect has missing dependencies: 'player', 'player1', 'player2.Elo', 'player2.ID', 'updateGameInfo', 'updatePlayersInfo', and 'userID'. Either include them or remove the dependency array.",["214"],"React Hook useEffect has a missing dependency: 'onlineUserListCopy'. Either include it or remove the dependency array. You can also do a functional update 'setOnlineUserListCopy(o => ...)' if you only need 'onlineUserListCopy' in the 'setOnlineUserListCopy' call.",["215"],["216"],"React Hook useEffect has missing dependencies: 'elo', 'gameID', 'isMainPlayer', 'isPlayer2', 'player1', 'player2', 'socket', and 'value'. Either include them or remove the dependency array. If 'setSeconds' needs the current value of 'value', you can also switch to useReducer instead of useState and read 'value' in the reducer.",["217"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'DropzoneArea' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'history', 'isLoggedIn', 'setIsLoggedIn', and 'socket'. Either include them or remove the dependency array. If 'setIsLoggedIn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["218"],"no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"245","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},"Update the dependencies array to be: [setAvatar, token, userID]",{"range":"252","text":"253"},"Update the dependencies array to be: [history]",{"range":"254","text":"255"},"Update the dependencies array to be: [jwtToken]",{"range":"256","text":"257"},"Update the dependencies array to be: [history, socket, userID]",{"range":"258","text":"259"},"Update the dependencies array to be: [History]",{"range":"260","text":"261"},"Update the dependencies array to be: [game, gameID, getGame]",{"range":"262","text":"263"},"Update the dependencies array to be: [game, getPlayer, userID]",{"range":"264","text":"265"},"Update the dependencies array to be: [gameID, isMainPlayer, player, socket]",{"range":"266","text":"267"},"Update the dependencies array to be: [gameID, socket]",{"range":"268","text":"269"},"Update the dependencies array to be: [game.Player1ID, gameID, socket, userID]",{"range":"270","text":"271"},"Update the dependencies array to be: [gameID, player1.ID, socket]",{"range":"272","text":"273"},"Update the dependencies array to be: [gameID, history, chatHistory, game, socket, getPlayer, userID, player2.ID, updateGameInfo]",{"range":"274","text":"275"},"Update the dependencies array to be: [winner, hasWinner, isMainPlayer, history, chatHistory, game, player1, player2.Elo, player2.ID, player, updatePlayersInfo, userID, updateGameInfo]",{"range":"276","text":"277"},"Update the dependencies array to be: [searchString, onlineUserList, onlineUserListCopy]",{"range":"278","text":"279"},{"range":"280","text":"279"},"Update the dependencies array to be: [seconds, isYourTurn, value, isMainPlayer, isPlayer2, elo, socket, gameID, player1, player2]",{"range":"281","text":"282"},"Update the dependencies array to be: [ID, history, isLoggedIn, setIsLoggedIn, socket]",{"range":"283","text":"284"},[4276,4287],"[setAvatar, token, userID]",[2455,2457],"[history]",[2867,2869],"[jwtToken]",[3342,3344],"[history, socket, userID]",[4684,4686],"[History]",[5045,5047],"[game, gameID, getGame]",[5492,5498],"[game, getPlayer, userID]",[5878,5900],"[gameID, isMainPlayer, player, socket]",[6108,6116],"[gameID, socket]",[7766,7782],"[game.Player1ID, gameID, socket, userID]",[8246,8254],"[gameID, player1.ID, socket]",[9616,9652],"[gameID, history, chatHistory, game, socket, getPlayer, userID, player2.ID, updateGameInfo]",[12027,12088],"[winner, hasWinner, isMainPlayer, history, chatHistory, game, player1, player2.Elo, player2.ID, player, updatePlayersInfo, userID, updateGameInfo]",[3470,3500],"[searchString, onlineUserList, onlineUserListCopy]",[2935,2965],[1296,1317],"[seconds, isYourTurn, value, isMainPlayer, isPlayer2, elo, socket, gameID, player1, player2]",[1344,1348],"[ID, history, isLoggedIn, setIsLoggedIn, socket]"]