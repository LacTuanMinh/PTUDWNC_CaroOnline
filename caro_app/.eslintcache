[{"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\index.js":"1","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\App.js":"2","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignIn\\signin.js":"3","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Navbar\\navbar.js":"4","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Profile\\profile.js":"5","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ResetDetination\\index.js":"6","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\PlayedGame\\playedGame.js":"7","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\games.js":"8","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignUp\\signup.js":"9","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Home\\home.js":"10","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ActiveDestination\\index.js":"11","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Footer\\footer.js":"12","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\InvitationDiallog\\index.js":"13","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\game.js":"14","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\board.js":"15","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gamelist.js":"16","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\utils\\helper.js":"17","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SnackBar\\snackbar.js":"18","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\PlayedGamesDialog\\index.js":"19","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\gameServices.js":"20","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Player\\player.js":"21","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Timer\\timer.js":"22","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Secondary.js":"23","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ImageUploadDialog\\index.js":"24","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ChangePasswordDialog\\index.js":"25","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ResetPasswordDialog\\index.js":"26","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\square.js":"27","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gameitem.js":"28","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Primary.js":"29","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Ranking\\index.js":"30"},{"size":423,"mtime":1610120102836,"results":"31","hashOfConfig":"32"},{"size":2868,"mtime":1610483317865,"results":"33","hashOfConfig":"32"},{"size":10880,"mtime":1610303573642,"results":"34","hashOfConfig":"32"},{"size":4607,"mtime":1610120102826,"results":"35","hashOfConfig":"32"},{"size":13875,"mtime":1610120102828,"results":"36","hashOfConfig":"32"},{"size":5926,"mtime":1610120102829,"results":"37","hashOfConfig":"32"},{"size":8643,"mtime":1610350584502,"results":"38","hashOfConfig":"32"},{"size":7074,"mtime":1610120102824,"results":"39","hashOfConfig":"32"},{"size":5908,"mtime":1610120102830,"results":"40","hashOfConfig":"32"},{"size":5284,"mtime":1610120102825,"results":"41","hashOfConfig":"32"},{"size":1433,"mtime":1610120102817,"results":"42","hashOfConfig":"32"},{"size":1279,"mtime":1610120102820,"results":"43","hashOfConfig":"32"},{"size":2468,"mtime":1610481000463,"results":"44","hashOfConfig":"32"},{"size":27461,"mtime":1610483682300,"results":"45","hashOfConfig":"32"},{"size":889,"mtime":1610120102821,"results":"46","hashOfConfig":"32"},{"size":345,"mtime":1610120102824,"results":"47","hashOfConfig":"32"},{"size":1264,"mtime":1610483323408,"results":"48","hashOfConfig":"32"},{"size":1551,"mtime":1610478318410,"results":"49","hashOfConfig":"32"},{"size":4468,"mtime":1610476454122,"results":"50","hashOfConfig":"32"},{"size":7348,"mtime":1610120164298,"results":"51","hashOfConfig":"32"},{"size":1316,"mtime":1610480724822,"results":"52","hashOfConfig":"32"},{"size":624,"mtime":1610478578103,"results":"53","hashOfConfig":"32"},{"size":5747,"mtime":1610120102827,"results":"54","hashOfConfig":"32"},{"size":1958,"mtime":1610120102818,"results":"55","hashOfConfig":"32"},{"size":6651,"mtime":1610120102818,"results":"56","hashOfConfig":"32"},{"size":3799,"mtime":1610120102819,"results":"57","hashOfConfig":"32"},{"size":322,"mtime":1610120102823,"results":"58","hashOfConfig":"32"},{"size":4349,"mtime":1610478779511,"results":"59","hashOfConfig":"32"},{"size":4710,"mtime":1610120102826,"results":"60","hashOfConfig":"32"},{"size":2911,"mtime":1610120102828,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"6ilod4",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"64"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\index.js",[],["138","139"],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\App.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignIn\\signin.js",["140","141","142","143"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport ResetPasswordDialog from '../Dialogs/ResetPasswordDialog';\r\nimport SimpleSnackbar from '../SnackBar/snackbar';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport GoogleIcon from '../../images/google.png';\r\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\r\nimport GoogleLogin from 'react-google-login';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { authen, isBlankString } from '../../utils/helper';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  shadow: {\r\n    boxShadow: '4px 4px 8px 4px rgba(0, 0, 0, 0.2), 4px 6px 20px 4px rgba(0, 0, 0, 0.19)',\r\n  },\r\n  socialLoginButton: {\r\n    display: 'table',\r\n    width: '300px',\r\n    height: '50px',\r\n    fontWeight: 'bolder',\r\n    textAlign: 'center',\r\n    borderRadius: '5px',\r\n    margin: '20px',\r\n    cursor: 'pointer'\r\n  },\r\n  facebook: {\r\n    border: '1px solid  #3b5998',\r\n    backgroundColor: ' #3b5998',\r\n    color: 'white',\r\n  },\r\n  google: {\r\n    border: '1px solid  #f1f3f4',\r\n    backgroundColor: ' #f1f3f4',\r\n    color: 'black',\r\n  }\r\n}));\r\n\r\nfunction SignIn({ socket, isLoggedIn, setIsLoggedIn }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [validUserName, setValidUserName] = useState(false);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [validPassword, setValidPassword] = useState(false);\r\n  const [contents, setContents] = useState([]);\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const status = await authen();\r\n      if (status === 200) {\r\n        history.push('/');\r\n      }\r\n    }\r\n    Authen();\r\n  }, [history]);\r\n\r\n  const handleUsernameChange = (username) => {\r\n    setUsername(username);\r\n    if (isBlankString(username)) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 1), { id: 1, msg: \"Username can't be empty.\" }]);\r\n      setValidUserName(false);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 1));\r\n      setValidUserName(true);\r\n    }\r\n  }\r\n\r\n  const handlePasswordChange = (password) => {\r\n    setPassword(password);\r\n    if (isBlankString(password) || password.length < 6) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 2), { id: 2, msg: \"Pasword can't be empty or shorter than 6 chars\" }]);\r\n      setValidPassword(false);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 2));\r\n      setValidPassword(true);\r\n    }\r\n  }\r\n\r\n  const signUpClicked = () => {\r\n    history.push('/signUp');\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const signIn = async () => {\r\n      const data = {\r\n        username: username,\r\n        password: password\r\n      };\r\n\r\n      if (!validUserName || !validPassword) {\r\n        setShowSnackBar(true);\r\n        return;\r\n      }\r\n\r\n      const res = await fetch(`${API_URL}/signin`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n      const result = await res.json();\r\n      if (res.status === 200) {\r\n        window.localStorage.setItem('jwtToken', result.token);\r\n        window.localStorage.setItem('userID', result.id);\r\n        window.localStorage.setItem('name', result.name);\r\n        socket.emit('client_LoggedIn', { userID: result.id });\r\n        setIsLoggedIn(true);\r\n        history.push(\"/games\");\r\n      } else {\r\n        // alert(result.mesg);\r\n        setContents([{ id: -1, msg: result.msg }]);\r\n        setShowSnackBar(true);\r\n      }\r\n    }\r\n    // call API here\r\n    signIn();\r\n  }\r\n\r\n  const responseFacebook = async (response) => {\r\n\r\n    const data = {\r\n      name: response.name,\r\n      email: response.email,\r\n      id: response.id\r\n    };\r\n\r\n    const res = await fetch(`${API_URL}/auth/socialmedia`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n\r\n    const result = await res.json();\r\n    if (res.status === 200) {\r\n      window.localStorage.setItem('jwtToken', result.token);\r\n      window.localStorage.setItem('userID', result.id);\r\n      window.localStorage.setItem('name', result.name);\r\n      socket.emit('client_LoggedIn', { userID: result.id });\r\n      alert(\"Welcome to our app\");\r\n      setIsLoggedIn(true);\r\n      history.push(\"/\");\r\n    } else {\r\n      // alert(result.mesg);\r\n      setContents([{ id: -1, msg: result.msg }]);\r\n      setShowSnackBar(true);\r\n    }\r\n  }\r\n\r\n  const responseGoogle = async (response) => {\r\n    console.log(response);\r\n\r\n    const data = {\r\n      name: response.profileObj.name,\r\n      email: response.profileObj.email,\r\n      id: response.googleId\r\n    };\r\n    const res = await fetch(`${API_URL}/auth/socialmedia`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n\r\n    const result = await res.json();\r\n    if (res.status === 200) {\r\n      window.localStorage.setItem('jwtToken', result.token);\r\n      window.localStorage.setItem('userID', result.id);\r\n      window.localStorage.setItem('name', result.name);\r\n      socket.emit('client_LoggedIn', { userID: result.id });\r\n      alert(\"Welcome to our app\");\r\n      setIsLoggedIn(true);\r\n      history.push(\"/\");\r\n    } else {\r\n      // alert(result.mesg);\r\n      setContents([{ id: -1, msg: result.msg }]);\r\n      setShowSnackBar(true);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"md\">\r\n      <SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n\r\n      <CssBaseline />\r\n\r\n      <Grid container spacing={6} /*style={{ paddingLeft: '100px', paddingRight: '100px' }}*/>\r\n        <Grid item xs={12} sm={5} md={5} >\r\n          <div className={classes.paper} style={{ marginBottom: '60px' }}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Welcome To Our Page\r\n            </Typography>\r\n            <Link onClick={signUpClicked} variant=\"body2\" style={{ cursor: 'pointer', margin: '10px' }}>\r\n              {\"Don't have an account? Sign up\"}\r\n            </Link>\r\n            <form className={classes.form} onSubmit={handleSubmit}>\r\n              <TextField id=\"username\" name=\"username\" label=\"Username\" variant=\"outlined\"\r\n                margin=\"normal\" required fullWidth autoComplete=\"username\" autoFocus\r\n                onChange={e => handleUsernameChange(e.target.value)}\r\n              />\r\n              <TextField id=\"password\" name=\"password\" label=\"Password\" type=\"password\"\r\n                variant=\"outlined\" margin=\"normal\" required fullWidth autoComplete=\"current-password\"\r\n                onChange={e => handlePasswordChange(e.target.value)}\r\n              />\r\n              <Button className={classes.submit} type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n                Sign In\r\n              </Button>\r\n              <Grid container justify=\"flex-end\">\r\n                <Grid item>\r\n                  <ResetPasswordDialog />\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={2} md={2} style={{ textAlign: 'center', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n          <Divider orientation=\"vertical\" style={{ height: '35vh' }} />\r\n          <span style={{ margin: '15px' }}>OR</span>\r\n          <Divider orientation=\"vertical\" style={{ height: '45vh' }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={5} md={5} style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\r\n          <FacebookLogin\r\n            appId=\"384191462701845\"\r\n            autoLoad={false}\r\n            fields=\"name,email,picture\"\r\n            // onClick={componentClicked}\r\n            callback={responseFacebook}\r\n            render={renderProps => (\r\n              <div className={`${classes.socialLoginButton} ${classes.facebook} ${classes.shadow}`}>\r\n                <Typography onClick={renderProps.onClick} style={{ display: 'table-cell', verticalAlign: 'middle', fontWeight: 'bold' }}> <FacebookIcon style={{ margin: '10px', verticalAlign: 'middle' }} />Sign in with FaceBook</Typography>\r\n              </div>\r\n            )}\r\n          />\r\n          {/* <GoogleLogin\r\n            clientId=\"226602372235-lp2s47icle0bm0c58rnsp58f9a4tuid3.apps.googleusercontent.com\" // clientID này của account: lactuanminh2121\r\n            render={renderProps => (\r\n              <div className={`${classes.socialLoginButton} ${classes.google} ${classes.shadow}`} onClick={renderProps.onClick}>\r\n                <Typography style={{ display: 'table-cell', verticalAlign: 'middle', fontWeight: 'bold' }}>\r\n                  <img src={GoogleIcon} alt=\"Google icon\" style={{ width: '25px', height: '25px', margin: '10px', verticalAlign: 'middle' }} />\r\n                    Sign in with Google\r\n                </Typography>\r\n              </div>)}\r\n            buttonText=\"Login\"\r\n            onSuccess={responseGoogle}\r\n            onFailure={responseGoogle}\r\n            cookiePolicy={'single_host_origin'}\r\n          /> */}\r\n        </Grid>\r\n      </Grid>\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SignIn;","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Navbar\\navbar.js",["144"],"import React, { useEffect } from 'react';\r\nimport { NavLink, useHistory, Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport logo from '../../images/caro.ico';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  navLink: {\r\n    textDecoration: 'none',\r\n    paddingLeft: '5px'\r\n  },\r\n  button: {\r\n    color: 'white',\r\n    background: 'purple'\r\n  },\r\n  logo: {\r\n    width: '25px',\r\n    height: '25px',\r\n    marginRight: '10px'\r\n  }\r\n}));\r\n\r\nexport default function Navbar({ socket, isLoggedIn, setIsLoggedIn }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const userID = localStorage.getItem('userID');\r\n  const token = localStorage.getItem('jwtToken');\r\n\r\n  useEffect(() => {\r\n    function storageChange(event) {\r\n      if (event.key === 'jwtToken') {\r\n        if (event.newValue === null) {\r\n          setIsLoggedIn(false);\r\n          socket.emit('client_LoggedOut', { userID });\r\n          history.push('/signin');\r\n          return;\r\n\r\n        } else {\r\n          setIsLoggedIn(true);\r\n          history.push('/');\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('storage', storageChange);\r\n    return () => {\r\n      window.removeEventListener('storage', storageChange);\r\n    }\r\n  }, []);\r\n\r\n  const logoutButtonClicked = async () => {\r\n    const data = {\r\n      userID\r\n    }\r\n    const res = await fetch(`${API_URL}/users/signout`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    if (res.status === 400) {\r\n      const result = await res.json();\r\n      alert(result.mesg);\r\n\r\n    }\r\n    else { // other status: 200, 401, ...\r\n      setIsLoggedIn(false);\r\n      localStorage.removeItem('jwtToken');\r\n      localStorage.clear();\r\n      history.push('/');\r\n\r\n      if (res.status === 200) // only status 200\r\n      {\r\n        socket.emit('client_LoggedOut', { userID: data.userID });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"static\" color=\"primary\">\r\n        <Toolbar>\r\n          <NavLink to=\"/\" style={{ display: 'inline-block', textDecoration: 'none', color: \"white\" }}>\r\n            <img className={classes.logo} src={logo} alt=\"This is my website logo\"></img>\r\n          </NavLink>\r\n\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap style={{ flex: 1 }}>\r\n            <NavLink to=\"/\" style={{ display: 'inline-block', textDecoration: 'none', color: \"white\" }}>\r\n              Caro Tournament\r\n            </NavLink>\r\n          </Typography>\r\n\r\n          <div>\r\n            <Link to='/' className={classes.navLink}>\r\n              <Button variant=\"contained\" color=\"secondary\">\r\n                Home\r\n              </Button>\r\n            </Link>\r\n            <NavLink to='/games' className={classes.navLink}>\r\n              <Button variant=\"contained\" color=\"secondary\">\r\n                Games\r\n              </Button>\r\n            </NavLink>\r\n\r\n            {isLoggedIn ?\r\n              <React.Fragment>\r\n                <NavLink to='/profile' className={classes.navLink}>\r\n                  <Button variant=\"contained\" color=\"secondary\">\r\n                    Profile\r\n                </Button>\r\n                </NavLink>\r\n                <NavLink to='/' className={classes.navLink}>\r\n                  <Button variant=\"contained\" color=\"secondary\" onClick={logoutButtonClicked}>\r\n                    Sign Out\r\n                </Button>\r\n                </NavLink>\r\n              </React.Fragment> :\r\n              <React.Fragment>\r\n                <NavLink to='/signIn' className={classes.navLink}>\r\n                  <Button variant=\"contained\" color=\"secondary\">\r\n                    Sign In\r\n                </Button>\r\n                </NavLink>\r\n                <NavLink to='/signUp' className={classes.navLink}>\r\n                  <Button variant=\"contained\" color=\"secondary\">\r\n                    Sign Up\r\n                </Button>\r\n                </NavLink>\r\n              </React.Fragment>}\r\n\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Profile\\profile.js",["145","146","147"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ChangePasswordDialog from '../Dialogs/ChangePasswordDialog';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport ImageUploadDialog from '../Dialogs/ImageUploadDialog';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport SimpleSnackbar from '../SnackBar/snackbar';\r\nimport defaultAvatar from '../../images/defaultAvatar.jpg';\r\nimport PlayedGamesDialog from '../Dialogs/PlayedGamesDialog/index';\r\nimport config from '../../constants/config.json';\r\nimport { isBlankString, isEmailPattern, convertISOToDMY } from '../../utils/helper';\r\nimport MedalIcon from '../../images/medal.png';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '25%',\r\n  },\r\n  cardHeader: {\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"black\"//theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '75%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  container: {\r\n    display: 'inline-block',\r\n    width: '100%'\r\n  },\r\n  floatRight: {\r\n    float: \"right\",\r\n    width: '60%'\r\n  },\r\n  floatLeft: {\r\n    float: \"left\",\r\n    width: '40%'\r\n  },\r\n  paperLikeShadow: {\r\n    boxShadow: '0 4px 8px 5px rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n  },\r\n  hidden: {\r\n    display: 'none'\r\n  }\r\n}));\r\n\r\nexport default function Profile() {\r\n  const classes = useStyles();\r\n  const userID = localStorage.getItem('userID');\r\n  const token = localStorage.getItem('jwtToken');\r\n  const history = useHistory();\r\n  const [name, setName] = useState(\"\");\r\n  const [validName, setValidName] = useState(true);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [validEmail, setValidEmail] = useState(true);\r\n  const [dateOfBirth, setDateOfBirth] = useState((new Date()).toISOString());\r\n  const [validDOB, setValidDOB] = useState(true);\r\n  const [avatar, setAvatar] = useState(\"\");\r\n  const [activatedDate, setActivatedDate] = useState((new Date()).toISOString());\r\n  const [info, setInfo] = useState({});\r\n  const [contents, setContents] = useState([]);\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function ComponentWillMount() {\r\n      const res = await fetch(`${API_URL}/users/profile/${userID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        const result = await res.json();\r\n        console.log(result.userInfo);\r\n        setInfo(result.userInfo);\r\n        setName(result.userInfo.Name);\r\n        setEmail(result.userInfo.Email);\r\n        setAvatar(result.userInfo.Avatar);\r\n        setActivatedDate(result.userInfo.ActivatedDate);\r\n        setDateOfBirth(result.userInfo.DateOfBirth);\r\n      } else {\r\n        history.push('/signin');\r\n        return;\r\n      }\r\n    }\r\n    ComponentWillMount();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function retrieveAvatar() {\r\n      const res = await fetch(`${API_URL}/users/avatar/${userID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          ContentType: 'image/jpeg',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        const result = await res.blob();\r\n        setAvatar(URL.createObjectURL(result));\r\n      }\r\n    }\r\n    retrieveAvatar();\r\n  }, [setAvatar]);\r\n\r\n  const handleNameChange = (name) => {\r\n    setName(name);\r\n    if (isBlankString(name)) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 1), { id: 1, msg: \"Name field can't be empty!!!\" }]);\r\n      setValidName(false);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 1));\r\n      setValidName(true);\r\n    }\r\n  }\r\n\r\n  const handleEmailChange = (email) => {\r\n    setEmail(email);\r\n    if (isBlankString(email)) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 2), { id: 2, msg: \"Email field can't be empty!!!\" }]);\r\n      setValidEmail(false);\r\n    }\r\n    else if (!isEmailPattern(email)) {// === false\r\n      setContents(contents => [...contents.filter(content => content.id !== 2), { id: 2, msg: \"Email field doesn't match the email format!!!\" }]);\r\n      setValidEmail(false);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 2));\r\n      setValidEmail(true);\r\n    }\r\n  }\r\n\r\n  const handleDateChange = (date) => {\r\n    setDateOfBirth(date.toISOString());\r\n    const now = new Date().toISOString()\r\n    if (dateOfBirth < now) {\r\n      setContents(contents.filter(content => content.id !== 3));\r\n      setValidDOB(true);\r\n    }\r\n    else {\r\n      setContents(contents => [...contents.filter(content => content.id !== 3), { id: 3, msg: \"Invalid date!!!\" }]);\r\n      setValidDOB(false);\r\n    }\r\n  }\r\n\r\n  const handleSaveChange = async () => {\r\n    if (validDOB && validEmail && validName) {\r\n      const data = {\r\n        Name: name,\r\n        Email: email,\r\n        DateOfBirth: dateOfBirth\r\n      }\r\n      const res = await fetch(`${API_URL}/users/profile/updateinfo/${userID}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      // const result = await res.json();\r\n\r\n      if (res.status === 200) {\r\n\r\n        const infoCopy = JSON.parse(JSON.stringify(info));\r\n\r\n        infoCopy.Name = data.Name;\r\n        infoCopy.Email = data.Email;\r\n        infoCopy.DateOfBirth = data.DateOfBirth;\r\n        setInfo(infoCopy);\r\n        setShowSnackBar(true);\r\n      } else {\r\n        // alert(\"Some error when updating!\")\r\n      }\r\n    } else {\r\n      setShowSnackBar(true);\r\n    }\r\n  }\r\n\r\n  const handleResetInfo = () => {\r\n    setName(info.Name);\r\n    setEmail(info.Email);\r\n    setDateOfBirth(info.DateOfBirth);\r\n    setValidEmail(true);\r\n    setValidName(true);\r\n    setValidDOB(true);\r\n    setContents([]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n      <Container component=\"main\" maxWidth=\"lg\">\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={12} md={6}>\r\n            <div className={classes.paper} style={{ padding: '20px' }}>\r\n              <img height={200} width={200} style={{ borderRadius: '8px' }} className={classes.paperLikeShadow}\r\n                src={avatar ? avatar : defaultAvatar} alt=\"User avatar\"\r\n              />\r\n              <ImageUploadDialog setAvatar={setAvatar} setShowSnackBar={setShowSnackBar} />\r\n              <Card className={classes.paperLikeShadow} style={{ width: '70%' }}>\r\n                <CardHeader\r\n                  title={\r\n                    <Badge color=\"secondary\">\r\n                      <div style={{ display: 'table' }}>\r\n                        <img src={MedalIcon} height=\"40\" width=\"40\" style={{\r\n                          display: 'table-cell',\r\n                          verticalAlign: 'middle',\r\n                          marginRight: '10px'\r\n                        }} />\r\n                        <span style={{ display: 'table-cell', verticalAlign: 'middle', marginLeft: '10px' }}> {info.medal}</span>\r\n                      </div>\r\n                    </Badge>}\r\n                  className={classes.cardHeader}\r\n                />\r\n                <CardContent>\r\n                  {/* <Typography> */}\r\n                  <table style={{ margin: '10px', width: '100%', fontSize: \"20px\" }}>\r\n                    <tbody>\r\n                      <tr key={1}>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold', width: '50%' }}>Elo mark:</td>\r\n                        <td style={{ textAlign: 'center', width: '50%' }}>{info.Elo}</td>\r\n                      </tr>\r\n                      <tr key={2}>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold' }}>Total play(s):</td>\r\n                        <td style={{ textAlign: 'center' }}>{info.PlayCount}</td>\r\n                      </tr>\r\n                      <tr key={3}>\r\n                        <td style={{ textAlign: 'right', fontWeight: 'bold' }}>Winned play(s):</td>\r\n                        <td style={{ textAlign: 'center' }}>{info.WinCount}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <PlayedGamesDialog />\r\n                </CardActions>\r\n              </Card>\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <div className={classes.paper}>\r\n              <Typography component=\"h2\" variant=\"h5\">\r\n                YOUR PROFILE\r\n                <IconButton onClick={handleResetInfo} title=\"Reset information\" color=\"primary\" aria-label=\"add an alarm\" style={{ fontSize: 'large' }} >\r\n                  <ReplayIcon />\r\n                </IconButton>\r\n              </Typography>\r\n              <div className={classes.form} >\r\n\r\n                <div className={classes.container}>\r\n                  <Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> Name:</b> </Typography>\r\n                  {validName ?\r\n                    <></>\r\n                    :\r\n                    <Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n                  }\r\n                </div>\r\n                <TextField variant=\"outlined\" margin=\"normal\" required fullWidth autoFocus\r\n                  placeholder=\"Username\" value={name}\r\n                  onChange={(event) => { handleNameChange(event.target.value); }}\r\n                />\r\n\r\n                <div className={classes.container}>\r\n                  <Typography className={classes.floatLeft} align=\"left\" component=\"h2\"> <b>Email:</b>  </Typography>\r\n                  {validEmail ?\r\n                    <></>\r\n                    :\r\n                    <Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n                  }\r\n                </div>\r\n                <TextField variant=\"outlined\" margin=\"normal\" required fullWidth\r\n                  id=\"email\" name=\"email\" placeholder=\"Email\" value={email}\r\n                  onChange={(event) => { handleEmailChange(event.target.value); }}\r\n                />\r\n\r\n                <div className={classes.container}>\r\n                  <Typography align=\"left\" component=\"h2\" className={classes.floatLeft}>\r\n                    <b>Date of Birth:</b>\r\n                  </Typography>\r\n                  {validDOB ?\r\n                    <></>\r\n                    :\r\n                    <Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n                  }\r\n                </div>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils} >\r\n                  <KeyboardDatePicker\r\n                    // disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"dd/MM/yyyy\"\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-inline\"\r\n                    fullWidth value={dateOfBirth}\r\n                    onChange={handleDateChange}\r\n                    KeyboardButtonProps={{\r\n                      'aria-label': 'change date',\r\n                    }}\r\n                    placeholder=\"Date of Birth\"\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n\r\n                <div className={classes.container}>\r\n                  <Typography align=\"left\" component=\"h2\" className={classes.floatLeft}>\r\n                    <b>Activated date:</b>\r\n                  </Typography>\r\n                  <TextField variant=\"outlined\" margin=\"normal\" required fullWidth\r\n                    placeholder=\"Activated date\" value={convertISOToDMY(activatedDate)} disabled\r\n                  />\r\n                </div>\r\n                <Button type=\"submit\" fullWidth variant=\"outlined\" color=\"primary\" onClick={handleSaveChange}\r\n                  className={classes.submit} startIcon={<SaveIcon />}\r\n                >\r\n                  Save Change\r\n                </Button>\r\n                <Typography align=\"left\" component=\"h2\" style={{ marginTop: 10, marginBottom: 12, fontWeight: 'bold' }}> Passowrd: </Typography>\r\n                <ChangePasswordDialog />\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ResetDetination\\index.js",["148","149","150","151"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport SimpleSnackbar, { InformationSnackbar } from '../SnackBar/snackbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { isBlankString } from '../../utils/helper';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nfunction ResetDestination({ isLoggedIn }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const reqID = useParams().id;\r\n\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [contents, setContents] = useState([]);\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const res = await fetch(`${API_URL}/checkResetRequest`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ ID: reqID }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      if (res.status !== 200) {\r\n        history.push('/');\r\n      }\r\n    };\r\n\r\n    if (isLoggedIn) {\r\n      history.push('/');\r\n      return;\r\n    }\r\n    Authen();\r\n  }, []);\r\n\r\n  const handlePasswordChange = (password) => {\r\n    setPassword(password);\r\n    if (isBlankString(password) || password.length < 6) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 1), { id: 1, msg: \"Password must be longer than 6 chars and not blank.\" }]);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 1));\r\n    }\r\n  }\r\n\r\n  const handleConfirmPasswordChange = (password) => {\r\n    setConfirmPassword(password);\r\n    if (isBlankString(password) || password.length < 6) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 1), { id: 1, msg: \"Password must be longer than 6 chars and not blank.\" }]);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 1));\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (password !== confirmPassword) {\r\n      setContents(contents => [...contents.filter(content => content.id !== 2), { id: 2, msg: \"Confirm password does not match.\" }]);\r\n    } else {\r\n      setContents(contents.filter(content => content.id !== 2));\r\n    }\r\n\r\n    if (contents.length > 0) {\r\n      setShowSnackBar(true);\r\n      return;\r\n    }\r\n    const data = {\r\n      ID: reqID,\r\n      password,\r\n      confirmPassword\r\n    }\r\n\r\n    const res = await fetch(`${API_URL}/resetpassword`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    if (res.status === 200) {\r\n      setContents([]);\r\n      setShowSnackBar(true);\r\n    } else if (res.status === 500) {\r\n      setContents([{ id: -1, msg: result.msg }]);\r\n      setShowSnackBar(true);\r\n    } else if (res.status === 400) {\r\n      history.push('/');\r\n    }\r\n  }\r\n\r\n  const signInClicked = () => {\r\n    history.push('/signIn');\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n\r\n      <CssBaseline />\r\n      <div className={classes.paper} style={{ marginBottom: '60px' }}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\" style={{ color: 'red' }}>\r\n          Reset your password\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <TextField label=\"Password\" variant=\"outlined\"\r\n            margin=\"normal\" required fullWidth autoFocus type=\"password\"\r\n            onChange={e => handlePasswordChange(e.target.value)}\r\n          />\r\n          <TextField id=\"password\" name=\"password\" label=\"Confirm Password\" type=\"password\"\r\n            variant=\"outlined\" margin=\"normal\" required fullWidth\r\n            onChange={e => handleConfirmPasswordChange(e.target.value)}\r\n          />\r\n          <Button className={classes.submit} type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n            Confirm\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link onClick={signInClicked} variant=\"body2\" style={{ cursor: 'pointer ' }}>\r\n                Go to sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      {/* <Box mt={8}>\r\n        <Copyright />\r\n      </Box> */}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ResetDestination;","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\PlayedGame\\playedGame.js",["152","153","154","155","156","157"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport Board from '../Game/board';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { authen } from '../../utils/helper';\r\nimport defaultAvatar from '../../images/defaultAvatar.jpg';\r\nimport { calculateWinner } from '../Game/gameServices';\r\nimport config from '../../constants/config.json';\r\n\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nexport default function PlayedGame() {\r\n  const History = useHistory();\r\n  const userID = localStorage.getItem('userID');\r\n  const gameID = useParams().id;\r\n  const token = localStorage.getItem('jwtToken');\r\n\r\n  const [game, setGame] = useState({});\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [player1Name, setPlayer1Name] = useState(\"\");\r\n  const [player2Name, setPlayer2Name] = useState(\"\");\r\n  const [isAscending, setIsAscending] = useState(true);\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(0).fill(null),\r\n      position: -1\r\n    }\r\n  ]);\r\n  const [player, setPlayer] = useState(\"X\");// X || O\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [avatar1, setAvatar1] = useState(\"\");\r\n  const [avatar2, setAvatar2] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const status = await authen();\r\n      if (status === 401) {\r\n        History.push('/signin');\r\n      }\r\n    }\r\n    Authen();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function retrieveAvatar(ID) {\r\n      const res = await fetch(`${API_URL}/users/avatar/${ID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          ContentType: 'image/jpeg',\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        const result = await res.blob();\r\n        return (URL.createObjectURL(result));\r\n      } else return \"\";\r\n    }\r\n    async function retrieveGameData() {\r\n      const res = await fetch(`${API_URL}/games/playedGameDetail/${gameID}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': \"application/json\",\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      if (res.status === 200) {\r\n        const result = await res.json();\r\n        const game = result.game;\r\n        setGame(game);\r\n        let moves = JSON.parse(game.Moves);\r\n        if (moves.length === 0) {\r\n          moves = [{\r\n            squares: Array(0).fill(null),\r\n            position: -1\r\n          }];\r\n        }\r\n        setHistory(moves);\r\n        setChatHistory(JSON.parse(game.ChatHistory));\r\n        setStepNumber(moves.length - 1);\r\n        setPlayer1Name(result.player1Name);\r\n        setPlayer2Name(result.player2Name);\r\n        setAvatar1(await retrieveAvatar(game.Player1ID));\r\n        setAvatar2(await retrieveAvatar(game.Player2ID));\r\n      }\r\n    }\r\n    retrieveGameData();\r\n  }, [setGame, setHistory, setChatHistory, setAvatar1, setAvatar2]);\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  };\r\n\r\n  const sortButtonClicked = () => {\r\n    setIsAscending(!isAscending);\r\n  };\r\n\r\n  const current = history.slice(stepNumber, stepNumber + 1)[0];\r\n  const winInfo = calculateWinner(current.squares, current.position, game.IsBlockedRule);\r\n  let winner = winInfo.winner; // X or O or null\r\n  const moves = history.map((step, move) => {\r\n    const boardSize = config.boardSize;\r\n    const rowIndex = Math.floor(step.position / boardSize);\r\n    const colIndex = step.position % boardSize;\r\n    const desc = move ? 'Go to move #' + move +\r\n      ' (' + colIndex + ', ' + rowIndex + ')' : 'Go to game start';\r\n    const buttonClassName = (move === stepNumber) ? \"selected-move\" : \"\";\r\n    return (\r\n      <li key={move}>\r\n        <button className={buttonClassName} onClick={() => jumpTo(move)}>{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n  if (!isAscending) {\r\n    moves.reverse();\r\n  }\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  }\r\n  else {\r\n    if (stepNumber === history.length - 1) {\r\n      if (game.Result === 0) {\r\n        status = \"Draw!!!\";\r\n        //window.alert(\"Draw!!!\");\r\n      } else if (game.Result === 1) {\r\n        status = \"Winner: X\";\r\n        winner = \"X\";\r\n      } else if (game.Result === 2) {\r\n        status = \"Winner: O\";\r\n        winner = \"O\";\r\n      }\r\n    }\r\n    else {\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n  }\r\n\r\n  const handleClick = (i) => { return; }\r\n\r\n  return (\r\n    <>\r\n      <div style={{ position: 'relative' }}>\r\n        <div className=\"game\" style={{ marginTop: '25px' }}>\r\n          <div className=\"player-info\">\r\n            <CardHeader title=\"Player Info\"></CardHeader>\r\n            <div style={{ border: `3px solid blue`, maxWidth: '210px', minWidth: '210px' }}>\r\n              <img src={avatar1 ? avatar1 : defaultAvatar}\r\n                style={{ height: '150px', maxWidth: '210px' }}\r\n              />\r\n              <Typography style={{ overflowWrap: 'break-word' }}>Name: {player1Name} {game.Player1ID === userID ? \" (You)\" : null}</Typography>\r\n            </div>\r\n            <br></br>\r\n\r\n            <div style={{ border: `3px solid red`, maxWidth: '210px', minWidth: '210px' }}>\r\n              <img src={avatar2 ? avatar2 : defaultAvatar}\r\n                style={{ height: '150px', maxWidth: '210px' }}\r\n              />\r\n              <Typography>Name: {player2Name} {game.Player2ID === userID ? \" (You)\" : null}</Typography>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"game-board\">\r\n            <CardHeader style={{ padding: '5px' }} title={\"Game name: \" + game.Name}></CardHeader>\r\n            <CardHeader style={{ padding: '5px' }} title={\"Game ID: \" + game.ID}></CardHeader>\r\n            <Board\r\n              key={stepNumber}\r\n              squares={current.squares}\r\n              onClick={i => handleClick(i)}\r\n              winLine={winInfo.winLine}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div className=\"paper-like-shadow\" style={{\r\n              marginTop: '20px',\r\n              marginLeft: '20px',\r\n              minWidth: '320px',\r\n            }}\r\n            >\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel2a-content\"\r\n                  id=\"panel2a-header\"\r\n                >\r\n                  <Typography><b>Chat Messages</b></Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails style={{ display: 'flex', flexDirection: 'column', textAlign: 'left', padding: '20px' }}>\r\n                  {chatHistory.map((item, i) => {\r\n                    return (\r\n                      <div key={i} className=\"chat-item\"\r\n                        style={{\r\n                          color: item.ownerID === null ? 'gray' :\r\n                            (item.ownerID === userID ? 'orange' : 'green')\r\n                        }}\r\n                      >\r\n                        {item.message}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography><b>Gameplay Info</b></Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails style={{ display: 'flex', flexDirection: 'column' }}>\r\n                  {game.IsBlockedRule ? <Typography>Blocked Rule</Typography> : <React.Fragment></React.Fragment>}\r\n\r\n                  <div style={{ color: winner === \"X\" ? 'blue' :  winner === \"O\" ? 'red' : '' }}>{status}</div>\r\n                  <div>\r\n                    <button onClick={() => sortButtonClicked()}>\r\n                      {isAscending ? \"Descending\" : \"Ascending\"}\r\n                    </button>\r\n                  </div>\r\n                  <ol style={{ maxHeight: '200px', overflowY: 'scroll' }}>{moves}</ol>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\games.js",["158","159","160"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { authen, isBlankString } from '../../utils/helper'\r\nimport GameList from './gamelist';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(4, 0, 2),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '25%',\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  fab: {\r\n    width: '35%',\r\n    height: '35%',\r\n    fontSize: '50px',\r\n  }\r\n}));\r\n\r\nfunction Games({ socket }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const userID = localStorage.getItem('userID');\r\n  const jwtToken = window.localStorage.getItem('jwtToken');\r\n  const [open, setOpen] = useState(false);\r\n  const [games, setGames] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(null);\r\n  const [isBlockedRule, setIsBlockedRule] = useState(false);\r\n  const [timeThinkingEachTurn, setTimeThinkingEachTurn] = useState(60);\r\n\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const status = await authen();\r\n      if (status === 401) {\r\n        history.push('/signin')\r\n      }\r\n    }\r\n    Authen();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function getAllGames() {\r\n      const res = await fetch(`${API_URL}/games`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${jwtToken}`\r\n        }\r\n      });\r\n      const result = await res.json();\r\n      // console.log(result);\r\n      setGames(result.games);\r\n    }\r\n    getAllGames();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    socket.on(`newGameFail${userID}`, (data) => {\r\n      alert(data.msg);// game name is empty\r\n    });\r\n\r\n    socket.on(\"server_NewGame\", data => {\r\n      setGames(games => {\r\n        const gamesCopy = games.slice();\r\n        return [data.game].concat(gamesCopy);\r\n      });\r\n      if (data.game.Player1ID === userID) {\r\n        history.push(`/games/${data.game.ID}`);\r\n      }\r\n    })\r\n  }, []);\r\n\r\n  const addGameButtonClicked = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleCreate = async () => {\r\n    const data = {\r\n      name,\r\n      password,\r\n      isBlockedRule,\r\n      timeThinkingEachTurn,\r\n      userID\r\n    }\r\n    // console.log(data);\r\n    if (isBlankString(data.name)) {\r\n      alert('Game name can not be empty');\r\n      return;\r\n    }\r\n    socket.emit('client_NewGame', data);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <main>\r\n        {/* Hero unit */}\r\n        <div className={classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n              Games layout\r\n            </Typography>\r\n          </Container>\r\n        </div>\r\n        <Container className={classes.cardGrid} maxWidth=\"lg\">\r\n          {/* End hero unit */}\r\n          <Grid container spacing={4}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card className={classes.card}>\r\n                <CardMedia className={classes.cardMedia}>\r\n                  <Fab className={classes.fab} color=\"primary\" aria-label=\"Add\"\r\n                    onClick={addGameButtonClicked}>\r\n                    +\r\n                  </Fab>\r\n                </CardMedia>\r\n                <CardContent className={classes.cardContent}>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Create a new game\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <GameList\r\n              games={games}\r\n              socket={socket}\r\n            />\r\n          </Grid>\r\n          <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Game Information</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                Please enter the information for the game\r\n              </DialogContentText>\r\n              <TextField id=\"name\" label=\"Name\" autoFocus margin=\"dense\" required\r\n                fullWidth onChange={e => setName(e.target.value)}\r\n              />\r\n              <TextField id=\"password\" label=\"Password\" margin=\"dense\"\r\n                fullWidth onChange={e => setPassword(e.target.value)}\r\n              />\r\n              <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\r\n                <Typography>\r\n                  Is Blocked Rule\r\n                </Typography>\r\n                <Checkbox onChange={e => setIsBlockedRule(e.target.checked)} />\r\n              </div>\r\n\r\n              <div>\r\n                <Typography style={{ display: \"inline-flex\", alignItems: \"center\" }}>\r\n                  Time to think each turn (seconds)\r\n                </Typography>\r\n                <Select labelId=\"demo-customized-select-label\" id=\"time\" value={timeThinkingEachTurn}\r\n                  style={{ marginLeft: \"10px\" }} onChange={e => setTimeThinkingEachTurn(e.target.value)}\r\n                >\r\n                  <MenuItem value={10}>10</MenuItem>\r\n                  <MenuItem value={30}>30</MenuItem>\r\n                  <MenuItem value={60}>60</MenuItem>\r\n                  <MenuItem value={90}>90</MenuItem>\r\n                </Select>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={handleCreate} color=\"secondary\">\r\n                Create\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Container>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Games;","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SignUp\\signup.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Home\\home.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\ActiveDestination\\index.js",["161"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport config from '../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nexport default function ActiveDestination({ socket, isLoggedIn, setIsLoggedIn }) {\r\n\tconst ID = useParams().id;\r\n\tconst history = useHistory();\r\n\tconst [status, setStatus] = useState(\"Activating your account. Please wait a moment ...\")\r\n\tuseEffect(() => {\r\n\t\tasync function active() {\r\n\r\n\t\t\tif (isLoggedIn) {\r\n\t\t\t\thistory.push(\"/\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst res = await fetch(`${API_URL}/active`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: JSON.stringify({ ID }),\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst result = await res.json()\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\talert(result.msg);\r\n\t\t\t\twindow.localStorage.setItem('jwtToken', result.token);\r\n\t\t\t\twindow.localStorage.setItem('userID', result.id);\r\n\t\t\t\twindow.localStorage.setItem('name', result.name);\r\n\r\n\t\t\t\tsocket.emit(`client_LoggedIn`, { userID: result.id });\r\n\t\t\t\tsetIsLoggedIn(true);\r\n\t\t\t\thistory.push(\"/\");\r\n\r\n\t\t\t} else if (res.status === 400) { // already activated or not exist\r\n\t\t\t\t// alert(result.msg);\r\n\t\t\t\tsetStatus(result.msg);\r\n\t\t\t}\r\n\t\t}\r\n\t\tactive();\r\n\t}, [ID])\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Typography>{status}</Typography>\r\n\t\t</>);\r\n}","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Footer\\footer.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\InvitationDiallog\\index.js",["162","163"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function InvitationDialog({ socket }) {\r\n  const userID = localStorage.getItem('userID');\r\n  const history = useHistory();\r\n  const [open, setOpen] = useState(false);\r\n  const [hostName, setHostName] = useState(\"\");\r\n  const [gameID, setGameID] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    socket.on(`invite_${userID}`, data => {\r\n      setHostName(data.hostName);\r\n      setGameID(data.gameID);\r\n      setOpen(true);\r\n    });\r\n  }, [userID]);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setHostName(\"\");\r\n    setGameID(\"\")\r\n  };\r\n\r\n  const handleJoinGame = () => {\r\n    setOpen(false);\r\n    history.push('/games/' + gameID);\r\n    socket.emit(\"join_game\", { gameID: gameID, userID });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Slide in alert dialog\r\n      </Button> */}\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">Invitation</DialogTitle>\r\n        <DialogContent >\r\n          <DialogContentText id=\"alert-dialog-slide-description\" style={{ fontSize: '18px' }}>\r\n            <b>{hostName}</b> wants you to join the room\r\n            <br />\r\n            {gameID}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleJoinGame} color=\"secondary\">\r\n            Agree\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Disagree\r\n          </Button>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\game.js",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181"],"import React, { useState, useEffect } from 'react';\r\nimport { Prompt } from 'react-router';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SendMessageIcon from '@material-ui/icons/Send';\r\nimport Button from '@material-ui/core/Button';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport Board from './board';\r\nimport Player from '../Player/player';\r\nimport Timer from '../Timer/timer';\r\nimport { calculateWinner, calculateElo } from './gameServices';\r\nimport OnlineUsers from '../OnlineUsers/onlineUsers_Secondary';\r\nimport { authen } from '../../utils/helper';\r\nimport config from '../../constants/config.json';\r\nimport { InformationSnackbar } from '../SnackBar/snackbar';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nfunction Game({ socket, onlineUserList }) {\r\n  const pathTokensArray = window.location.toString().split('/');\r\n  const gameID = pathTokensArray[pathTokensArray.length - 1];\r\n  const name = localStorage.getItem('name');\r\n  const userID = localStorage.getItem('userID');\r\n  const jwtToken = window.localStorage.getItem('jwtToken');\r\n  const History = useHistory();\r\n\r\n  const [start, setStart] = useState(false);\r\n  const [hasWinner, setHasWinner] = useState(false);\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [chatItemMessage, setChatItemMessage] = useState(\"\");\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(0).fill(null),\r\n      position: -1\r\n    }\r\n  ]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [isAscending, setIsAscending] = useState(true);\r\n  const [game, setGame] = useState({});\r\n  const [player1, setPlayer1] = useState({});// when the game has had 2 mainplayer, the 'user' term in others system is observer (cant not play game)\r\n  const [player2, setPlayer2] = useState({\r\n    Name: \"Waiting for opponent\",\r\n    Elo: 0\r\n  });\r\n  const [observers, setObservers] = useState([]);\r\n  const [isMainPlayer, setIsMainPlayer] = useState(false);\r\n  const [isYourTurn, setIsYourTurn] = useState(true);\r\n  const [player, setPlayer] = useState(\"X\");// X || O\r\n  const [player1Ready, setPlayer1Ready] = useState(false);\r\n  const [player2Ready, setPlayer2Ready] = useState(false);\r\n  const [counter, setCounter] = useState(null);\r\n  const [content, setContent] = useState(\"\");\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n  const [requestDialogOpen, setRequestDialogOpen] = useState(false);\r\n  const [dialogTitle, setDialogTitle] = useState(\"\");\r\n\r\n  async function getPlayer(id) {\r\n    const res = await fetch(`${API_URL}/users/get/${id}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n\r\n    setPlayer1(result.player1);\r\n  }\r\n\r\n  async function getGame(gameID) {\r\n    const res = await fetch(`${API_URL}/games/get/${gameID}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${jwtToken}`\r\n      }\r\n    });\r\n    const result = await res.json();\r\n    console.log(result);\r\n    setGame(result.game);\r\n  }\r\n\r\n  // update user info\r\n  // async function updatePlayersInfo(data) {\r\n  //   const res = await fetch(`${API_URL}/users/update`, {\r\n  //     method: 'POST',\r\n  //     body: JSON.stringify(data),\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //       Authorization: `Bearer ${jwtToken}`\r\n  //     }\r\n  //   });\r\n  //   const result = await res.json();\r\n  //   console.log(result);\r\n  //   if (res.status === 200) {\r\n  //     console.log(result.msg);\r\n  //     setPlayer1(result.player1);\r\n  //     setPlayer2(result.player2);\r\n  //   }\r\n  //   else {\r\n  //     window.alert(result.msg);\r\n  //   }\r\n  // }\r\n\r\n  // async function updateGameInfo(data) {\r\n  //   const res = await fetch(`${API_URL}/games/update`, {\r\n  //     method: 'POST',\r\n  //     body: JSON.stringify(data),\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //       Authorization: `Bearer ${jwtToken}`\r\n  //     }\r\n  //   });\r\n  //   const result = await res.json();\r\n  //   console.log(result);\r\n  //   if (res.status === 200) {\r\n  //     // console.log(result.msg);\r\n  //     setGame(result.game);\r\n  //   }\r\n  //   else {\r\n  //     window.alert(result.msg);\r\n  //   }\r\n  // }\r\n\r\n  // authen when component mount\r\n  useEffect(() => {\r\n    async function Authen() {\r\n      const status = await authen();\r\n      if (status === 401) {\r\n        History.push('/signin');\r\n      }\r\n    }\r\n    Authen();\r\n  }, []);\r\n\r\n  // get game info when component mount\r\n  useEffect(() => {\r\n    if (game) { // if (game === {})\r\n      console.log(\"Game setup\");\r\n      getGame(gameID);\r\n    }\r\n  }, []);\r\n\r\n  // get player info when component mount\r\n  useEffect(() => {\r\n    if (!game.Result) { // if (game.Result == null)\r\n      if (game.Player1ID === userID || game.Player2ID === userID) { // if (player === {})\r\n        if (game.Player1ID === userID) {\r\n          console.log(\"IM THE 1ST\");\r\n        }\r\n        if (game.Player2ID === userID) {\r\n          console.log(\"IM THE 2ND\");\r\n        }\r\n        getPlayer(userID);\r\n      }\r\n    }\r\n  }, [game]);\r\n\r\n  // set game status (can start?) depends on 'youreReady' and 'opponentReady'\r\n  useEffect(() => {\r\n    if (player1Ready && player2Ready && isMainPlayer) {\r\n      socket.emit(\"game_started\", {\r\n        gameID,\r\n        player1ID: game.Player1ID,\r\n        elo: calculateElo(player1.Elo, player2.Elo)\r\n      });\r\n    }\r\n  }, [player1Ready, player2Ready, isMainPlayer]);\r\n\r\n  useEffect(() => {\r\n    console.log('game really stared');\r\n    socket.on(`game_started_${gameID}`, (data) => {\r\n      setStart(true);\r\n      setCounter(data.counter);\r\n      if (userID === data.player1ID) {\r\n        setContent(\"It's your turn\");\r\n        setShowSnackBar(true);\r\n      }\r\n    });\r\n  }, [gameID, userID]);\r\n\r\n  // load moves\r\n  useEffect(() => {\r\n    socket.on(`load_moves_${gameID}`, data => {\r\n      console.log(\"load_moves\");\r\n      setHistory(data.history);\r\n      setStepNumber(data.history.length - 1);\r\n      setXIsNext(data.player === \"X\");\r\n      setCounter(data.counter);\r\n      setIsYourTurn(data.isYourTurn);\r\n      if (isMainPlayer) {\r\n        setContent(\"It's your turn\");\r\n        setShowSnackBar(true);\r\n      }\r\n    });\r\n  }, [gameID, userID, isMainPlayer]);\r\n\r\n  // load chat\r\n  useEffect(() => {\r\n    socket.on(`load_chat_${gameID}`, data => {\r\n      console.log(\"load_chat\");\r\n      setChatHistory(chatHistory => [...chatHistory, data.message]);\r\n    });\r\n  }, [gameID]);\r\n\r\n  //get notified when someone enter the room\r\n  useEffect(() => {\r\n    socket.on(`notify_join_game_${gameID}`, data => {\r\n      console.log(`notify_join_game_${gameID}`);\r\n      console.log(data);\r\n\r\n      setObservers(data.observers);\r\n\r\n      if (data.isMainPlayer) {\r\n        // player1 (who creates the game) moves first\r\n        setIsYourTurn(userID === data.player1.ID ? true : false);\r\n        setPlayer(userID === data.player1.ID ? \"X\" : \"O\");\r\n        if (userID === data.player1.ID) {\r\n          setPlayer1(data.player1);\r\n          setPlayer2(data.player2);\r\n        } else {\r\n          setPlayer1(data.player2);\r\n          setPlayer2(data.player1);\r\n        }\r\n        setIsMainPlayer(data.isMainPlayer);// default is false, now set to true\r\n        setChatHistory(data.chatHistory);\r\n      } else { // is not main players\r\n        console.log(\"IM A VIEWER\");\r\n        setChatHistory(data.chatHistory);\r\n\r\n        if (userID !== data.player1.ID && userID !== data.player2.ID) {\r\n          // chặn 2 màn hình người choi8 chính cập nhật màn hình khi khán giả vào phòng\r\n          if (data.player1.ID === data.game.Player1ID && data.player2.ID === data.game.Player2ID) {\r\n            setPlayer1(data.player1);\r\n            setPlayer2(data.player2);\r\n          }\r\n          else {\r\n            setPlayer1(data.player2);\r\n            setPlayer2(data.player1);\r\n          }\r\n          setPlayer1Ready(data.player1Ready);\r\n          setPlayer2Ready(data.player2Ready);\r\n\r\n          if (data.game.Status === 2) {\r\n            console.log(data);\r\n            setHistory(data.moves);\r\n            setStepNumber(data.moves.length - 1);\r\n            setXIsNext(data.isXTurn);\r\n            setIsYourTurn(data.isXTurn);\r\n            setStart(true);\r\n            setCounter(data.counter);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }, [gameID, userID]);\r\n\r\n  // player 2 & observer get info from player1 (owner)\r\n  useEffect(() => {\r\n    socket.on(`I_need_game_info_${gameID}_${userID}`, (data) => {\r\n      socket.emit(`I_provide_game_info`, {\r\n        gameID,\r\n        userID: data.userID,\r\n        chatHistory: chatHistory,\r\n        moves: history,\r\n        player1Ready,\r\n        player2Ready,\r\n      });\r\n    });\r\n  }, [gameID, userID, chatHistory, history]);\r\n\r\n  // for observer to get game info\r\n  useEffect(() => {\r\n    socket.on(`receive_your_data_${gameID}_${userID}`, data => {\r\n      setChatHistory(data.chatHistory);\r\n      setHistory(data.moves);\r\n    });\r\n  }, [gameID, userID]);\r\n\r\n  //player ready\r\n  useEffect(() => {\r\n    socket.on(`ready_${gameID}`, data => {\r\n      if (data.player2.ID === userID) {\r\n        console.log(\"player2 ready\");\r\n        setPlayer2Ready(data.player1.player1Ready);\r\n      }\r\n      else {\r\n        if (data.player1.ID === data.game.Player1ID) {\r\n          console.log(\"player1 ready\");\r\n          setPlayer1Ready(data.player1.player1Ready);\r\n        }\r\n        else {\r\n          console.log(\"player2 ready\");\r\n          setPlayer2Ready(data.player1.player1Ready);\r\n        }\r\n      }\r\n      // setPlayer2Ready(data.value);\r\n    });\r\n  }, [userID, gameID]);\r\n\r\n  // time up\r\n  useEffect(() => {\r\n    socket.on(`time_up_${gameID}`, data => {\r\n      console.log(\"time up\", data);\r\n\r\n      if (userID === data.player1.ID) {\r\n        setPlayer1(data.player1);\r\n        setPlayer2(data.player2);\r\n      }\r\n      else {\r\n        setPlayer1(data.player2);\r\n        setPlayer2(data.player1);\r\n      }\r\n\r\n      if (data.winner === 'X') {\r\n        let message = `${data.player1.Name} has won ${data.elo} Elo\\n. ${data.player2.Name} has lost ${data.elo} Elo`;\r\n        setContent(message);\r\n        setShowSnackBar(true);\r\n      } else {\r\n        let message = `${data.player2.Name} has won ${data.elo} Elo\\n${data.player1.Name} has lost ${data.elo} Elo`;\r\n        setContent(message);\r\n        setShowSnackBar(true);\r\n      }\r\n\r\n      setHasWinner(true);\r\n      setPlayer1Ready(false);\r\n      setPlayer2Ready(false);\r\n    });\r\n  }, [gameID, userID]);\r\n\r\n  useEffect(() => {\r\n    socket.on(`game_over_${gameID}`, data => {\r\n      if (userID === data.player1.ID) {\r\n        setPlayer1(data.player1);\r\n        setPlayer2(data.player2);\r\n      }\r\n      else {\r\n        setPlayer1(data.player2);\r\n        setPlayer2(data.player1);\r\n      }\r\n\r\n      if (data.winner === 'X') {\r\n        let message = `${data.player1.Name} has won ${data.elo} Elo\\n. ${data.player2.Name} has lost ${data.elo} Elo`;\r\n        setContent(message);\r\n        setShowSnackBar(true);\r\n      } else if (data.winner === 'O') {\r\n        let message = `${data.player2.Name} has won ${data.elo} Elo\\n. ${data.player1.Name} has lost ${data.elo} Elo`;\r\n        setContent(message);\r\n        setShowSnackBar(true);\r\n      } else {\r\n        // draw\r\n        let message = `Draw!!! ${data.player1.Name} and ${data.player2.Name} got +1 Elo`;\r\n        setContent(message);\r\n        setShowSnackBar(true);\r\n      }\r\n\r\n      setHasWinner(true);\r\n      setPlayer1Ready(false);\r\n      setPlayer2Ready(false);\r\n      setStart(false);\r\n      setCounter(0);\r\n    })\r\n  }, []);\r\n\r\n  const handleClick = (i) => {\r\n    if (!isMainPlayer)// chỉ là khán giả thì ko click được\r\n      return;\r\n\r\n    if (!start)\r\n      return;\r\n\r\n    const newHistory = history.slice(0, stepNumber + 1);\r\n    const current = newHistory[newHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (hasWinner || squares[i] || !isYourTurn) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(newHistory.concat([\r\n      {\r\n        squares: squares,\r\n        position: i\r\n      }\r\n    ]));\r\n    setStepNumber(newHistory.length);\r\n    setXIsNext(!xIsNext);\r\n    setIsYourTurn(!isYourTurn);\r\n    setCounter(game.TimeThinkingEachTurn);\r\n    //ok\r\n    socket.emit(\"move\", {\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          position: i\r\n        }\r\n      ]),//\r\n      isXTurn: !xIsNext,//\r\n      player: xIsNext ? \"O\" : \"X\",\r\n      playerID: userID,\r\n      opponentID: player2.ID,\r\n      gameID,\r\n      isBlockedRule: game.isBlockedRule,\r\n      // game,\r\n      isYourTurn\r\n    });\r\n  }\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  };\r\n\r\n  const sortButtonClicked = () => {\r\n    setIsAscending(!isAscending);\r\n  };\r\n\r\n  const current = history.slice(stepNumber, stepNumber + 1)[0];\r\n  const winInfo = calculateWinner(current.squares, current.position, game.IsBlockedRule);\r\n  const winner = winInfo.winner; // X or O\r\n\r\n  // prevent from playing when there's a winner\r\n  useEffect(() => {\r\n    setHasWinner(winner !== null);\r\n  }, [winner]);\r\n\r\n  // useEffect(() => {\r\n\r\n  //   if (hasWinner) {\r\n  //     setPlayer2Ready(false);\r\n  //     setPlayer1Ready(false);\r\n  //   }\r\n\r\n  //   if (isMainPlayer && hasWinner) {\r\n  //     // if (!game.Result) {\r\n  //     //   const elo = calculateElo(player1.Elo, player2.Elo);\r\n  //     //   const win = player === winner;\r\n  //     //   const msg = (win ? \"You win\\n+\" : \"You lose\\n-\") + elo + \" elo\";\r\n  //     //   const data = {\r\n  //     //     player1,\r\n  //     //     win: win,\r\n  //     //     elo: elo,\r\n  //     //     player2ID: player2.ID\r\n  //     //   }\r\n  //     //   updatePlayersInfo(data);\r\n\r\n  //     //   const gameData = {\r\n  //     //     game,\r\n  //     //     player2ID: userID === game.Player1ID ? player2.ID : userID,\r\n  //     //     result: (win && userID === game.Player1ID) || (!win && userID === game.Player2ID) ? 1 : 2,\r\n  //     //     status: 0,\r\n  //     //     moves: JSON.stringify(history),\r\n  //     //     chatHistory: JSON.stringify(chatHistory)\r\n  //     //   }\r\n  //     //   updateGameInfo(gameData);\r\n\r\n  //     //   alert(msg);\r\n  //     // }\r\n\r\n  //     // emit to update players info for observers\r\n\r\n\r\n  //     // emit tới server để xóa game này khỏi game layout của những người chơi khác\r\n\r\n\r\n  //     // setStart(false);\r\n  //     // setHasWinner(false);\r\n  //   }\r\n  // }, [winner, isMainPlayer, history, chatHistory, game]);\r\n\r\n  const moves = history.map((step, move) => {\r\n    const boardSize = config.boardSize;\r\n    const rowIndex = Math.floor(step.position / boardSize);\r\n    const colIndex = step.position % boardSize;\r\n    const desc = move ? 'Go to move #' + move +\r\n      ' (' + colIndex + ', ' + rowIndex + ')' : 'Go to game start';\r\n    const buttonClassName = (move === stepNumber) ? \"selected-move\" : \"\";\r\n    return (\r\n      <li key={move}>\r\n        <button className={buttonClassName} disabled onClick={() => jumpTo(move)}>{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  if (!isAscending) {\r\n    moves.reverse();\r\n  }\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  }\r\n  else {\r\n    if (winInfo.isDraw) {\r\n      status = \"Draw!!!\";\r\n      window.alert(\"Draw!!!\");\r\n    }\r\n    else {\r\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n  }\r\n\r\n  const handleChat = (e) => {\r\n    e.preventDefault();\r\n\r\n    setChatHistory(chatHistory => chatHistory.slice().concat([\r\n      {\r\n        ownerID: userID,\r\n        message: name + ': ' + chatItemMessage\r\n      }\r\n    ]));\r\n\r\n    socket.emit(\"chat\", {\r\n      message: {\r\n        ownerID: userID,\r\n        message: name + ': ' + chatItemMessage\r\n      },\r\n      gameID\r\n    });\r\n    setChatItemMessage(\"\");\r\n  }\r\n\r\n  const handleReady = () => {\r\n    setPlayer1Ready(!player1Ready);\r\n    socket.emit(\"ready\", {\r\n      gameID,\r\n      userID,\r\n      game,\r\n      player1: { ID: player1.ID, player1Ready: !player1Ready },\r\n      player2: { ID: player2.ID, player2Ready: player2Ready }\r\n    });\r\n  }\r\n\r\n  const handleDrawRequest = () => {\r\n    setContent(\"Your request has been sent, please wait for respond\");\r\n    setShowSnackBar(true);\r\n    socket.emit(\"draw_request\", { gameID, to: player2.ID });\r\n  }\r\n\r\n  const handleSurrenderRequest = () => {\r\n    setContent(\"Your request has been sent, please wait for respond\");\r\n    setShowSnackBar(true);\r\n    socket.emit(\"surrender_request\", { gameID, to: player2.ID });\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on(`received_draw_request_${gameID}`, data => {\r\n      if (data.to === userID) {\r\n        setDialogTitle(player2.Name + \" want a draw\");\r\n        setRequestDialogOpen(true);\r\n      }\r\n    });\r\n  }, [gameID, player2.Name]);\r\n\r\n  useEffect(() => {\r\n    socket.on(`received_surrender_request_${gameID}`, data => {\r\n      if (data.to === userID) {\r\n        setDialogTitle(player2.Name + \" want to surrender\");\r\n        setRequestDialogOpen(true);\r\n      }\r\n    });\r\n  }, [gameID, player2.Name]);\r\n\r\n  const handleCloseRequest = () => {\r\n    setRequestDialogOpen(false);\r\n    socket.emit(\"deny_request\", { gameID, to: player2.ID });\r\n  }\r\n\r\n  const handleAcceptRequest = () => {\r\n    const tokens = dialogTitle.split(' ');\r\n    socket.emit(\"accept_request\", {\r\n      gameID,\r\n      to: player2.ID,\r\n      elo: calculateElo(player1.Elo, player2.Elo),\r\n      drawOrSurrender: tokens[tokens.length - 1]\r\n    });\r\n    setRequestDialogOpen(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on(`request_denied_${gameID}`, data => {\r\n      if (data.to === userID) {\r\n        setContent(\"Your request has been denied\");\r\n        setShowSnackBar(true);\r\n      }\r\n    });\r\n  }, [gameID]);\r\n\r\n\r\n  /*opponent leave\r\n    useEffect(() => {\r\n      socket.on(`opponent_leave_game_${gameID}`, data => {\r\n        console.log(\"opponent_leave_game\");\r\n        setUser(data.user);\r\n      });\r\n    }, [gameID]);\r\n  \r\n    owner of the game leaves game\r\n    useEffect(() => {\r\n      socket.on(`owner_leave_game_${gameID}`, data => {\r\n        console.log(\"owner_leave_game\");\r\n        console.log(data);\r\n        setPlayer(\"X\");\r\n        setOpponentReady(false);\r\n        setYoureReady(false);\r\n        setOpponent({\r\n          Name: \"Waiting for opponent\",\r\n          Elo: 0\r\n        });\r\n        setGame(data.game);\r\n      });\r\n    }, [gameID]);*/\r\n  \r\n  // useEffect(() => {\r\n  //   window.addEventListener('beforeunload', alertUser);\r\n  //   window.addEventListener('unload', handleEndConcert);\r\n  //   return () => {\r\n  //     window.removeEventListener('beforeunload', alertUser);\r\n  //     window.removeEventListener('unload', handleEndConcert);\r\n  //     handleEndConcert(game, player2);\r\n  //   }\r\n  // }, [game, player2]);\r\n\r\n  const alertUser = e => {\r\n    e.preventDefault();\r\n    e.returnValue = 'BYE';\r\n    window.alert('You are reload the page!!!');\r\n  }\r\n\r\n  const handleEndConcert = (game, player2) => {\r\n    // if (start) {\r\n    //   const elo = calculateElo(user.Elo, player2.Elo);\r\n    //   const win = !isYourTurn;\r\n    //   const msg = (win ? \"You win\\n+\" : \"You lose\\n-\") + elo + \" elo\";\r\n    //   //socket.emit(\"leave_game\", { player1, player2, gameID, elo });\r\n    //   window.alert(msg);\r\n    // }\r\n    // else {\r\n    //   // leave game when the game is not starting yet\r\n    //   // reset owner of the game if the owner leaves\r\n    //   if (userID === game.Player1ID && player2.ID && !game.Result) {\r\n    //     console.log(\"emit owner leave game\");\r\n    //     console.log(game);\r\n    //     console.log(player2.ID);\r\n    //     socket.emit(\"owner_leave_game\", { game, userID, player2ID: player2.ID });\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  const handleURLChangeWhenPlayingGame = () => {\r\n    \r\n  }\r\n\r\n  const opponent = player === \"X\" ? \"O\" : \"X\";\r\n  const element = (\r\n    <React.Fragment>\r\n      <Prompt\r\n        when={true}\r\n        message={() => handleURLChangeWhenPlayingGame()}\r\n      />\r\n      <InformationSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} content={content} />\r\n\r\n      <Dialog open={requestDialogOpen} onClose={handleCloseRequest} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">{dialogTitle}</DialogTitle>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseRequest} color=\"primary\">\r\n            Deny\r\n          </Button>\r\n          <Button onClick={handleAcceptRequest} color=\"primary\">\r\n            Accept\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <div style={{ position: 'relative' }}>\r\n        <div style={{ position: 'absolute', zIndex: '1', width: '100%' }}>\r\n          <OnlineUsers socket={socket} gameID={gameID} onlineUserList={onlineUserList} observers={observers} />\r\n        </div>\r\n        <div className=\"game\" style={{ marginTop: '25px' }}>\r\n          <div className=\"player-info\">\r\n            <CardHeader title=\"Player Info\"></CardHeader>\r\n            <Player player={player2} xOrO={opponent} />\r\n            {/* game not started and game result is null*/}\r\n            {start || hasWinner ? <React.Fragment></React.Fragment> :\r\n              <Typography style={{ margin: \"10px\", color: \"darkgreen\" }}>\r\n                {player2Ready ? 'Ready' : 'Not Ready'}\r\n              </Typography>\r\n            }\r\n            <br></br>\r\n            <Timer\r\n              counter={counter}\r\n              setCounter={setCounter}\r\n            />\r\n            {start && isMainPlayer ?\r\n              <div style={{ display: 'flex' }}>\r\n                <Button color=\"primary\" variant=\"contained\" style={{ marginRight: '5px' }}\r\n                  onClick={handleDrawRequest}\r\n                >\r\n                  Draw\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" onClick={handleSurrenderRequest}>\r\n                  Surrrender\r\n                </Button>\r\n              </div> :\r\n              <React.Fragment></React.Fragment>\r\n            }\r\n            <br></br>\r\n\r\n            <Player player={player1} xOrO={player} />\r\n\r\n            {start || hasWinner ? <React.Fragment></React.Fragment> :\r\n              (isMainPlayer && player1.ID ?\r\n                // là người chơi chính thì hiện nút để ready or cancel\r\n                (player2.ID ?\r\n                  <Button style={{ margin: \"10px\" }} variant=\"contained\" color=\"primary\"\r\n                    onClick={handleReady}\r\n                  >\r\n                    {player1Ready ? \"Cancel\" : \"Ready\"}\r\n                  </Button> : <React.Fragment></React.Fragment>\r\n                ) :\r\n                <Typography style={{ margin: \"10px\", color: \"darkgreen\" }}>\r\n                  {player1Ready ? 'Ready' : 'Not Ready'}\r\n                </Typography>\r\n              )\r\n            }\r\n          </div>\r\n\r\n          <div className=\"game-board\">\r\n            <CardHeader style={{ padding: '5px' }} title={\"Game name: \" + game.Name}></CardHeader>\r\n            <CardHeader style={{ padding: '5px' }} title={\"Game ID: \" + game.ID}></CardHeader>\r\n            <Board\r\n              key={stepNumber}\r\n              squares={current.squares}\r\n              onClick={i => handleClick(i)}\r\n              winLine={winInfo.winLine}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div className=\"chat-box\" >\r\n              <CardHeader title=\"Chat Box\"></CardHeader>\r\n              <Card style={{ boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)', width: '100%', minHeight: '200px', maxHeight: '200px', overflowY: 'scroll' }}>\r\n                {chatHistory.map((item, i) => {\r\n                  return (\r\n                    <div key={i} className=\"chat-item\"\r\n                      style={{\r\n                        color: item.ownerID === null ? 'gray' :\r\n                          (item.ownerID === userID ? 'orange' : 'green')\r\n                      }}\r\n                    >\r\n                      {item.message}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </Card>\r\n              <form className=\"form\" onSubmit={handleChat}>\r\n                <TextField id=\"message\" name=\"message\" label=\"Message\" variant=\"outlined\" size=\"small\"\r\n                  margin=\"normal\" required fullWidth autoFocus value={chatItemMessage}\r\n                  onChange={e => setChatItemMessage(e.target.value)}\r\n                />\r\n                <IconButton className=\"submit-button\" size=\"small\" type=\"submit\" color=\"primary\">\r\n                  <SendMessageIcon />\r\n                </IconButton>\r\n              </form>\r\n            </div>\r\n\r\n            <div className=\"paper-like-shadow\" style={{ marginTop: '20px', marginLeft: '20px', minWidth: '320px' }}\r\n            >\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography><b>Gameplay Info</b></Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails style={{ display: 'flex', flexDirection: 'column' }}>\r\n                  {game.IsBlockedRule ? <Typography>Blocked Rule</Typography> : <React.Fragment></React.Fragment>}\r\n\r\n                  <div>{status}</div>\r\n                  <div>\r\n                    <button onClick={() => sortButtonClicked()}>\r\n                      {isAscending ? \"Descending\" : \"Ascending\"}\r\n                    </button>\r\n                  </div>\r\n                  <ol style={{ maxHeight: '200px', overflowY: 'scroll' }}>{moves}</ol>\r\n\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel2a-content\"\r\n                  id=\"panel2a-header\"\r\n                >\r\n                  <Typography><b>Observer List</b></Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails style={{ display: 'flex', flexDirection: 'column', textAlign: 'left' }}>\r\n                  {observers.map((observer, i) =>\r\n                    <div key={i}>\r\n                      <Typography>\r\n                        {observer.Name}\r\n                      </Typography>\r\n                      <Divider />\r\n                    </div>\r\n\r\n                  )}\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n  return (\r\n    element\r\n  );\r\n}\r\n\r\nexport default Game;","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\board.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gamelist.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\utils\\helper.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\SnackBar\\snackbar.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\PlayedGamesDialog\\index.js",["182","183"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport config from '../../../constants/config.json';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { convertISOToDMY } from '../../../utils/helper';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n\tcontainer: {\r\n\t\tdisplay: 'inline-block',\r\n\t\twidth: '100%'\r\n\t},\r\n\tfloatRight: {\r\n\t\tfloat: \"right\",\r\n\t\twidth: '60%'\r\n\t},\r\n\tfloatLeft: {\r\n\t\tfloat: \"left\",\r\n\t\twidth: '40%'\r\n\t},\r\n\tpaperLikeShadow: {\r\n\t\tboxShadow: '0 4px 8px 5px rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n\t},\r\n\thidden: {\r\n\t\tdisplay: 'none'\r\n\t}\r\n}));\r\n\r\nexport default function PlayedGamesDialog() {\r\n\tconst classes = useStyles();\r\n\tconst userID = localStorage.getItem('userID');\r\n\tconst token = window.localStorage.getItem('jwtToken');\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [dense, setDense] = useState(false);\r\n\tconst [gameList, setGameList] = useState([]);\r\n\r\n\tconst handleClickOpen = () => {\r\n\t\tsetOpen(true);\r\n\t}\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function retrieveGameList() {\r\n\r\n\t\t\tconst res = await fetch(`${API_URL}/games/playedGames/${userID}`, {\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tconst result = await res.json();\r\n\t\t\tsetGameList(result.list);\r\n\t\t}\r\n\t\tretrieveGameList();\r\n\t}, [setGameList]);\r\n\r\n\tconst handleChangeToViewPlayedGame = (gameID) => {\r\n\t\tconst playedGame = window.open(`/playedGame/${gameID}`, \"_blank\");\r\n\t\tplayedGame.focus();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Button fullWidth variant=\"contained\" color=\"secondary\" onClick={handleClickOpen}>\r\n\t\t\t\tReview your played games\r\n      </Button>\r\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n\t\t\t\t<form >\r\n\t\t\t\t\t<DialogTitle id=\"form-dialog-title\">Review your played games</DialogTitle>\r\n\t\t\t\t\t<DialogContent>\r\n\r\n\t\t\t\t\t\t<div className={classes.demo}>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tgameList.length === 0 ?\r\n\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t<Divider />\r\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h6\" style={{ textAlign: 'center' }}>No game played</Typography>\r\n\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<List dense={dense}>\r\n\t\t\t\t\t\t\t\t\t\t{gameList.map((game, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<React.Fragment key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListItem button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ListItemAvatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HistoryIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</ListItemAvatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprimary={game.Name}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsecondary={(game.Player1ID === userID && game.Result === 1) ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(game.Player2ID === userID && game.Result === 2) ? \"You won\" :\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((game.Player1ID === userID && game.Result === 2) ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(game.Player2ID === userID && game.Result === 1) ? \"You lost\" : \"Draw\")}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ListItemSecondaryAction>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{convertISOToDMY(game.GameOverAt)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton edge=\"end\" aria-label=\"delete\" onClick={() => handleChangeToViewPlayedGame(game.ID)} >\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<VisibilityIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</ListItemSecondaryAction>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Divider />\r\n\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</List>\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t{/* <DialogActions>\r\n\t\t\t\t\t\t<Button color=\"secondary\">\r\n\t\t\t\t\t\t\tUpdate\r\n            </Button>\r\n\t\t\t\t\t\t<Button onClick={handleClose} color=\"primary\">\r\n\t\t\t\t\t\t\tCancel\r\n           </Button>\r\n\t\t\t\t\t</DialogActions> */}\r\n\t\t\t\t</form>\r\n\t\t\t</Dialog>\r\n\t\t</>\r\n\t);\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\gameServices.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Player\\player.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Timer\\timer.js",["184","185"],"import React, { useState, useEffect } from 'react';\r\nimport config from '../../constants/config.json';\r\n\r\nconst API_URL = config.API_URL_TEST;\r\nlet myTimeout = null;\r\n\r\nfunction Timer({ counter, setCounter }) {\r\n  useEffect(() => {\r\n    clearTimeout(myTimeout);\r\n    if (counter > 0) {\r\n      myTimeout = setTimeout(() => {\r\n        if (counter > 0) {\r\n          setCounter(counter - 1);\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      setCounter(0);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div style={{ fontSize: '24px', fontWeight: 'bold', margin: '10px' }}>\r\n      Time: {counter}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Secondary.js",["186"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport Input from '@material-ui/core/Input';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: 5,\r\n    top: 30,\r\n    border: `1px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n    background: ' green',\r\n  },\r\n}))(Badge);\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: drawerWidth,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginRight: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: 0,\r\n  },\r\n}));\r\n\r\nexport default function OnlineUsers({ socket, gameID, onlineUserList, observers, }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [onlineUserListCopy, setOnlineUserListCopy] = useState([]);\r\n  const userID = localStorage.getItem(\"userID\");\r\n\r\n  const handleDrawerOpen = () => {\r\n    setSearchString(\"\");\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n\r\n  }\r\n\r\n  const handleUserInvitaion = (id) => {\r\n    const hostName = localStorage.getItem('name');\r\n    socket.emit(`invite`, { hostName, gameID, userID: id });\r\n  }\r\n  useEffect(() => {\r\n    setOnlineUserListCopy(onlineUserList.slice());\r\n  }, [onlineUserList]);\r\n\r\n  useEffect(() => {\r\n    if (searchString !== \"\") {// có nội dung cần tìm\r\n      setOnlineUserListCopy(onlineUserListCopy.slice()\r\n        .filter(user => user.Name.toLowerCase().includes(searchString.toLowerCase())))\r\n    } else {\r\n      setOnlineUserListCopy(onlineUserList);\r\n    }\r\n  }, [searchString, onlineUserList]); // 2nd dependency help make sure new client connects will not make filtered list wrong\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton color=\"inherit\" aria-label=\"open drawer\" edge=\"end\"\r\n        onClick={handleDrawerOpen} className={clsx(open && classes.hide)}\r\n        style={{\r\n          position: 'absolute',\r\n          top: -10,\r\n          right: 25,\r\n          zIndex: 1,\r\n          alignContent: 'center',\r\n          fontSize: '4',\r\n          borderRadius: '50%',\r\n          height: '60px',\r\n          width: '60px',\r\n          color: '#FFF',\r\n          backgroundImage: 'linear-gradient(to right, #24C6DC 0%, #514A9D 100%)',\r\n          boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n        }}\r\n      >\r\n        <GroupAddIcon />\r\n      </IconButton>\r\n      <Drawer className={classes.drawer} variant=\"temporary\" anchor=\"right\"\r\n        open={open} classes={{ paper: classes.drawerPaper }} onClose={handleDrawerClose}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Input placeholder=\"Username here\"\r\n            onChange={(event) => { setSearchString(event.target.value) }}\r\n          />\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {onlineUserListCopy.map((user) => (\r\n            <ListItem key={user.ID}>\r\n              <ListItemIcon >\r\n                <StyledBadge badgeContent={\"\"} >\r\n                  <FaceIcon fontSize=\"large\" />\r\n                </StyledBadge>\r\n              </ListItemIcon>\r\n              <ListItemText primary={user.Name} />\r\n              {user.ID !== userID ?\r\n                <Button variant=\"outlined\" style={{ fontSize: '12px', borderRadius: '5px', padding: '2px' }}\r\n                  onClick={() => handleUserInvitaion(user.ID)}>\r\n                  Invite\r\n                  </Button>\r\n                :\r\n                <></>\r\n              }\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ImageUploadDialog\\index.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ChangePasswordDialog\\index.js",["187","188","189","190","191"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport SimpleSnackbar from '../../SnackBar/snackbar';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { isBlankString } from '../../../utils/helper'; //'../../../utils/index'\r\nimport config from '../../../constants/config.json';\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n\tcontainer: {\r\n\t\tdisplay: 'inline-block',\r\n\t\twidth: '100%'\r\n\t},\r\n\tfloatRight: {\r\n\t\tfloat: \"right\",\r\n\t\twidth: '60%'\r\n\t},\r\n\tfloatLeft: {\r\n\t\tfloat: \"left\",\r\n\t\twidth: '40%'\r\n\t},\r\n\tpaperLikeShadow: {\r\n\t\tboxShadow: '0 4px 8px 5px rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n\t},\r\n\thidden: {\r\n\t\tdisplay: 'none'\r\n\t}\r\n}));\r\n\r\nexport default function FormDialog(/*{ setShowSnackBar, contents, setContents }*/) {\r\n\tconst classes = useStyles();\r\n\tconst userID = localStorage.getItem('userID');\r\n\tconst token = window.localStorage.getItem('jwtToken');\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [currentPassword, setCurrentPassword] = useState(\"\");\r\n\tconst [newPassword, setNewPassword] = useState(\"\");\r\n\tconst [validCurentPassword, setValidCurentPassword] = useState(false);\r\n\tconst [validNewPassword, setValidNewPassword] = useState(false);\r\n\tconst [showSnackbar, setShowSnackBar] = useState(false);\r\n\tconst [contents, setContents] = useState([\r\n\t\t{ id: 4, msg: \"Password can't be empty!!!\" },\r\n\t\t{ id: 5, msg: \"New password can't be empty!!!\" },\r\n\t]);\r\n\r\n\tconst handleCurrentPasswordChange = (currentPassword) => {\r\n\t\tsetCurrentPassword(currentPassword);\r\n\t\tif (isBlankString(currentPassword)) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 4), { id: 4, msg: \"Password can't be empty!!!\" }]);\r\n\t\t\tsetValidCurentPassword(false);\r\n\t\t} else if (currentPassword.length < 6) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 4), { id: 4, msg: \"Password must have at least 6 characters!!!\" }]);\r\n\t\t\tsetValidCurentPassword(false);\r\n\t\t} else {\r\n\t\t\tsetContents(contents.filter(content => content.id !== 4));\r\n\t\t\tsetValidCurentPassword(true);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleNewPasswordChange = (newPassword) => {\r\n\t\tsetNewPassword(newPassword);\r\n\t\tif (isBlankString(newPassword)) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 5), { id: 5, msg: \"New password can't be empty!!!\" }]);\r\n\t\t\tsetValidNewPassword(false);\r\n\t\t} else if (newPassword.length < 6) {\r\n\t\t\tsetContents(contents => [...contents.filter(content => content.id != 5), { id: 5, msg: \"New password must have at least 6 characters!!!\" }]);\r\n\t\t\tsetValidNewPassword(false);\r\n\t\t} else {\r\n\t\t\tsetContents(contents.filter(content => content.id !== 5));\r\n\t\t\tsetValidNewPassword(true);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleClickOpen = () => {\r\n\t\tsetOpen(true);\r\n\t\tsetContents([\r\n\t\t\t{ id: 4, msg: \"Password can't be empty!!!\" },\r\n\t\t\t{ id: 5, msg: \"New password can't be empty!!!\" },\r\n\t\t]);\r\n\t}\r\n\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t\tsetCurrentPassword(\"\");\r\n\t\tsetNewPassword(\"\");\r\n\t\tsetShowSnackBar(false);\r\n\t}\r\n\r\n\tconst handleChangePassword = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif (!validCurentPassword || !validNewPassword) {\r\n\t\t\t// if (!validCurentPassword) {\r\n\t\t\t// \tif (!contents.includes({ id: 4, msg: \"Password can't be empty!!!\" })) {\r\n\t\t\t// \t\tsetContents(contents => [...contents, { id: 4, msg: \"Password can't be empty!!!\" }]);\r\n\t\t\t// \t}\r\n\t\t\t// \telse setContents(contents.filter(content => content.id !== 4));\r\n\t\t\t// }\r\n\t\t\t// if (!validNewPassword) {\r\n\t\t\t// \tif (!contents.includes({ id: 5, msg: \"New password can't be empty!!!\" })) {\r\n\t\t\t// \t\tsetContents(contents => [...contents, { id: 5, msg: \"New password can't be empty!!!\" }]);\r\n\t\t\t// \t}\r\n\t\t\t// \telse setContents(contents.filter(content => content.id !== 5));\r\n\t\t\t// }\r\n\t\t\tsetShowSnackBar(true);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst data = {\r\n\t\t\t\tCurrentPassword: currentPassword,\r\n\t\t\t\tNewPassword: newPassword\r\n\t\t\t}\r\n\t\t\tconst res = await fetch(`${API_URL}/users/profile/updatepassword/${userID}`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(data),\r\n\t\t\t});\r\n\r\n\t\t\t// const result = await res.json();\r\n\t\t\tif (res.status === 200) {\r\n\t\t\t\tsetShowSnackBar(true);\r\n\t\t\t} else {\r\n\t\t\t\tsetShowSnackBar(true);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<SimpleSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} contents={contents} />\r\n\r\n\t\t\t<Button fullWidth variant=\"outlined\" color=\"secondary\" onClick={handleClickOpen} startIcon={<SaveIcon />}>\r\n\t\t\t\tChange password\r\n      </Button>\r\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n\t\t\t\t<form >\r\n\t\t\t\t\t<DialogTitle id=\"form-dialog-title\">Change password</DialogTitle>\r\n\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t\t\t<Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> Current password:</b> </Typography>\r\n\t\t\t\t\t\t\t{validCurentPassword ?\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<TextField variant=\"outlined\" autoFocus margin=\"normal\" type=\"password\" fullWidth\r\n\t\t\t\t\t\t\tonChange={(event) => { handleCurrentPasswordChange(event.target.value); }}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<div className={classes.container}>\r\n\t\t\t\t\t\t\t<Typography className={classes.floatLeft} align=\"left\" component=\"h2\"><b> New password:</b> </Typography>\r\n\t\t\t\t\t\t\t{validNewPassword ?\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Typography className={classes.floatRight} align=\"right\" style={{ color: \"red\" }}>Invalid</Typography>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<TextField variant=\"outlined\" margin=\"normal\" type=\"password\" fullWidth\r\n\t\t\t\t\t\t\tonChange={(event) => { handleNewPasswordChange(event.target.value); }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Typography>Password must have at least 6 characters</Typography>\r\n\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button onClick={handleChangePassword} color=\"secondary\">\r\n\t\t\t\t\t\t\tUpdate\r\n            </Button>\r\n\t\t\t\t\t\t<Button onClick={handleClose} color=\"primary\">\r\n\t\t\t\t\t\t\tCancel\r\n           </Button>\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</form>\r\n\t\t\t</Dialog>\r\n\t\t</div>\r\n\t);\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Dialogs\\ResetPasswordDialog\\index.js",["192"],"import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { InformationSnackbar } from '../../SnackBar/snackbar';\r\nimport { isEmailPattern, isBlankString, containsBlank } from '../../../utils/helper';\r\nimport config from '../../../constants/config.json';\r\n\r\nconst API_URL = config.API_URL_TEST;\r\n\r\nexport default function ResetPasswordDialog() {\r\n  const userID = localStorage.getItem('userID');\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [usernameInput, setUsernameInput] = useState(\"\");\r\n  const [emailInput, setEmailInput] = useState(\"\");\r\n  const [showSnackbar, setShowSnackBar] = useState(false);\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSendEmail = async () => {\r\n\r\n    if (isBlankString(emailInput) || isBlankString(usernameInput)) {\r\n      setContent(\"Input can not be empty.\");\r\n      setShowSnackBar(true);\r\n      return;\r\n    }\r\n    if (containsBlank(usernameInput)) {\r\n      setContent(\"Username can not contain blank space.\");\r\n      setShowSnackBar(true);\r\n      return;\r\n    }\r\n    if (isEmailPattern(emailInput) === false) {\r\n      setContent(\"Email is not valid.\");\r\n      setShowSnackBar(true);\r\n      return;\r\n    }\r\n    const data = {\r\n      Username: usernameInput,\r\n      Email: emailInput\r\n    }\r\n    const res = await fetch(`${API_URL}/forgotpassword`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const result = await res.json();\r\n      setContent(result.msg);\r\n      setShowSnackBar(true);\r\n      setOpen(false);\r\n    } else {\r\n      const result = await res.json();\r\n      setContent(result.msg);\r\n      setShowSnackBar(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <InformationSnackbar open={showSnackbar} setOpen={(isOpen) => setShowSnackBar(isOpen)} content={content} />\r\n      <Link onClick={handleClickOpen} variant=\"body2\" style={{ cursor: 'pointer ' }}>\r\n        {\"Forgot password?\"}\r\n      </Link>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Reset password</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To reset to your password, please enter your username and <b>valid email</b> address here. Then you need to check this mail for further information.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Username\"\r\n            fullWidth\r\n            value={usernameInput}\r\n            onChange={(e) => setUsernameInput(e.target.value)}\r\n          />\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Email Address\"\r\n            type=\"email\"\r\n            fullWidth\r\n            value={emailInput}\r\n            onChange={(e) => setEmailInput(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleSendEmail} color=\"secondary\">\r\n            Send\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Game\\square.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\GameList\\gameitem.js",[],"D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\OnlineUsers\\onlineUsers_Primary.js",["193"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport List from '@material-ui/core/List';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Input from '@material-ui/core/Input';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: 5,\r\n    top: 30,\r\n    border: `1px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n    background: ' green',\r\n  },\r\n}))(Badge);\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  list: {\r\n    position: \"fixed\",\r\n    right: 30,\r\n    bottom: 0,\r\n    border: '2px solid grey',\r\n    borderBottomWidth: '0',\r\n    width: '300px',\r\n    borderRadius: '8px 8px 0 0',\r\n    maxHeight: '80%',\r\n    // overflowY: 'scroll',\r\n    overflow: 'auto',\r\n    background: '#f2f2f2'\r\n  },\r\n  card: {\r\n    position: \"fixed\",\r\n    right: 30,\r\n    bottom: 0,\r\n    border: `1px solid #3f51b5`,\r\n    borderRadius: '5px 5px 0 0',\r\n    width: '300px',\r\n    height: '50px',\r\n    background: '#3f51b5',\r\n    cursor: 'pointer',\r\n    display: 'inline-block',\r\n    color: 'white',\r\n    padding: '15px',\r\n    fontWeight: 'bold',\r\n  },\r\n\r\n  paperShadow: {\r\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n  },\r\n\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  floatLeft: {\r\n    float: 'left'\r\n  },\r\n  floatRight: {\r\n    float: 'right'\r\n  }\r\n\r\n}));\r\n\r\nexport default function OnlineUsers({ onlineUserList }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [onlineUserListCopy, setOnlineUserListCopy] = useState([]);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setSearchString(\"\");\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n\r\n  }\r\n  useEffect(() => {\r\n    setOnlineUserListCopy(onlineUserList.slice());\r\n  }, [onlineUserList]);\r\n\r\n  useEffect(() => {\r\n    if (searchString !== \"\")// có nội dung cần tìm\r\n    {\r\n      // console.log(\"v\");\r\n      setOnlineUserListCopy(onlineUserListCopy.slice()\r\n        .filter(user => user.Name.toLowerCase().includes(searchString.toLowerCase())))\r\n    }\r\n    else {\r\n      setOnlineUserListCopy(onlineUserList);\r\n    }\r\n  }, [searchString, onlineUserList]); // 2nd dependency help make sure new client connects will not make filtered list wrong\r\n\r\n\r\n  return (\r\n    <>\r\n      {open ?\r\n        <div className={`${classes.list} ${classes.paperShadow}`}>\r\n          <div className={classes.drawerHeader}>\r\n            <Input\r\n              placeholder=\"Username here\"\r\n              onChange={(event) => { setSearchString(event.target.value) }}\r\n              fullWidth\r\n              style={{ position: 'sticky' }}\r\n            />\r\n            <IconButton onClick={handleDrawerClose}>\r\n              <MinimizeIcon />\r\n            </IconButton>\r\n          </div>\r\n          <List >\r\n            {onlineUserListCopy.length === 0 ?\r\n              <div >No user found</div>\r\n              :\r\n              onlineUserListCopy.map((item) => (\r\n                <ListItem key={item.ID}>\r\n                  <ListItemIcon >\r\n                    <StyledBadge badgeContent={\"\"} >\r\n                      <FaceIcon fontSize=\"large\" />\r\n                    </StyledBadge>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={item.Name} />\r\n                  {/* <Button variant=\"outlined\" style={{ fontSize: '12px', borderRadius: '5px', padding: '2px' }}>Invite</Button> */}\r\n                </ListItem>\r\n              ))}\r\n          </List>\r\n        </div>\r\n        :\r\n        <div className={`${classes.card} ${classes.paperShadow}`} onClick={() => handleDrawerOpen()}>\r\n          <div className={classes.floatLeft}>\r\n            Online Users\r\n          </div>\r\n          <div className={classes.floatRight} style={{ marginRight: '10px' }}>\r\n            <Badge badgeContent={onlineUserList.length} color=\"secondary\" />\r\n          </div>\r\n        </div>\r\n      }\r\n\r\n    </>\r\n\r\n  );\r\n}\r\n","D:\\Code\\webapp\\PTUDWNC_CaroOnline\\caro_app\\src\\components\\Ranking\\index.js",[],{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":16,"column":8,"nodeType":"200","messageId":"201","endLine":16,"endColumn":18},{"ruleId":"198","severity":1,"message":"202","line":18,"column":8,"nodeType":"200","messageId":"201","endLine":18,"endColumn":19},{"ruleId":"198","severity":1,"message":"203","line":24,"column":10,"nodeType":"200","messageId":"201","endLine":24,"endColumn":19},{"ruleId":"198","severity":1,"message":"204","line":197,"column":9,"nodeType":"200","messageId":"201","endLine":197,"endColumn":23},{"ruleId":"205","severity":1,"message":"206","line":58,"column":6,"nodeType":"207","endLine":58,"endColumn":8,"suggestions":"208"},{"ruleId":"205","severity":1,"message":"209","line":127,"column":6,"nodeType":"207","endLine":127,"endColumn":8,"suggestions":"210"},{"ruleId":"205","severity":1,"message":"211","line":145,"column":6,"nodeType":"207","endLine":145,"endColumn":17,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":247,"column":25,"nodeType":"215","endLine":251,"endColumn":30},{"ruleId":"198","severity":1,"message":"216","line":9,"column":8,"nodeType":"200","messageId":"201","endLine":9,"endColumn":11},{"ruleId":"198","severity":1,"message":"217","line":13,"column":26,"nodeType":"200","messageId":"201","endLine":13,"endColumn":45},{"ruleId":"198","severity":1,"message":"203","line":19,"column":10,"nodeType":"200","messageId":"201","endLine":19,"endColumn":19},{"ruleId":"205","severity":1,"message":"218","line":82,"column":6,"nodeType":"207","endLine":82,"endColumn":8,"suggestions":"219"},{"ruleId":"198","severity":1,"message":"220","line":35,"column":10,"nodeType":"200","messageId":"201","endLine":35,"endColumn":16},{"ruleId":"198","severity":1,"message":"221","line":35,"column":18,"nodeType":"200","messageId":"201","endLine":35,"endColumn":27},{"ruleId":"205","severity":1,"message":"222","line":48,"column":6,"nodeType":"207","endLine":48,"endColumn":8,"suggestions":"223"},{"ruleId":"205","severity":1,"message":"224","line":94,"column":6,"nodeType":"207","endLine":94,"endColumn":67,"suggestions":"225"},{"ruleId":"213","severity":1,"message":"214","line":156,"column":15,"nodeType":"215","endLine":158,"endColumn":17},{"ruleId":"213","severity":1,"message":"214","line":164,"column":15,"nodeType":"215","endLine":166,"endColumn":17},{"ruleId":"205","severity":1,"message":"226","line":72,"column":6,"nodeType":"207","endLine":72,"endColumn":8,"suggestions":"227"},{"ruleId":"205","severity":1,"message":"228","line":88,"column":6,"nodeType":"207","endLine":88,"endColumn":8,"suggestions":"229"},{"ruleId":"205","severity":1,"message":"230","line":105,"column":6,"nodeType":"207","endLine":105,"endColumn":8,"suggestions":"231"},{"ruleId":"205","severity":1,"message":"232","line":46,"column":5,"nodeType":"207","endLine":46,"endColumn":9,"suggestions":"233"},{"ruleId":"198","severity":1,"message":"234","line":4,"column":8,"nodeType":"200","messageId":"201","endLine":4,"endColumn":18},{"ruleId":"205","severity":1,"message":"235","line":29,"column":6,"nodeType":"207","endLine":29,"endColumn":14,"suggestions":"236"},{"ruleId":"205","severity":1,"message":"222","line":147,"column":6,"nodeType":"207","endLine":147,"endColumn":8,"suggestions":"237"},{"ruleId":"205","severity":1,"message":"238","line":155,"column":6,"nodeType":"207","endLine":155,"endColumn":8,"suggestions":"239"},{"ruleId":"205","severity":1,"message":"240","line":170,"column":6,"nodeType":"207","endLine":170,"endColumn":12,"suggestions":"241"},{"ruleId":"205","severity":1,"message":"242","line":181,"column":6,"nodeType":"207","endLine":181,"endColumn":48,"suggestions":"243"},{"ruleId":"205","severity":1,"message":"235","line":193,"column":6,"nodeType":"207","endLine":193,"endColumn":22,"suggestions":"244"},{"ruleId":"205","severity":1,"message":"235","line":209,"column":6,"nodeType":"207","endLine":209,"endColumn":36,"suggestions":"245"},{"ruleId":"205","severity":1,"message":"235","line":217,"column":6,"nodeType":"207","endLine":217,"endColumn":14,"suggestions":"246"},{"ruleId":"205","severity":1,"message":"235","line":269,"column":6,"nodeType":"207","endLine":269,"endColumn":22,"suggestions":"247"},{"ruleId":"205","severity":1,"message":"248","line":283,"column":6,"nodeType":"207","endLine":283,"endColumn":44,"suggestions":"249"},{"ruleId":"205","severity":1,"message":"235","line":291,"column":6,"nodeType":"207","endLine":291,"endColumn":22,"suggestions":"250"},{"ruleId":"205","severity":1,"message":"235","line":312,"column":6,"nodeType":"207","endLine":312,"endColumn":22,"suggestions":"251"},{"ruleId":"205","severity":1,"message":"235","line":342,"column":6,"nodeType":"207","endLine":342,"endColumn":22,"suggestions":"252"},{"ruleId":"205","severity":1,"message":"253","line":376,"column":6,"nodeType":"207","endLine":376,"endColumn":8,"suggestions":"254"},{"ruleId":"205","severity":1,"message":"255","line":567,"column":6,"nodeType":"207","endLine":567,"endColumn":28,"suggestions":"256"},{"ruleId":"205","severity":1,"message":"255","line":576,"column":6,"nodeType":"207","endLine":576,"endColumn":28,"suggestions":"257"},{"ruleId":"205","severity":1,"message":"255","line":601,"column":6,"nodeType":"207","endLine":601,"endColumn":14,"suggestions":"258"},{"ruleId":"198","severity":1,"message":"259","line":638,"column":9,"nodeType":"200","messageId":"201","endLine":638,"endColumn":18},{"ruleId":"198","severity":1,"message":"260","line":644,"column":9,"nodeType":"200","messageId":"201","endLine":644,"endColumn":25},{"ruleId":"198","severity":1,"message":"261","line":49,"column":16,"nodeType":"200","messageId":"201","endLine":49,"endColumn":24},{"ruleId":"205","severity":1,"message":"211","line":74,"column":5,"nodeType":"207","endLine":74,"endColumn":18,"suggestions":"262"},{"ruleId":"198","severity":1,"message":"263","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":25},{"ruleId":"198","severity":1,"message":"264","line":4,"column":7,"nodeType":"200","messageId":"201","endLine":4,"endColumn":14},{"ruleId":"205","severity":1,"message":"265","line":120,"column":6,"nodeType":"207","endLine":120,"endColumn":36,"suggestions":"266"},{"ruleId":"198","severity":1,"message":"267","line":1,"column":27,"nodeType":"200","messageId":"201","endLine":1,"endColumn":36},{"ruleId":"268","severity":1,"message":"269","line":56,"column":70,"nodeType":"270","messageId":"271","endLine":56,"endColumn":72},{"ruleId":"268","severity":1,"message":"269","line":59,"column":70,"nodeType":"270","messageId":"271","endLine":59,"endColumn":72},{"ruleId":"268","severity":1,"message":"269","line":70,"column":70,"nodeType":"270","messageId":"271","endLine":70,"endColumn":72},{"ruleId":"268","severity":1,"message":"269","line":73,"column":70,"nodeType":"270","messageId":"271","endLine":73,"endColumn":72},{"ruleId":"198","severity":1,"message":"272","line":17,"column":9,"nodeType":"200","messageId":"201","endLine":17,"endColumn":15},{"ruleId":"205","severity":1,"message":"265","line":112,"column":6,"nodeType":"207","endLine":112,"endColumn":36,"suggestions":"273"},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"no-unused-vars","'GoogleIcon' is defined but never used.","Identifier","unusedVar","'GoogleLogin' is defined but never used.","'Copyright' is defined but never used.","'responseGoogle' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'setIsLoggedIn', 'socket', and 'userID'. Either include them or remove the dependency array. If 'setIsLoggedIn' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["276"],"React Hook useEffect has missing dependencies: 'history', 'token', and 'userID'. Either include them or remove the dependency array.",["277"],"React Hook useEffect has missing dependencies: 'token' and 'userID'. Either include them or remove the dependency array.",["278"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Box' is defined but never used.","'InformationSnackbar' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'isLoggedIn', and 'reqID'. Either include them or remove the dependency array.",["279"],"'player' is assigned a value but never used.","'setPlayer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'History'. Either include it or remove the dependency array.",["280"],"React Hook useEffect has missing dependencies: 'gameID' and 'token'. Either include them or remove the dependency array.",["281"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["282"],"React Hook useEffect has a missing dependency: 'jwtToken'. Either include it or remove the dependency array.",["283"],"React Hook useEffect has missing dependencies: 'history', 'socket', and 'userID'. Either include them or remove the dependency array.",["284"],"React Hook useEffect has missing dependencies: 'history', 'isLoggedIn', 'setIsLoggedIn', and 'socket'. Either include them or remove the dependency array. If 'setIsLoggedIn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["285"],"'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["286"],["287"],"React Hook useEffect has missing dependencies: 'game', 'gameID', and 'getGame'. Either include them or remove the dependency array.",["288"],"React Hook useEffect has missing dependencies: 'getPlayer' and 'userID'. Either include them or remove the dependency array.",["289"],"React Hook useEffect has missing dependencies: 'game.Player1ID', 'gameID', 'player1.Elo', 'player2.Elo', and 'socket'. Either include them or remove the dependency array.",["290"],["291"],["292"],["293"],["294"],"React Hook useEffect has missing dependencies: 'player1Ready', 'player2Ready', and 'socket'. Either include them or remove the dependency array.",["295"],["296"],["297"],["298"],"React Hook useEffect has missing dependencies: 'gameID', 'socket', and 'userID'. Either include them or remove the dependency array.",["299"],"React Hook useEffect has missing dependencies: 'socket' and 'userID'. Either include them or remove the dependency array.",["300"],["301"],["302"],"'alertUser' is assigned a value but never used.","'handleEndConcert' is assigned a value but never used.","'setDense' is assigned a value but never used.",["303"],"'useState' is defined but never used.","'API_URL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onlineUserListCopy'. Either include it or remove the dependency array. You can also do a functional update 'setOnlineUserListCopy(o => ...)' if you only need 'onlineUserListCopy' in the 'setOnlineUserListCopy' call.",["304"],"'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'userID' is assigned a value but never used.",["305"],"no-global-assign","no-unsafe-negation",{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"314","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"335","fix":"341"},{"desc":"342","fix":"343"},{"desc":"335","fix":"344"},{"desc":"345","fix":"346"},{"desc":"335","fix":"347"},{"desc":"335","fix":"348"},{"desc":"349","fix":"350"},{"desc":"349","fix":"351"},{"desc":"335","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"355","fix":"357"},"Update the dependencies array to be: [history, setIsLoggedIn, socket, userID]",{"range":"358","text":"359"},"Update the dependencies array to be: [history, token, userID]",{"range":"360","text":"361"},"Update the dependencies array to be: [setAvatar, token, userID]",{"range":"362","text":"363"},"Update the dependencies array to be: [history, isLoggedIn, reqID]",{"range":"364","text":"365"},"Update the dependencies array to be: [History]",{"range":"366","text":"367"},"Update the dependencies array to be: [setGame, setHistory, setChatHistory, setAvatar1, setAvatar2, token, gameID]",{"range":"368","text":"369"},"Update the dependencies array to be: [history]",{"range":"370","text":"371"},"Update the dependencies array to be: [jwtToken]",{"range":"372","text":"373"},"Update the dependencies array to be: [history, socket, userID]",{"range":"374","text":"375"},"Update the dependencies array to be: [ID, history, isLoggedIn, setIsLoggedIn, socket]",{"range":"376","text":"377"},"Update the dependencies array to be: [socket, userID]",{"range":"378","text":"379"},{"range":"380","text":"367"},"Update the dependencies array to be: [game, gameID, getGame]",{"range":"381","text":"382"},"Update the dependencies array to be: [game, getPlayer, userID]",{"range":"383","text":"384"},"Update the dependencies array to be: [player1Ready, player2Ready, isMainPlayer, socket, gameID, game.Player1ID, player1.Elo, player2.Elo]",{"range":"385","text":"386"},"Update the dependencies array to be: [gameID, socket, userID]",{"range":"387","text":"388"},"Update the dependencies array to be: [gameID, userID, isMainPlayer, socket]",{"range":"389","text":"390"},"Update the dependencies array to be: [gameID, socket]",{"range":"391","text":"392"},{"range":"393","text":"388"},"Update the dependencies array to be: [gameID, userID, chatHistory, history, socket, player1Ready, player2Ready]",{"range":"394","text":"395"},{"range":"396","text":"388"},"Update the dependencies array to be: [userID, gameID, socket]",{"range":"397","text":"398"},{"range":"399","text":"388"},{"range":"400","text":"388"},"Update the dependencies array to be: [gameID, player2.Name, socket, userID]",{"range":"401","text":"402"},{"range":"403","text":"402"},{"range":"404","text":"388"},"Update the dependencies array to be: [setGameList, token, userID]",{"range":"405","text":"406"},"Update the dependencies array to be: [searchString, onlineUserList, onlineUserListCopy]",{"range":"407","text":"408"},{"range":"409","text":"408"},[1681,1683],"[history, setIsLoggedIn, socket, userID]",[4278,4280],"[history, token, userID]",[4734,4745],"[setAvatar, token, userID]",[2464,2466],"[history, isLoggedIn, reqID]",[1804,1806],"[History]",[3232,3293],"[setGame, setHistory, setChatHistory, setAvatar1, setAvatar2, token, gameID]",[2455,2457],"[history]",[2867,2869],"[jwtToken]",[3291,3293],"[history, socket, userID]",[1361,1365],"[ID, history, isLoggedIn, setIsLoggedIn, socket]",[1135,1143],"[socket, userID]",[5311,5313],[5488,5490],"[game, gameID, getGame]",[5935,5941],"[game, getPlayer, userID]",[6270,6312],"[player1Ready, player2Ready, isMainPlayer, socket, gameID, game.Player1ID, player1.Elo, player2.Elo]",[6622,6638],"[gameID, socket, userID]",[7078,7108],"[gameID, userID, isMainPlayer, socket]",[7316,7324],"[gameID, socket]",[9164,9180],[9552,9590],"[gameID, userID, chatHistory, history, socket, player1Ready, player2Ready]",[9805,9821],[10414,10430],"[userID, gameID, socket]",[11297,11313],[12387,12389],[17549,17571],"[gameID, player2.Name, socket, userID]",[17818,17840],[18512,18520],[2278,2291],"[setGameList, token, userID]",[3628,3658],"[searchString, onlineUserList, onlineUserListCopy]",[2935,2965]]